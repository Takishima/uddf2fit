// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef UDDF_3_2_3_HXX
#define UDDF_3_2_3_HXX

#include "uddf_3.2.3-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ID.hxx"

#include "IDREF.hxx"

#include "ID_TYPE.hxx"

#include "markerType.hxx"

#include "namedType.hxx"

#include "simpleNamedType.hxx"

#include "addressType.hxx"

#include "contactType.hxx"

#include "encapsulatedDateTimeType.hxx"

#include "notesType.hxx"

#include "linkType.hxx"

#include "priceType.hxx"

#include "priceperdivepackageType.hxx"

#include "ratingType.hxx"

#include "ratingvalueType.hxx"

#include "mediaType.hxx"

#include "imageType.hxx"

#include "personType.hxx"

#include "sexType.hxx"

#include "personalType.hxx"

#include "individualType.hxx"

#include "examinationType.hxx"

#include "certificationType.hxx"

#include "instructorType.hxx"

#include "permitType.hxx"

#include "insuranceType.hxx"

#include "equipmentType.hxx"

#include "equipmentconfigurationType.hxx"

#include "manufacturerType.hxx"

#include "equipmentPieceType.hxx"

#include "suitType.hxx"

#include "tankType.hxx"

#include "tankmaterialType.hxx"

#include "cameraType.hxx"

#include "videocameraType.hxx"

#include "purchaseType.hxx"

#include "shopType.hxx"

#include "divebaseType.hxx"

#include "guideType.hxx"

#include "siteType.hxx"

#include "geographyType.hxx"

#include "sitedataType.hxx"

#include "wreckType.hxx"

#include "builtType.hxx"

#include "dimensionType.hxx"

#include "placeType.hxx"

#include "caveType.hxx"

#include "indoorType.hxx"

#include "ecologyType.hxx"

#include "floraType.hxx"

#include "faunaType.hxx"

#include "invertebrataType.hxx"

#include "vertebrataType.hxx"

#include "singleLifeFormType.hxx"

#include "speciesType.hxx"

#include "globallightintensityType.hxx"

#include "lightintensityType.hxx"

#include "mixType.hxx"

#include "repetitiongroupType.hxx"

#include "diveType.hxx"

#include "informationbeforediveType.hxx"

#include "informationafterdiveType.hxx"

#include "surfaceintervalType.hxx"

#include "wayaltitudeType.hxx"

#include "exposuretoaltitudeType.hxx"

#include "tankdataType.hxx"

#include "waypointType.hxx"

#include "alarmType.hxx"

#include "drugType.hxx"

#include "applicationdataType.hxx"

#include "observationsType.hxx"

#include "outputType.hxx"

#include "inputprofileType.hxx"

#include "baseCalculationType.hxx"

#include "mixchangeType.hxx"

#include "tableType.hxx"

#include "tablescopeType.hxx"

#include "bottomtimetableType.hxx"

#include "bottomtimetablescopeType.hxx"

#include "tripType.hxx"

#include "trippartType.hxx"

#include "accommodationType.hxx"

#include "vesselType.hxx"

#include "operatorType.hxx"

#include "setdcdataType.hxx"

#include "dcgasdefinitionsdataType.hxx"

#include "dcendndtalarmType.hxx"

#include "dcdivepo2alarmType.hxx"

#include "dcdivesitedataType.hxx"

#include "dcbuddydataType.hxx"

#include "dcdivedepthalarmType.hxx"

#include "dcdivetimealarmType.hxx"

#include "dcalarmtimeType.hxx"

#include "dcalarmWithTimeType.hxx"

#include "dcalarmWithDepthType.hxx"

#include "dcdecomodelType.hxx"

#include "dcalarmType.hxx"

#include "getdcdataType.hxx"

#include "divecomputerdumpType.hxx"

#include "buehlmannType.hxx"

#include "rgbmType.hxx"

#include "vpmType.hxx"

#include "tissueType.hxx"

#include "samplesType.hxx"

#include "rebreatherType.hxx"

#include "divemodeType.hxx"

#include "uddf.hxx"

#include "currency.hxx"

#include "generator.hxx"

#include "mediadata.hxx"

#include "imagedata.hxx"

#include "maker.hxx"

#include "business.hxx"

#include "diver.hxx"

#include "medical.hxx"

#include "education.hxx"

#include "divepermissions.hxx"

#include "diveinsurances.hxx"

#include "membership.hxx"

#include "smoking.hxx"

#include "numberofdives.hxx"

#include "examinationresult.hxx"

#include "suittype1.hxx"

#include "divesite.hxx"

#include "environment.hxx"

#include "abundance.hxx"

#include "lifestage.hxx"

#include "dominance.hxx"

#include "gasdefinitions.hxx"

#include "profiledata.hxx"

#include "equipmentused.hxx"

#include "apparatus.hxx"

#include "platform.hxx"

#include "purpose.hxx"

#include "stateofrestbeforedive.hxx"

#include "alcoholbeforedive.hxx"

#include "medicalbeforedive.hxx"

#include "nosuit.hxx"

#include "current.hxx"

#include "diveplan.hxx"

#include "equipmentmalfunction.hxx"

#include "problems.hxx"

#include "program.hxx"

#include "thermalcomfort.hxx"

#include "workload.hxx"

#include "anysymptoms.hxx"

#include "divetable.hxx"

#include "globalalarmsgiven.hxx"

#include "infinity.hxx"

#include "transportation.hxx"

#include "alarm.hxx"

#include "batterychargecondition.hxx"

#include "decostop.hxx"

#include "setpo2.hxx"

#include "tankpressure.hxx"

#include "divemode.hxx"

#include "gradientfactor.hxx"

#include "measuredpo2.hxx"

#include "periodicallytaken.hxx"

#include "decotrainer.hxx"

#include "hargikas.hxx"

#include "heinrichsweikamp.hxx"

#include "tausim.hxx"

#include "tautabu.hxx"

#include "tablegeneration.hxx"

#include "ascent.hxx"

#include "descent.hxx"

#include "divetrip.hxx"

#include "dateoftrip.hxx"

#include "relateddives.hxx"

#include "divecomputercontrol.hxx"

#include "acknowledge.hxx"

#include "gas.hxx"

#include "decomodel.hxx"

#include "type.hxx"

#include "meteringmethod.hxx"

#include "buddy.hxx"

#include "quality.hxx"

#include "occurence.hxx"

#include "globalalarm.hxx"

#include "kind.hxx"

#include "setby.hxx"

#include "calculateprofile.hxx"

#include "calculatetable.hxx"

#include "calculatebottomtimetable.hxx"

namespace streit
{
}

#include <iosfwd>

namespace streit
{
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::streit::uddf >
  uddf_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // UDDF_3_2_3_HXX
