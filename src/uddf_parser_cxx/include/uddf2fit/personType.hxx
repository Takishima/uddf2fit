// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef PERSON_TYPE_HXX
#define PERSON_TYPE_HXX

#include "personType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "individualType.hxx"

#include "equipmentType-fwd.hxx"

#include "medical-fwd.hxx"

#include "education-fwd.hxx"

#include "divepermissions-fwd.hxx"

#include "diveinsurances-fwd.hxx"

#include "notesType-fwd.hxx"

namespace streit
{
  class personType: public ::streit::individualType
  {
    public:
    // equipment
    //
    typedef ::streit::equipmentType equipment_type;
    typedef ::xsd::cxx::tree::optional< equipment_type > equipment_optional;
    typedef ::xsd::cxx::tree::traits< equipment_type, char > equipment_traits;

    const equipment_optional&
    equipment () const;

    equipment_optional&
    equipment ();

    void
    equipment (const equipment_type& x);

    void
    equipment (const equipment_optional& x);

    void
    equipment (::std::unique_ptr< equipment_type > p);

    // medical
    //
    typedef ::streit::medical medical_type;
    typedef ::xsd::cxx::tree::optional< medical_type > medical_optional;
    typedef ::xsd::cxx::tree::traits< medical_type, char > medical_traits;

    const medical_optional&
    medical () const;

    medical_optional&
    medical ();

    void
    medical (const medical_type& x);

    void
    medical (const medical_optional& x);

    void
    medical (::std::unique_ptr< medical_type > p);

    // education
    //
    typedef ::streit::education education_type;
    typedef ::xsd::cxx::tree::optional< education_type > education_optional;
    typedef ::xsd::cxx::tree::traits< education_type, char > education_traits;

    const education_optional&
    education () const;

    education_optional&
    education ();

    void
    education (const education_type& x);

    void
    education (const education_optional& x);

    void
    education (::std::unique_ptr< education_type > p);

    // divepermissions
    //
    typedef ::streit::divepermissions divepermissions_type;
    typedef ::xsd::cxx::tree::optional< divepermissions_type > divepermissions_optional;
    typedef ::xsd::cxx::tree::traits< divepermissions_type, char > divepermissions_traits;

    const divepermissions_optional&
    divepermissions () const;

    divepermissions_optional&
    divepermissions ();

    void
    divepermissions (const divepermissions_type& x);

    void
    divepermissions (const divepermissions_optional& x);

    void
    divepermissions (::std::unique_ptr< divepermissions_type > p);

    // diveinsurances
    //
    typedef ::streit::diveinsurances diveinsurances_type;
    typedef ::xsd::cxx::tree::optional< diveinsurances_type > diveinsurances_optional;
    typedef ::xsd::cxx::tree::traits< diveinsurances_type, char > diveinsurances_traits;

    const diveinsurances_optional&
    diveinsurances () const;

    diveinsurances_optional&
    diveinsurances ();

    void
    diveinsurances (const diveinsurances_type& x);

    void
    diveinsurances (const diveinsurances_optional& x);

    void
    diveinsurances (::std::unique_ptr< diveinsurances_type > p);

    // notes
    //
    typedef ::streit::notesType notes_type;
    typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
    typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

    const notes_optional&
    notes () const;

    notes_optional&
    notes ();

    void
    notes (const notes_type& x);

    void
    notes (const notes_optional& x);

    void
    notes (::std::unique_ptr< notes_type > p);

    // Constructors.
    //
    personType (const id_type&,
                const personal_type&);

    personType (const id_type&,
                ::std::unique_ptr< personal_type >);

    personType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    personType (const personType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual personType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    personType&
    operator= (const personType& x);

    virtual 
    ~personType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    equipment_optional equipment_;
    medical_optional medical_;
    education_optional education_;
    divepermissions_optional divepermissions_;
    diveinsurances_optional diveinsurances_;
    notes_optional notes_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const personType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PERSON_TYPE_HXX
