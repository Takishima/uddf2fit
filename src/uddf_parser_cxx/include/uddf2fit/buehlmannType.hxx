// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef BUEHLMANN_TYPE_HXX
#define BUEHLMANN_TYPE_HXX

#include "buehlmannType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ID_TYPE.hxx"

#include "tissueType-fwd.hxx"

namespace streit
{
  class buehlmannType: public ::streit::ID_TYPE
  {
    public:
    // tissue
    //
    typedef ::streit::tissueType tissue_type;
    typedef ::xsd::cxx::tree::sequence< tissue_type > tissue_sequence;
    typedef tissue_sequence::iterator tissue_iterator;
    typedef tissue_sequence::const_iterator tissue_const_iterator;
    typedef ::xsd::cxx::tree::traits< tissue_type, char > tissue_traits;

    const tissue_sequence&
    tissue () const;

    tissue_sequence&
    tissue ();

    void
    tissue (const tissue_sequence& s);

    // gradientfactorhigh
    //
    typedef ::xml_schema::float_ gradientfactorhigh_type;
    typedef ::xsd::cxx::tree::optional< gradientfactorhigh_type > gradientfactorhigh_optional;
    typedef ::xsd::cxx::tree::traits< gradientfactorhigh_type, char > gradientfactorhigh_traits;

    const gradientfactorhigh_optional&
    gradientfactorhigh () const;

    gradientfactorhigh_optional&
    gradientfactorhigh ();

    void
    gradientfactorhigh (const gradientfactorhigh_type& x);

    void
    gradientfactorhigh (const gradientfactorhigh_optional& x);

    // gradientfactorlow
    //
    typedef ::xml_schema::float_ gradientfactorlow_type;
    typedef ::xsd::cxx::tree::optional< gradientfactorlow_type > gradientfactorlow_optional;
    typedef ::xsd::cxx::tree::traits< gradientfactorlow_type, char > gradientfactorlow_traits;

    const gradientfactorlow_optional&
    gradientfactorlow () const;

    gradientfactorlow_optional&
    gradientfactorlow ();

    void
    gradientfactorlow (const gradientfactorlow_type& x);

    void
    gradientfactorlow (const gradientfactorlow_optional& x);

    // Constructors.
    //
    buehlmannType (const id_type&);

    buehlmannType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    buehlmannType (const buehlmannType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual buehlmannType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    buehlmannType&
    operator= (const buehlmannType& x);

    virtual 
    ~buehlmannType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    tissue_sequence tissue_;
    gradientfactorhigh_optional gradientfactorhigh_;
    gradientfactorlow_optional gradientfactorlow_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const buehlmannType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BUEHLMANN_TYPE_HXX
