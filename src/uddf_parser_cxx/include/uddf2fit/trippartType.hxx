// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef TRIPPART_TYPE_HXX
#define TRIPPART_TYPE_HXX

#include "trippartType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simpleNamedType.hxx"

#include "dateoftrip-fwd.hxx"

#include "geographyType-fwd.hxx"

#include "accommodationType-fwd.hxx"

#include "operatorType-fwd.hxx"

#include "vesselType-fwd.hxx"

#include "linkType-fwd.hxx"

#include "relateddives-fwd.hxx"

#include "priceperdivepackageType-fwd.hxx"

#include "priceType-fwd.hxx"

#include "ratingType-fwd.hxx"

#include "notesType-fwd.hxx"

namespace streit
{
  class trippartType: public ::streit::simpleNamedType
  {
    public:
    // dateoftrip
    //
    typedef ::streit::dateoftrip dateoftrip_type;
    typedef ::xsd::cxx::tree::optional< dateoftrip_type > dateoftrip_optional;
    typedef ::xsd::cxx::tree::traits< dateoftrip_type, char > dateoftrip_traits;

    const dateoftrip_optional&
    dateoftrip () const;

    dateoftrip_optional&
    dateoftrip ();

    void
    dateoftrip (const dateoftrip_type& x);

    void
    dateoftrip (const dateoftrip_optional& x);

    void
    dateoftrip (::std::unique_ptr< dateoftrip_type > p);

    // geography
    //
    typedef ::streit::geographyType geography_type;
    typedef ::xsd::cxx::tree::optional< geography_type > geography_optional;
    typedef ::xsd::cxx::tree::traits< geography_type, char > geography_traits;

    const geography_optional&
    geography () const;

    geography_optional&
    geography ();

    void
    geography (const geography_type& x);

    void
    geography (const geography_optional& x);

    void
    geography (::std::unique_ptr< geography_type > p);

    // accomodation
    //
    typedef ::streit::accommodationType accomodation_type;
    typedef ::xsd::cxx::tree::optional< accomodation_type > accomodation_optional;
    typedef ::xsd::cxx::tree::traits< accomodation_type, char > accomodation_traits;

    const accomodation_optional&
    accomodation () const;

    accomodation_optional&
    accomodation ();

    void
    accomodation (const accomodation_type& x);

    void
    accomodation (const accomodation_optional& x);

    void
    accomodation (::std::unique_ptr< accomodation_type > p);

    // operator
    //
    typedef ::streit::operatorType operator_type;
    typedef ::xsd::cxx::tree::optional< operator_type > operator_optional;
    typedef ::xsd::cxx::tree::traits< operator_type, char > operator_traits;

    const operator_optional&
    operator_ () const;

    operator_optional&
    operator_ ();

    void
    operator_ (const operator_type& x);

    void
    operator_ (const operator_optional& x);

    void
    operator_ (::std::unique_ptr< operator_type > p);

    // vessel
    //
    typedef ::streit::vesselType vessel_type;
    typedef ::xsd::cxx::tree::optional< vessel_type > vessel_optional;
    typedef ::xsd::cxx::tree::traits< vessel_type, char > vessel_traits;

    const vessel_optional&
    vessel () const;

    vessel_optional&
    vessel ();

    void
    vessel (const vessel_type& x);

    void
    vessel (const vessel_optional& x);

    void
    vessel (::std::unique_ptr< vessel_type > p);

    // link
    //
    typedef ::streit::linkType link_type;
    typedef ::xsd::cxx::tree::optional< link_type > link_optional;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_optional&
    link () const;

    link_optional&
    link ();

    void
    link (const link_type& x);

    void
    link (const link_optional& x);

    void
    link (::std::unique_ptr< link_type > p);

    // relateddives
    //
    typedef ::streit::relateddives relateddives_type;
    typedef ::xsd::cxx::tree::optional< relateddives_type > relateddives_optional;
    typedef ::xsd::cxx::tree::traits< relateddives_type, char > relateddives_traits;

    const relateddives_optional&
    relateddives () const;

    relateddives_optional&
    relateddives ();

    void
    relateddives (const relateddives_type& x);

    void
    relateddives (const relateddives_optional& x);

    void
    relateddives (::std::unique_ptr< relateddives_type > p);

    // pricedivepackage
    //
    typedef ::streit::priceperdivepackageType pricedivepackage_type;
    typedef ::xsd::cxx::tree::optional< pricedivepackage_type > pricedivepackage_optional;
    typedef ::xsd::cxx::tree::traits< pricedivepackage_type, char > pricedivepackage_traits;

    const pricedivepackage_optional&
    pricedivepackage () const;

    pricedivepackage_optional&
    pricedivepackage ();

    void
    pricedivepackage (const pricedivepackage_type& x);

    void
    pricedivepackage (const pricedivepackage_optional& x);

    void
    pricedivepackage (::std::unique_ptr< pricedivepackage_type > p);

    // priceperdive
    //
    typedef ::streit::priceType priceperdive_type;
    typedef ::xsd::cxx::tree::optional< priceperdive_type > priceperdive_optional;
    typedef ::xsd::cxx::tree::traits< priceperdive_type, char > priceperdive_traits;

    const priceperdive_optional&
    priceperdive () const;

    priceperdive_optional&
    priceperdive ();

    void
    priceperdive (const priceperdive_type& x);

    void
    priceperdive (const priceperdive_optional& x);

    void
    priceperdive (::std::unique_ptr< priceperdive_type > p);

    // rating
    //
    typedef ::streit::ratingType rating_type;
    typedef ::xsd::cxx::tree::sequence< rating_type > rating_sequence;
    typedef rating_sequence::iterator rating_iterator;
    typedef rating_sequence::const_iterator rating_const_iterator;
    typedef ::xsd::cxx::tree::traits< rating_type, char > rating_traits;

    const rating_sequence&
    rating () const;

    rating_sequence&
    rating ();

    void
    rating (const rating_sequence& s);

    // notes
    //
    typedef ::streit::notesType notes_type;
    typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
    typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

    const notes_optional&
    notes () const;

    notes_optional&
    notes ();

    void
    notes (const notes_type& x);

    void
    notes (const notes_optional& x);

    void
    notes (::std::unique_ptr< notes_type > p);

    // type
    //
    typedef ::xml_schema::simple_type type_type;
    typedef ::xsd::cxx::tree::optional< type_type > type_optional;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_optional&
    type () const;

    type_optional&
    type ();

    void
    type (const type_type& x);

    void
    type (const type_optional& x);

    void
    type (::std::unique_ptr< type_type > p);

    // Constructors.
    //
    trippartType (const name_type&);

    trippartType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    trippartType (const trippartType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual trippartType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    trippartType&
    operator= (const trippartType& x);

    virtual 
    ~trippartType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    dateoftrip_optional dateoftrip_;
    geography_optional geography_;
    accomodation_optional accomodation_;
    operator_optional operator__;
    vessel_optional vessel_;
    link_optional link_;
    relateddives_optional relateddives_;
    pricedivepackage_optional pricedivepackage_;
    priceperdive_optional priceperdive_;
    rating_sequence rating_;
    notes_optional notes_;
    type_optional type_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const trippartType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // TRIPPART_TYPE_HXX
