// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef TABLESCOPE_TYPE_HXX
#define TABLESCOPE_TYPE_HXX

#include "tablescopeType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace streit
{
  class tablescopeType: public ::xml_schema::type
  {
    public:
    // altitude
    //
    typedef ::xml_schema::float_ altitude_type;
    typedef ::xsd::cxx::tree::optional< altitude_type > altitude_optional;
    typedef ::xsd::cxx::tree::traits< altitude_type, char > altitude_traits;

    const altitude_optional&
    altitude () const;

    altitude_optional&
    altitude ();

    void
    altitude (const altitude_type& x);

    void
    altitude (const altitude_optional& x);

    // divedepthbegin
    //
    typedef ::xml_schema::float_ divedepthbegin_type;
    typedef ::xsd::cxx::tree::optional< divedepthbegin_type > divedepthbegin_optional;
    typedef ::xsd::cxx::tree::traits< divedepthbegin_type, char > divedepthbegin_traits;

    const divedepthbegin_optional&
    divedepthbegin () const;

    divedepthbegin_optional&
    divedepthbegin ();

    void
    divedepthbegin (const divedepthbegin_type& x);

    void
    divedepthbegin (const divedepthbegin_optional& x);

    // divedepthend
    //
    typedef ::xml_schema::float_ divedepthend_type;
    typedef ::xsd::cxx::tree::optional< divedepthend_type > divedepthend_optional;
    typedef ::xsd::cxx::tree::traits< divedepthend_type, char > divedepthend_traits;

    const divedepthend_optional&
    divedepthend () const;

    divedepthend_optional&
    divedepthend ();

    void
    divedepthend (const divedepthend_type& x);

    void
    divedepthend (const divedepthend_optional& x);

    // divedepthstep
    //
    typedef ::xml_schema::float_ divedepthstep_type;
    typedef ::xsd::cxx::tree::optional< divedepthstep_type > divedepthstep_optional;
    typedef ::xsd::cxx::tree::traits< divedepthstep_type, char > divedepthstep_traits;

    const divedepthstep_optional&
    divedepthstep () const;

    divedepthstep_optional&
    divedepthstep ();

    void
    divedepthstep (const divedepthstep_type& x);

    void
    divedepthstep (const divedepthstep_optional& x);

    // bottomtimemaximum
    //
    typedef ::xml_schema::float_ bottomtimemaximum_type;
    typedef ::xsd::cxx::tree::optional< bottomtimemaximum_type > bottomtimemaximum_optional;
    typedef ::xsd::cxx::tree::traits< bottomtimemaximum_type, char > bottomtimemaximum_traits;

    const bottomtimemaximum_optional&
    bottomtimemaximum () const;

    bottomtimemaximum_optional&
    bottomtimemaximum ();

    void
    bottomtimemaximum (const bottomtimemaximum_type& x);

    void
    bottomtimemaximum (const bottomtimemaximum_optional& x);

    // bottomtimeminimum
    //
    typedef ::xml_schema::float_ bottomtimeminimum_type;
    typedef ::xsd::cxx::tree::optional< bottomtimeminimum_type > bottomtimeminimum_optional;
    typedef ::xsd::cxx::tree::traits< bottomtimeminimum_type, char > bottomtimeminimum_traits;

    const bottomtimeminimum_optional&
    bottomtimeminimum () const;

    bottomtimeminimum_optional&
    bottomtimeminimum ();

    void
    bottomtimeminimum (const bottomtimeminimum_type& x);

    void
    bottomtimeminimum (const bottomtimeminimum_optional& x);

    // bottomtimestepbegin
    //
    typedef ::xml_schema::float_ bottomtimestepbegin_type;
    typedef ::xsd::cxx::tree::optional< bottomtimestepbegin_type > bottomtimestepbegin_optional;
    typedef ::xsd::cxx::tree::traits< bottomtimestepbegin_type, char > bottomtimestepbegin_traits;

    const bottomtimestepbegin_optional&
    bottomtimestepbegin () const;

    bottomtimestepbegin_optional&
    bottomtimestepbegin ();

    void
    bottomtimestepbegin (const bottomtimestepbegin_type& x);

    void
    bottomtimestepbegin (const bottomtimestepbegin_optional& x);

    // bottomtimestepend
    //
    typedef ::xml_schema::float_ bottomtimestepend_type;
    typedef ::xsd::cxx::tree::optional< bottomtimestepend_type > bottomtimestepend_optional;
    typedef ::xsd::cxx::tree::traits< bottomtimestepend_type, char > bottomtimestepend_traits;

    const bottomtimestepend_optional&
    bottomtimestepend () const;

    bottomtimestepend_optional&
    bottomtimestepend ();

    void
    bottomtimestepend (const bottomtimestepend_type& x);

    void
    bottomtimestepend (const bottomtimestepend_optional& x);

    // Constructors.
    //
    tablescopeType ();

    tablescopeType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    tablescopeType (const tablescopeType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual tablescopeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tablescopeType&
    operator= (const tablescopeType& x);

    virtual 
    ~tablescopeType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    altitude_optional altitude_;
    divedepthbegin_optional divedepthbegin_;
    divedepthend_optional divedepthend_;
    divedepthstep_optional divedepthstep_;
    bottomtimemaximum_optional bottomtimemaximum_;
    bottomtimeminimum_optional bottomtimeminimum_;
    bottomtimestepbegin_optional bottomtimestepbegin_;
    bottomtimestepend_optional bottomtimestepend_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const tablescopeType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // TABLESCOPE_TYPE_HXX
