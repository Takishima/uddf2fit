// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef UDDF_HXX
#define UDDF_HXX

#include "uddf-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "generator-fwd.hxx"

#include "mediadata-fwd.hxx"

#include "maker-fwd.hxx"

#include "business-fwd.hxx"

#include "diver-fwd.hxx"

#include "divesite-fwd.hxx"

#include "divetrip-fwd.hxx"

#include "gasdefinitions-fwd.hxx"

#include "decomodel-fwd.hxx"

#include "profiledata-fwd.hxx"

#include "tablegeneration-fwd.hxx"

#include "divecomputercontrol-fwd.hxx"

namespace streit
{
  class uddf: public ::xml_schema::type
  {
    public:
    // generator
    //
    typedef ::streit::generator generator_type;
    typedef ::xsd::cxx::tree::traits< generator_type, char > generator_traits;

    const generator_type&
    generator () const;

    generator_type&
    generator ();

    void
    generator (const generator_type& x);

    void
    generator (::std::unique_ptr< generator_type > p);

    // mediadata
    //
    typedef ::streit::mediadata mediadata_type;
    typedef ::xsd::cxx::tree::optional< mediadata_type > mediadata_optional;
    typedef ::xsd::cxx::tree::traits< mediadata_type, char > mediadata_traits;

    const mediadata_optional&
    mediadata () const;

    mediadata_optional&
    mediadata ();

    void
    mediadata (const mediadata_type& x);

    void
    mediadata (const mediadata_optional& x);

    void
    mediadata (::std::unique_ptr< mediadata_type > p);

    // maker
    //
    typedef ::streit::maker maker_type;
    typedef ::xsd::cxx::tree::optional< maker_type > maker_optional;
    typedef ::xsd::cxx::tree::traits< maker_type, char > maker_traits;

    const maker_optional&
    maker () const;

    maker_optional&
    maker ();

    void
    maker (const maker_type& x);

    void
    maker (const maker_optional& x);

    void
    maker (::std::unique_ptr< maker_type > p);

    // business
    //
    typedef ::streit::business business_type;
    typedef ::xsd::cxx::tree::optional< business_type > business_optional;
    typedef ::xsd::cxx::tree::traits< business_type, char > business_traits;

    const business_optional&
    business () const;

    business_optional&
    business ();

    void
    business (const business_type& x);

    void
    business (const business_optional& x);

    void
    business (::std::unique_ptr< business_type > p);

    // diver
    //
    typedef ::streit::diver diver_type;
    typedef ::xsd::cxx::tree::optional< diver_type > diver_optional;
    typedef ::xsd::cxx::tree::traits< diver_type, char > diver_traits;

    const diver_optional&
    diver () const;

    diver_optional&
    diver ();

    void
    diver (const diver_type& x);

    void
    diver (const diver_optional& x);

    void
    diver (::std::unique_ptr< diver_type > p);

    // divesite
    //
    typedef ::streit::divesite divesite_type;
    typedef ::xsd::cxx::tree::optional< divesite_type > divesite_optional;
    typedef ::xsd::cxx::tree::traits< divesite_type, char > divesite_traits;

    const divesite_optional&
    divesite () const;

    divesite_optional&
    divesite ();

    void
    divesite (const divesite_type& x);

    void
    divesite (const divesite_optional& x);

    void
    divesite (::std::unique_ptr< divesite_type > p);

    // divetrip
    //
    typedef ::streit::divetrip divetrip_type;
    typedef ::xsd::cxx::tree::optional< divetrip_type > divetrip_optional;
    typedef ::xsd::cxx::tree::traits< divetrip_type, char > divetrip_traits;

    const divetrip_optional&
    divetrip () const;

    divetrip_optional&
    divetrip ();

    void
    divetrip (const divetrip_type& x);

    void
    divetrip (const divetrip_optional& x);

    void
    divetrip (::std::unique_ptr< divetrip_type > p);

    // gasdefinitions
    //
    typedef ::streit::gasdefinitions gasdefinitions_type;
    typedef ::xsd::cxx::tree::optional< gasdefinitions_type > gasdefinitions_optional;
    typedef ::xsd::cxx::tree::traits< gasdefinitions_type, char > gasdefinitions_traits;

    const gasdefinitions_optional&
    gasdefinitions () const;

    gasdefinitions_optional&
    gasdefinitions ();

    void
    gasdefinitions (const gasdefinitions_type& x);

    void
    gasdefinitions (const gasdefinitions_optional& x);

    void
    gasdefinitions (::std::unique_ptr< gasdefinitions_type > p);

    // decomodel
    //
    typedef ::streit::decomodel decomodel_type;
    typedef ::xsd::cxx::tree::optional< decomodel_type > decomodel_optional;
    typedef ::xsd::cxx::tree::traits< decomodel_type, char > decomodel_traits;

    const decomodel_optional&
    decomodel () const;

    decomodel_optional&
    decomodel ();

    void
    decomodel (const decomodel_type& x);

    void
    decomodel (const decomodel_optional& x);

    void
    decomodel (::std::unique_ptr< decomodel_type > p);

    // profiledata
    //
    typedef ::streit::profiledata profiledata_type;
    typedef ::xsd::cxx::tree::optional< profiledata_type > profiledata_optional;
    typedef ::xsd::cxx::tree::traits< profiledata_type, char > profiledata_traits;

    const profiledata_optional&
    profiledata () const;

    profiledata_optional&
    profiledata ();

    void
    profiledata (const profiledata_type& x);

    void
    profiledata (const profiledata_optional& x);

    void
    profiledata (::std::unique_ptr< profiledata_type > p);

    // tablegeneration
    //
    typedef ::streit::tablegeneration tablegeneration_type;
    typedef ::xsd::cxx::tree::optional< tablegeneration_type > tablegeneration_optional;
    typedef ::xsd::cxx::tree::traits< tablegeneration_type, char > tablegeneration_traits;

    const tablegeneration_optional&
    tablegeneration () const;

    tablegeneration_optional&
    tablegeneration ();

    void
    tablegeneration (const tablegeneration_type& x);

    void
    tablegeneration (const tablegeneration_optional& x);

    void
    tablegeneration (::std::unique_ptr< tablegeneration_type > p);

    // divecomputercontrol
    //
    typedef ::streit::divecomputercontrol divecomputercontrol_type;
    typedef ::xsd::cxx::tree::optional< divecomputercontrol_type > divecomputercontrol_optional;
    typedef ::xsd::cxx::tree::traits< divecomputercontrol_type, char > divecomputercontrol_traits;

    const divecomputercontrol_optional&
    divecomputercontrol () const;

    divecomputercontrol_optional&
    divecomputercontrol ();

    void
    divecomputercontrol (const divecomputercontrol_type& x);

    void
    divecomputercontrol (const divecomputercontrol_optional& x);

    void
    divecomputercontrol (::std::unique_ptr< divecomputercontrol_type > p);

    // version
    //
    typedef ::xml_schema::simple_type version_type;
    typedef ::xsd::cxx::tree::optional< version_type > version_optional;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_optional&
    version () const;

    version_optional&
    version ();

    void
    version (const version_type& x);

    void
    version (const version_optional& x);

    void
    version (::std::unique_ptr< version_type > p);

    // Constructors.
    //
    uddf (const generator_type&);

    uddf (::std::unique_ptr< generator_type >);

    uddf (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    uddf (const uddf& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual uddf*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    uddf&
    operator= (const uddf& x);

    virtual 
    ~uddf ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< generator_type > generator_;
    mediadata_optional mediadata_;
    maker_optional maker_;
    business_optional business_;
    diver_optional diver_;
    divesite_optional divesite_;
    divetrip_optional divetrip_;
    gasdefinitions_optional gasdefinitions_;
    decomodel_optional decomodel_;
    profiledata_optional profiledata_;
    tablegeneration_optional tablegeneration_;
    divecomputercontrol_optional divecomputercontrol_;
    version_optional version_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const uddf&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // UDDF_HXX
