// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef OUTPUT_TYPE_HXX
#define OUTPUT_TYPE_HXX

#include "outputType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace streit
{
  class outputType: public ::xml_schema::type
  {
    public:
    // lingo
    //
    typedef ::xml_schema::string lingo_type;
    typedef ::xsd::cxx::tree::optional< lingo_type > lingo_optional;
    typedef ::xsd::cxx::tree::traits< lingo_type, char > lingo_traits;

    const lingo_optional&
    lingo () const;

    lingo_optional&
    lingo ();

    void
    lingo (const lingo_type& x);

    void
    lingo (const lingo_optional& x);

    void
    lingo (::std::unique_ptr< lingo_type > p);

    // fileformat
    //
    typedef ::xml_schema::string fileformat_type;
    typedef ::xsd::cxx::tree::optional< fileformat_type > fileformat_optional;
    typedef ::xsd::cxx::tree::traits< fileformat_type, char > fileformat_traits;

    const fileformat_optional&
    fileformat () const;

    fileformat_optional&
    fileformat ();

    void
    fileformat (const fileformat_type& x);

    void
    fileformat (const fileformat_optional& x);

    void
    fileformat (::std::unique_ptr< fileformat_type > p);

    // filename
    //
    typedef ::xml_schema::string filename_type;
    typedef ::xsd::cxx::tree::optional< filename_type > filename_optional;
    typedef ::xsd::cxx::tree::traits< filename_type, char > filename_traits;

    const filename_optional&
    filename () const;

    filename_optional&
    filename ();

    void
    filename (const filename_type& x);

    void
    filename (const filename_optional& x);

    void
    filename (::std::unique_ptr< filename_type > p);

    // headline
    //
    typedef ::xml_schema::string headline_type;
    typedef ::xsd::cxx::tree::optional< headline_type > headline_optional;
    typedef ::xsd::cxx::tree::traits< headline_type, char > headline_traits;

    const headline_optional&
    headline () const;

    headline_optional&
    headline ();

    void
    headline (const headline_type& x);

    void
    headline (const headline_optional& x);

    void
    headline (::std::unique_ptr< headline_type > p);

    // remark
    //
    typedef ::xml_schema::string remark_type;
    typedef ::xsd::cxx::tree::optional< remark_type > remark_optional;
    typedef ::xsd::cxx::tree::traits< remark_type, char > remark_traits;

    const remark_optional&
    remark () const;

    remark_optional&
    remark ();

    void
    remark (const remark_type& x);

    void
    remark (const remark_optional& x);

    void
    remark (::std::unique_ptr< remark_type > p);

    // Constructors.
    //
    outputType ();

    outputType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    outputType (const outputType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual outputType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    outputType&
    operator= (const outputType& x);

    virtual 
    ~outputType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    lingo_optional lingo_;
    fileformat_optional fileformat_;
    filename_optional filename_;
    headline_optional headline_;
    remark_optional remark_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const outputType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // OUTPUT_TYPE_HXX
