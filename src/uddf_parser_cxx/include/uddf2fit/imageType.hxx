// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef IMAGE_TYPE_HXX
#define IMAGE_TYPE_HXX

#include "imageType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "mediaType.hxx"

#include "imagedata-fwd.hxx"

namespace streit
{
  class imageType: public ::streit::mediaType
  {
    public:
    // imagedata
    //
    typedef ::streit::imagedata imagedata_type;
    typedef ::xsd::cxx::tree::optional< imagedata_type > imagedata_optional;
    typedef ::xsd::cxx::tree::traits< imagedata_type, char > imagedata_traits;

    const imagedata_optional&
    imagedata () const;

    imagedata_optional&
    imagedata ();

    void
    imagedata (const imagedata_type& x);

    void
    imagedata (const imagedata_optional& x);

    void
    imagedata (::std::unique_ptr< imagedata_type > p);

    // height
    //
    typedef ::xml_schema::unsigned_int height_type;
    typedef ::xsd::cxx::tree::optional< height_type > height_optional;
    typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

    const height_optional&
    height () const;

    height_optional&
    height ();

    void
    height (const height_type& x);

    void
    height (const height_optional& x);

    // width
    //
    typedef ::xml_schema::unsigned_int width_type;
    typedef ::xsd::cxx::tree::optional< width_type > width_optional;
    typedef ::xsd::cxx::tree::traits< width_type, char > width_traits;

    const width_optional&
    width () const;

    width_optional&
    width ();

    void
    width (const width_type& x);

    void
    width (const width_optional& x);

    // format
    //
    typedef ::xml_schema::string format_type;
    typedef ::xsd::cxx::tree::optional< format_type > format_optional;
    typedef ::xsd::cxx::tree::traits< format_type, char > format_traits;

    const format_optional&
    format () const;

    format_optional&
    format ();

    void
    format (const format_type& x);

    void
    format (const format_optional& x);

    void
    format (::std::unique_ptr< format_type > p);

    // Constructors.
    //
    imageType (const id_type&,
               const objectname_type&);

    imageType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    imageType (const imageType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual imageType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    imageType&
    operator= (const imageType& x);

    virtual 
    ~imageType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    imagedata_optional imagedata_;
    height_optional height_;
    width_optional width_;
    format_optional format_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const imageType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // IMAGE_TYPE_HXX
