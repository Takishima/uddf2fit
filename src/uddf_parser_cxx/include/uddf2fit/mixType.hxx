// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef MIX_TYPE_HXX
#define MIX_TYPE_HXX

#include "mixType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "namedType.hxx"

#include "priceType-fwd.hxx"

namespace streit
{
  class mixType: public ::streit::namedType
  {
    public:
    // o2
    //
    typedef ::xml_schema::float_ o2_type;
    typedef ::xsd::cxx::tree::optional< o2_type > o2_optional;
    typedef ::xsd::cxx::tree::traits< o2_type, char > o2_traits;

    const o2_optional&
    o2 () const;

    o2_optional&
    o2 ();

    void
    o2 (const o2_type& x);

    void
    o2 (const o2_optional& x);

    // n2
    //
    typedef ::xml_schema::float_ n2_type;
    typedef ::xsd::cxx::tree::optional< n2_type > n2_optional;
    typedef ::xsd::cxx::tree::traits< n2_type, char > n2_traits;

    const n2_optional&
    n2 () const;

    n2_optional&
    n2 ();

    void
    n2 (const n2_type& x);

    void
    n2 (const n2_optional& x);

    // he
    //
    typedef ::xml_schema::float_ he_type;
    typedef ::xsd::cxx::tree::optional< he_type > he_optional;
    typedef ::xsd::cxx::tree::traits< he_type, char > he_traits;

    const he_optional&
    he () const;

    he_optional&
    he ();

    void
    he (const he_type& x);

    void
    he (const he_optional& x);

    // ar
    //
    typedef ::xml_schema::float_ ar_type;
    typedef ::xsd::cxx::tree::optional< ar_type > ar_optional;
    typedef ::xsd::cxx::tree::traits< ar_type, char > ar_traits;

    const ar_optional&
    ar () const;

    ar_optional&
    ar ();

    void
    ar (const ar_type& x);

    void
    ar (const ar_optional& x);

    // h2
    //
    typedef ::xml_schema::float_ h2_type;
    typedef ::xsd::cxx::tree::optional< h2_type > h2_optional;
    typedef ::xsd::cxx::tree::traits< h2_type, char > h2_traits;

    const h2_optional&
    h2 () const;

    h2_optional&
    h2 ();

    void
    h2 (const h2_type& x);

    void
    h2 (const h2_optional& x);

    // priceperlitre
    //
    typedef ::streit::priceType priceperlitre_type;
    typedef ::xsd::cxx::tree::optional< priceperlitre_type > priceperlitre_optional;
    typedef ::xsd::cxx::tree::traits< priceperlitre_type, char > priceperlitre_traits;

    const priceperlitre_optional&
    priceperlitre () const;

    priceperlitre_optional&
    priceperlitre ();

    void
    priceperlitre (const priceperlitre_type& x);

    void
    priceperlitre (const priceperlitre_optional& x);

    void
    priceperlitre (::std::unique_ptr< priceperlitre_type > p);

    // maximumpo2
    //
    typedef ::xml_schema::float_ maximumpo2_type;
    typedef ::xsd::cxx::tree::optional< maximumpo2_type > maximumpo2_optional;
    typedef ::xsd::cxx::tree::traits< maximumpo2_type, char > maximumpo2_traits;

    const maximumpo2_optional&
    maximumpo2 () const;

    maximumpo2_optional&
    maximumpo2 ();

    void
    maximumpo2 (const maximumpo2_type& x);

    void
    maximumpo2 (const maximumpo2_optional& x);

    // maximumoperationdepth
    //
    typedef ::xml_schema::float_ maximumoperationdepth_type;
    typedef ::xsd::cxx::tree::optional< maximumoperationdepth_type > maximumoperationdepth_optional;
    typedef ::xsd::cxx::tree::traits< maximumoperationdepth_type, char > maximumoperationdepth_traits;

    const maximumoperationdepth_optional&
    maximumoperationdepth () const;

    maximumoperationdepth_optional&
    maximumoperationdepth ();

    void
    maximumoperationdepth (const maximumoperationdepth_type& x);

    void
    maximumoperationdepth (const maximumoperationdepth_optional& x);

    // equivalentairdepth
    //
    typedef ::xml_schema::float_ equivalentairdepth_type;
    typedef ::xsd::cxx::tree::optional< equivalentairdepth_type > equivalentairdepth_optional;
    typedef ::xsd::cxx::tree::traits< equivalentairdepth_type, char > equivalentairdepth_traits;

    const equivalentairdepth_optional&
    equivalentairdepth () const;

    equivalentairdepth_optional&
    equivalentairdepth ();

    void
    equivalentairdepth (const equivalentairdepth_type& x);

    void
    equivalentairdepth (const equivalentairdepth_optional& x);

    // Constructors.
    //
    mixType (const id_type&,
             const name_type&);

    mixType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    mixType (const mixType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual mixType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    mixType&
    operator= (const mixType& x);

    virtual 
    ~mixType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    o2_optional o2_;
    n2_optional n2_;
    he_optional he_;
    ar_optional ar_;
    h2_optional h2_;
    priceperlitre_optional priceperlitre_;
    maximumpo2_optional maximumpo2_;
    maximumoperationdepth_optional maximumoperationdepth_;
    equivalentairdepth_optional equivalentairdepth_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const mixType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MIX_TYPE_HXX
