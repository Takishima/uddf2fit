// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef VERTEBRATA_TYPE_HXX
#define VERTEBRATA_TYPE_HXX

#include "vertebrataType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "singleLifeFormType-fwd.hxx"

namespace streit
{
  class vertebrataType: public ::xml_schema::type
  {
    public:
    // chondrichthyes
    //
    typedef ::streit::singleLifeFormType chondrichthyes_type;
    typedef ::xsd::cxx::tree::optional< chondrichthyes_type > chondrichthyes_optional;
    typedef ::xsd::cxx::tree::traits< chondrichthyes_type, char > chondrichthyes_traits;

    const chondrichthyes_optional&
    chondrichthyes () const;

    chondrichthyes_optional&
    chondrichthyes ();

    void
    chondrichthyes (const chondrichthyes_type& x);

    void
    chondrichthyes (const chondrichthyes_optional& x);

    void
    chondrichthyes (::std::unique_ptr< chondrichthyes_type > p);

    // osteichthyes
    //
    typedef ::streit::singleLifeFormType osteichthyes_type;
    typedef ::xsd::cxx::tree::optional< osteichthyes_type > osteichthyes_optional;
    typedef ::xsd::cxx::tree::traits< osteichthyes_type, char > osteichthyes_traits;

    const osteichthyes_optional&
    osteichthyes () const;

    osteichthyes_optional&
    osteichthyes ();

    void
    osteichthyes (const osteichthyes_type& x);

    void
    osteichthyes (const osteichthyes_optional& x);

    void
    osteichthyes (::std::unique_ptr< osteichthyes_type > p);

    // mammalia
    //
    typedef ::streit::singleLifeFormType mammalia_type;
    typedef ::xsd::cxx::tree::optional< mammalia_type > mammalia_optional;
    typedef ::xsd::cxx::tree::traits< mammalia_type, char > mammalia_traits;

    const mammalia_optional&
    mammalia () const;

    mammalia_optional&
    mammalia ();

    void
    mammalia (const mammalia_type& x);

    void
    mammalia (const mammalia_optional& x);

    void
    mammalia (::std::unique_ptr< mammalia_type > p);

    // amphibia
    //
    typedef ::streit::singleLifeFormType amphibia_type;
    typedef ::xsd::cxx::tree::optional< amphibia_type > amphibia_optional;
    typedef ::xsd::cxx::tree::traits< amphibia_type, char > amphibia_traits;

    const amphibia_optional&
    amphibia () const;

    amphibia_optional&
    amphibia ();

    void
    amphibia (const amphibia_type& x);

    void
    amphibia (const amphibia_optional& x);

    void
    amphibia (::std::unique_ptr< amphibia_type > p);

    // reptilia
    //
    typedef ::streit::singleLifeFormType reptilia_type;
    typedef ::xsd::cxx::tree::optional< reptilia_type > reptilia_optional;
    typedef ::xsd::cxx::tree::traits< reptilia_type, char > reptilia_traits;

    const reptilia_optional&
    reptilia () const;

    reptilia_optional&
    reptilia ();

    void
    reptilia (const reptilia_type& x);

    void
    reptilia (const reptilia_optional& x);

    void
    reptilia (::std::unique_ptr< reptilia_type > p);

    // vertebratavarious
    //
    typedef ::streit::singleLifeFormType vertebratavarious_type;
    typedef ::xsd::cxx::tree::optional< vertebratavarious_type > vertebratavarious_optional;
    typedef ::xsd::cxx::tree::traits< vertebratavarious_type, char > vertebratavarious_traits;

    const vertebratavarious_optional&
    vertebratavarious () const;

    vertebratavarious_optional&
    vertebratavarious ();

    void
    vertebratavarious (const vertebratavarious_type& x);

    void
    vertebratavarious (const vertebratavarious_optional& x);

    void
    vertebratavarious (::std::unique_ptr< vertebratavarious_type > p);

    // Constructors.
    //
    vertebrataType ();

    vertebrataType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    vertebrataType (const vertebrataType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual vertebrataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    vertebrataType&
    operator= (const vertebrataType& x);

    virtual 
    ~vertebrataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    chondrichthyes_optional chondrichthyes_;
    osteichthyes_optional osteichthyes_;
    mammalia_optional mammalia_;
    amphibia_optional amphibia_;
    reptilia_optional reptilia_;
    vertebratavarious_optional vertebratavarious_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const vertebrataType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // VERTEBRATA_TYPE_HXX
