// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef SPECIES_TYPE_HXX
#define SPECIES_TYPE_HXX

#include "speciesType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ID_TYPE.hxx"

#include "abundance-fwd.hxx"

#include "sexType-fwd.hxx"

#include "lifestage-fwd.hxx"

#include "lightintensityType-fwd.hxx"

#include "dominance-fwd.hxx"

#include "notesType-fwd.hxx"

namespace streit
{
  class speciesType: public ::streit::ID_TYPE
  {
    public:
    // trivialname
    //
    typedef ::xml_schema::string trivialname_type;
    typedef ::xsd::cxx::tree::optional< trivialname_type > trivialname_optional;
    typedef ::xsd::cxx::tree::traits< trivialname_type, char > trivialname_traits;

    const trivialname_optional&
    trivialname () const;

    trivialname_optional&
    trivialname ();

    void
    trivialname (const trivialname_type& x);

    void
    trivialname (const trivialname_optional& x);

    void
    trivialname (::std::unique_ptr< trivialname_type > p);

    // scientificname
    //
    typedef ::xml_schema::string scientificname_type;
    typedef ::xsd::cxx::tree::optional< scientificname_type > scientificname_optional;
    typedef ::xsd::cxx::tree::traits< scientificname_type, char > scientificname_traits;

    const scientificname_optional&
    scientificname () const;

    scientificname_optional&
    scientificname ();

    void
    scientificname (const scientificname_type& x);

    void
    scientificname (const scientificname_optional& x);

    void
    scientificname (::std::unique_ptr< scientificname_type > p);

    // abundance
    //
    typedef ::streit::abundance abundance_type;
    typedef ::xsd::cxx::tree::optional< abundance_type > abundance_optional;
    typedef ::xsd::cxx::tree::traits< abundance_type, char > abundance_traits;

    const abundance_optional&
    abundance () const;

    abundance_optional&
    abundance ();

    void
    abundance (const abundance_type& x);

    void
    abundance (const abundance_optional& x);

    void
    abundance (::std::unique_ptr< abundance_type > p);

    // sex
    //
    typedef ::streit::sexType sex_type;
    typedef ::xsd::cxx::tree::optional< sex_type > sex_optional;
    typedef ::xsd::cxx::tree::traits< sex_type, char > sex_traits;

    const sex_optional&
    sex () const;

    sex_optional&
    sex ();

    void
    sex (const sex_type& x);

    void
    sex (const sex_optional& x);

    void
    sex (::std::unique_ptr< sex_type > p);

    // lifestage
    //
    typedef ::streit::lifestage lifestage_type;
    typedef ::xsd::cxx::tree::optional< lifestage_type > lifestage_optional;
    typedef ::xsd::cxx::tree::traits< lifestage_type, char > lifestage_traits;

    const lifestage_optional&
    lifestage () const;

    lifestage_optional&
    lifestage ();

    void
    lifestage (const lifestage_type& x);

    void
    lifestage (const lifestage_optional& x);

    void
    lifestage (::std::unique_ptr< lifestage_type > p);

    // lightintensity
    //
    typedef ::streit::lightintensityType lightintensity_type;
    typedef ::xsd::cxx::tree::optional< lightintensity_type > lightintensity_optional;
    typedef ::xsd::cxx::tree::traits< lightintensity_type, char > lightintensity_traits;

    const lightintensity_optional&
    lightintensity () const;

    lightintensity_optional&
    lightintensity ();

    void
    lightintensity (const lightintensity_type& x);

    void
    lightintensity (const lightintensity_optional& x);

    void
    lightintensity (::std::unique_ptr< lightintensity_type > p);

    // age
    //
    typedef ::xml_schema::positive_integer age_type;
    typedef ::xsd::cxx::tree::optional< age_type > age_optional;
    typedef ::xsd::cxx::tree::traits< age_type, char > age_traits;

    const age_optional&
    age () const;

    age_optional&
    age ();

    void
    age (const age_type& x);

    void
    age (const age_optional& x);

    // dominance
    //
    typedef ::streit::dominance dominance_type;
    typedef ::xsd::cxx::tree::optional< dominance_type > dominance_optional;
    typedef ::xsd::cxx::tree::traits< dominance_type, char > dominance_traits;

    const dominance_optional&
    dominance () const;

    dominance_optional&
    dominance ();

    void
    dominance (const dominance_type& x);

    void
    dominance (const dominance_optional& x);

    void
    dominance (::std::unique_ptr< dominance_type > p);

    // size
    //
    typedef ::xml_schema::float_ size_type;
    typedef ::xsd::cxx::tree::optional< size_type > size_optional;
    typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

    const size_optional&
    size () const;

    size_optional&
    size ();

    void
    size (const size_type& x);

    void
    size (const size_optional& x);

    // notes
    //
    typedef ::streit::notesType notes_type;
    typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
    typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

    const notes_optional&
    notes () const;

    notes_optional&
    notes ();

    void
    notes (const notes_type& x);

    void
    notes (const notes_optional& x);

    void
    notes (::std::unique_ptr< notes_type > p);

    // Constructors.
    //
    speciesType (const id_type&);

    speciesType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    speciesType (const speciesType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual speciesType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    speciesType&
    operator= (const speciesType& x);

    virtual 
    ~speciesType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    trivialname_optional trivialname_;
    scientificname_optional scientificname_;
    abundance_optional abundance_;
    sex_optional sex_;
    lifestage_optional lifestage_;
    lightintensity_optional lightintensity_;
    age_optional age_;
    dominance_optional dominance_;
    size_optional size_;
    notes_optional notes_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const speciesType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SPECIES_TYPE_HXX
