// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef INVERTEBRATA_TYPE_HXX
#define INVERTEBRATA_TYPE_HXX

#include "invertebrataType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "singleLifeFormType-fwd.hxx"

namespace streit
{
  class invertebrataType: public ::xml_schema::type
  {
    public:
    // porifera
    //
    typedef ::streit::singleLifeFormType porifera_type;
    typedef ::xsd::cxx::tree::optional< porifera_type > porifera_optional;
    typedef ::xsd::cxx::tree::traits< porifera_type, char > porifera_traits;

    const porifera_optional&
    porifera () const;

    porifera_optional&
    porifera ();

    void
    porifera (const porifera_type& x);

    void
    porifera (const porifera_optional& x);

    void
    porifera (::std::unique_ptr< porifera_type > p);

    // coelenterata
    //
    typedef ::streit::singleLifeFormType coelenterata_type;
    typedef ::xsd::cxx::tree::optional< coelenterata_type > coelenterata_optional;
    typedef ::xsd::cxx::tree::traits< coelenterata_type, char > coelenterata_traits;

    const coelenterata_optional&
    coelenterata () const;

    coelenterata_optional&
    coelenterata ();

    void
    coelenterata (const coelenterata_type& x);

    void
    coelenterata (const coelenterata_optional& x);

    void
    coelenterata (::std::unique_ptr< coelenterata_type > p);

    // cnidaria
    //
    typedef ::streit::singleLifeFormType cnidaria_type;
    typedef ::xsd::cxx::tree::optional< cnidaria_type > cnidaria_optional;
    typedef ::xsd::cxx::tree::traits< cnidaria_type, char > cnidaria_traits;

    const cnidaria_optional&
    cnidaria () const;

    cnidaria_optional&
    cnidaria ();

    void
    cnidaria (const cnidaria_type& x);

    void
    cnidaria (const cnidaria_optional& x);

    void
    cnidaria (::std::unique_ptr< cnidaria_type > p);

    // ctenophora
    //
    typedef ::streit::singleLifeFormType ctenophora_type;
    typedef ::xsd::cxx::tree::optional< ctenophora_type > ctenophora_optional;
    typedef ::xsd::cxx::tree::traits< ctenophora_type, char > ctenophora_traits;

    const ctenophora_optional&
    ctenophora () const;

    ctenophora_optional&
    ctenophora ();

    void
    ctenophora (const ctenophora_type& x);

    void
    ctenophora (const ctenophora_optional& x);

    void
    ctenophora (::std::unique_ptr< ctenophora_type > p);

    // plathelminthes
    //
    typedef ::streit::singleLifeFormType plathelminthes_type;
    typedef ::xsd::cxx::tree::optional< plathelminthes_type > plathelminthes_optional;
    typedef ::xsd::cxx::tree::traits< plathelminthes_type, char > plathelminthes_traits;

    const plathelminthes_optional&
    plathelminthes () const;

    plathelminthes_optional&
    plathelminthes ();

    void
    plathelminthes (const plathelminthes_type& x);

    void
    plathelminthes (const plathelminthes_optional& x);

    void
    plathelminthes (::std::unique_ptr< plathelminthes_type > p);

    // bryozoa
    //
    typedef ::streit::singleLifeFormType bryozoa_type;
    typedef ::xsd::cxx::tree::optional< bryozoa_type > bryozoa_optional;
    typedef ::xsd::cxx::tree::traits< bryozoa_type, char > bryozoa_traits;

    const bryozoa_optional&
    bryozoa () const;

    bryozoa_optional&
    bryozoa ();

    void
    bryozoa (const bryozoa_type& x);

    void
    bryozoa (const bryozoa_optional& x);

    void
    bryozoa (::std::unique_ptr< bryozoa_type > p);

    // phoronidea
    //
    typedef ::streit::singleLifeFormType phoronidea_type;
    typedef ::xsd::cxx::tree::optional< phoronidea_type > phoronidea_optional;
    typedef ::xsd::cxx::tree::traits< phoronidea_type, char > phoronidea_traits;

    const phoronidea_optional&
    phoronidea () const;

    phoronidea_optional&
    phoronidea ();

    void
    phoronidea (const phoronidea_type& x);

    void
    phoronidea (const phoronidea_optional& x);

    void
    phoronidea (::std::unique_ptr< phoronidea_type > p);

    // ascidiacea
    //
    typedef ::streit::singleLifeFormType ascidiacea_type;
    typedef ::xsd::cxx::tree::optional< ascidiacea_type > ascidiacea_optional;
    typedef ::xsd::cxx::tree::traits< ascidiacea_type, char > ascidiacea_traits;

    const ascidiacea_optional&
    ascidiacea () const;

    ascidiacea_optional&
    ascidiacea ();

    void
    ascidiacea (const ascidiacea_type& x);

    void
    ascidiacea (const ascidiacea_optional& x);

    void
    ascidiacea (::std::unique_ptr< ascidiacea_type > p);

    // echinodermata
    //
    typedef ::streit::singleLifeFormType echinodermata_type;
    typedef ::xsd::cxx::tree::optional< echinodermata_type > echinodermata_optional;
    typedef ::xsd::cxx::tree::traits< echinodermata_type, char > echinodermata_traits;

    const echinodermata_optional&
    echinodermata () const;

    echinodermata_optional&
    echinodermata ();

    void
    echinodermata (const echinodermata_type& x);

    void
    echinodermata (const echinodermata_optional& x);

    void
    echinodermata (::std::unique_ptr< echinodermata_type > p);

    // mollusca
    //
    typedef ::streit::singleLifeFormType mollusca_type;
    typedef ::xsd::cxx::tree::optional< mollusca_type > mollusca_optional;
    typedef ::xsd::cxx::tree::traits< mollusca_type, char > mollusca_traits;

    const mollusca_optional&
    mollusca () const;

    mollusca_optional&
    mollusca ();

    void
    mollusca (const mollusca_type& x);

    void
    mollusca (const mollusca_optional& x);

    void
    mollusca (::std::unique_ptr< mollusca_type > p);

    // crustacea
    //
    typedef ::streit::singleLifeFormType crustacea_type;
    typedef ::xsd::cxx::tree::optional< crustacea_type > crustacea_optional;
    typedef ::xsd::cxx::tree::traits< crustacea_type, char > crustacea_traits;

    const crustacea_optional&
    crustacea () const;

    crustacea_optional&
    crustacea ();

    void
    crustacea (const crustacea_type& x);

    void
    crustacea (const crustacea_optional& x);

    void
    crustacea (::std::unique_ptr< crustacea_type > p);

    // invertebratavarious
    //
    typedef ::streit::singleLifeFormType invertebratavarious_type;
    typedef ::xsd::cxx::tree::optional< invertebratavarious_type > invertebratavarious_optional;
    typedef ::xsd::cxx::tree::traits< invertebratavarious_type, char > invertebratavarious_traits;

    const invertebratavarious_optional&
    invertebratavarious () const;

    invertebratavarious_optional&
    invertebratavarious ();

    void
    invertebratavarious (const invertebratavarious_type& x);

    void
    invertebratavarious (const invertebratavarious_optional& x);

    void
    invertebratavarious (::std::unique_ptr< invertebratavarious_type > p);

    // Constructors.
    //
    invertebrataType ();

    invertebrataType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    invertebrataType (const invertebrataType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual invertebrataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    invertebrataType&
    operator= (const invertebrataType& x);

    virtual 
    ~invertebrataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    porifera_optional porifera_;
    coelenterata_optional coelenterata_;
    cnidaria_optional cnidaria_;
    ctenophora_optional ctenophora_;
    plathelminthes_optional plathelminthes_;
    bryozoa_optional bryozoa_;
    phoronidea_optional phoronidea_;
    ascidiacea_optional ascidiacea_;
    echinodermata_optional echinodermata_;
    mollusca_optional mollusca_;
    crustacea_optional crustacea_;
    invertebratavarious_optional invertebratavarious_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const invertebrataType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // INVERTEBRATA_TYPE_HXX
