// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef DIMENSION_TYPE_HXX
#define DIMENSION_TYPE_HXX

#include "dimensionType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace streit
{
  class dimensionType: public ::xml_schema::type
  {
    public:
    // length
    //
    typedef ::xml_schema::float_ length_type;
    typedef ::xsd::cxx::tree::optional< length_type > length_optional;
    typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

    const length_optional&
    length () const;

    length_optional&
    length ();

    void
    length (const length_type& x);

    void
    length (const length_optional& x);

    // beam
    //
    typedef ::xml_schema::float_ beam_type;
    typedef ::xsd::cxx::tree::optional< beam_type > beam_optional;
    typedef ::xsd::cxx::tree::traits< beam_type, char > beam_traits;

    const beam_optional&
    beam () const;

    beam_optional&
    beam ();

    void
    beam (const beam_type& x);

    void
    beam (const beam_optional& x);

    // draught
    //
    typedef ::xml_schema::float_ draught_type;
    typedef ::xsd::cxx::tree::optional< draught_type > draught_optional;
    typedef ::xsd::cxx::tree::traits< draught_type, char > draught_traits;

    const draught_optional&
    draught () const;

    draught_optional&
    draught ();

    void
    draught (const draught_type& x);

    void
    draught (const draught_optional& x);

    // displacement
    //
    typedef ::xml_schema::float_ displacement_type;
    typedef ::xsd::cxx::tree::optional< displacement_type > displacement_optional;
    typedef ::xsd::cxx::tree::traits< displacement_type, char > displacement_traits;

    const displacement_optional&
    displacement () const;

    displacement_optional&
    displacement ();

    void
    displacement (const displacement_type& x);

    void
    displacement (const displacement_optional& x);

    // tonnage
    //
    typedef ::xml_schema::float_ tonnage_type;
    typedef ::xsd::cxx::tree::optional< tonnage_type > tonnage_optional;
    typedef ::xsd::cxx::tree::traits< tonnage_type, char > tonnage_traits;

    const tonnage_optional&
    tonnage () const;

    tonnage_optional&
    tonnage ();

    void
    tonnage (const tonnage_type& x);

    void
    tonnage (const tonnage_optional& x);

    // Constructors.
    //
    dimensionType ();

    dimensionType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    dimensionType (const dimensionType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual dimensionType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    dimensionType&
    operator= (const dimensionType& x);

    virtual 
    ~dimensionType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    length_optional length_;
    beam_optional beam_;
    draught_optional draught_;
    displacement_optional displacement_;
    tonnage_optional tonnage_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const dimensionType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DIMENSION_TYPE_HXX
