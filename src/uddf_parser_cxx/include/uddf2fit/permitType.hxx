// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef PERMIT_TYPE_HXX
#define PERMIT_TYPE_HXX

#include "permitType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "encapsulatedDateTimeType-fwd.hxx"

#include "notesType-fwd.hxx"

namespace streit
{
  class permitType: public ::xml_schema::type
  {
    public:
    // name
    //
    typedef ::xml_schema::type name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // aliasname
    //
    typedef ::xml_schema::string aliasname_type;
    typedef ::xsd::cxx::tree::sequence< aliasname_type > aliasname_sequence;
    typedef aliasname_sequence::iterator aliasname_iterator;
    typedef aliasname_sequence::const_iterator aliasname_const_iterator;
    typedef ::xsd::cxx::tree::traits< aliasname_type, char > aliasname_traits;

    const aliasname_sequence&
    aliasname () const;

    aliasname_sequence&
    aliasname ();

    void
    aliasname (const aliasname_sequence& s);

    // region
    //
    typedef ::xml_schema::string region_type;
    typedef ::xsd::cxx::tree::optional< region_type > region_optional;
    typedef ::xsd::cxx::tree::traits< region_type, char > region_traits;

    const region_optional&
    region () const;

    region_optional&
    region ();

    void
    region (const region_type& x);

    void
    region (const region_optional& x);

    void
    region (::std::unique_ptr< region_type > p);

    // issuedate
    //
    typedef ::streit::encapsulatedDateTimeType issuedate_type;
    typedef ::xsd::cxx::tree::optional< issuedate_type > issuedate_optional;
    typedef ::xsd::cxx::tree::traits< issuedate_type, char > issuedate_traits;

    const issuedate_optional&
    issuedate () const;

    issuedate_optional&
    issuedate ();

    void
    issuedate (const issuedate_type& x);

    void
    issuedate (const issuedate_optional& x);

    void
    issuedate (::std::unique_ptr< issuedate_type > p);

    // validdate
    //
    typedef ::streit::encapsulatedDateTimeType validdate_type;
    typedef ::xsd::cxx::tree::optional< validdate_type > validdate_optional;
    typedef ::xsd::cxx::tree::traits< validdate_type, char > validdate_traits;

    const validdate_optional&
    validdate () const;

    validdate_optional&
    validdate ();

    void
    validdate (const validdate_type& x);

    void
    validdate (const validdate_optional& x);

    void
    validdate (::std::unique_ptr< validdate_type > p);

    // notes
    //
    typedef ::streit::notesType notes_type;
    typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
    typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

    const notes_optional&
    notes () const;

    notes_optional&
    notes ();

    void
    notes (const notes_type& x);

    void
    notes (const notes_optional& x);

    void
    notes (::std::unique_ptr< notes_type > p);

    // Constructors.
    //
    permitType (const name_type&);

    permitType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    permitType (const permitType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual permitType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    permitType&
    operator= (const permitType& x);

    virtual 
    ~permitType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    aliasname_sequence aliasname_;
    region_optional region_;
    issuedate_optional issuedate_;
    validdate_optional validdate_;
    notes_optional notes_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const permitType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PERMIT_TYPE_HXX
