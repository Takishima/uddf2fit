// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef PERSONAL_TYPE_HXX
#define PERSONAL_TYPE_HXX

#include "personalType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "sexType-fwd.hxx"

#include "encapsulatedDateTimeType-fwd.hxx"

#include "membership-fwd.hxx"

#include "smoking-fwd.hxx"

#include "numberofdives-fwd.hxx"

namespace streit
{
  class personalType: public ::xml_schema::type
  {
    public:
    // firstname
    //
    typedef ::xml_schema::string firstname_type;
    typedef ::xsd::cxx::tree::traits< firstname_type, char > firstname_traits;

    const firstname_type&
    firstname () const;

    firstname_type&
    firstname ();

    void
    firstname (const firstname_type& x);

    void
    firstname (::std::unique_ptr< firstname_type > p);

    // middlename
    //
    typedef ::xml_schema::string middlename_type;
    typedef ::xsd::cxx::tree::optional< middlename_type > middlename_optional;
    typedef ::xsd::cxx::tree::traits< middlename_type, char > middlename_traits;

    const middlename_optional&
    middlename () const;

    middlename_optional&
    middlename ();

    void
    middlename (const middlename_type& x);

    void
    middlename (const middlename_optional& x);

    void
    middlename (::std::unique_ptr< middlename_type > p);

    // lastname
    //
    typedef ::xml_schema::string lastname_type;
    typedef ::xsd::cxx::tree::traits< lastname_type, char > lastname_traits;

    const lastname_type&
    lastname () const;

    lastname_type&
    lastname ();

    void
    lastname (const lastname_type& x);

    void
    lastname (::std::unique_ptr< lastname_type > p);

    // birthname
    //
    typedef ::xml_schema::string birthname_type;
    typedef ::xsd::cxx::tree::optional< birthname_type > birthname_optional;
    typedef ::xsd::cxx::tree::traits< birthname_type, char > birthname_traits;

    const birthname_optional&
    birthname () const;

    birthname_optional&
    birthname ();

    void
    birthname (const birthname_type& x);

    void
    birthname (const birthname_optional& x);

    void
    birthname (::std::unique_ptr< birthname_type > p);

    // honorific
    //
    typedef ::xml_schema::string honorific_type;
    typedef ::xsd::cxx::tree::optional< honorific_type > honorific_optional;
    typedef ::xsd::cxx::tree::traits< honorific_type, char > honorific_traits;

    const honorific_optional&
    honorific () const;

    honorific_optional&
    honorific ();

    void
    honorific (const honorific_type& x);

    void
    honorific (const honorific_optional& x);

    void
    honorific (::std::unique_ptr< honorific_type > p);

    // sex
    //
    typedef ::streit::sexType sex_type;
    typedef ::xsd::cxx::tree::optional< sex_type > sex_optional;
    typedef ::xsd::cxx::tree::traits< sex_type, char > sex_traits;

    const sex_optional&
    sex () const;

    sex_optional&
    sex ();

    void
    sex (const sex_type& x);

    void
    sex (const sex_optional& x);

    void
    sex (::std::unique_ptr< sex_type > p);

    // birthdate
    //
    typedef ::streit::encapsulatedDateTimeType birthdate_type;
    typedef ::xsd::cxx::tree::optional< birthdate_type > birthdate_optional;
    typedef ::xsd::cxx::tree::traits< birthdate_type, char > birthdate_traits;

    const birthdate_optional&
    birthdate () const;

    birthdate_optional&
    birthdate ();

    void
    birthdate (const birthdate_type& x);

    void
    birthdate (const birthdate_optional& x);

    void
    birthdate (::std::unique_ptr< birthdate_type > p);

    // passport
    //
    typedef ::xml_schema::string passport_type;
    typedef ::xsd::cxx::tree::optional< passport_type > passport_optional;
    typedef ::xsd::cxx::tree::traits< passport_type, char > passport_traits;

    const passport_optional&
    passport () const;

    passport_optional&
    passport ();

    void
    passport (const passport_type& x);

    void
    passport (const passport_optional& x);

    void
    passport (::std::unique_ptr< passport_type > p);

    // membership
    //
    typedef ::streit::membership membership_type;
    typedef ::xsd::cxx::tree::optional< membership_type > membership_optional;
    typedef ::xsd::cxx::tree::traits< membership_type, char > membership_traits;

    const membership_optional&
    membership () const;

    membership_optional&
    membership ();

    void
    membership (const membership_type& x);

    void
    membership (const membership_optional& x);

    void
    membership (::std::unique_ptr< membership_type > p);

    // height
    //
    typedef ::xml_schema::float_ height_type;
    typedef ::xsd::cxx::tree::optional< height_type > height_optional;
    typedef ::xsd::cxx::tree::traits< height_type, char > height_traits;

    const height_optional&
    height () const;

    height_optional&
    height ();

    void
    height (const height_type& x);

    void
    height (const height_optional& x);

    // weight
    //
    typedef ::xml_schema::float_ weight_type;
    typedef ::xsd::cxx::tree::optional< weight_type > weight_optional;
    typedef ::xsd::cxx::tree::traits< weight_type, char > weight_traits;

    const weight_optional&
    weight () const;

    weight_optional&
    weight ();

    void
    weight (const weight_type& x);

    void
    weight (const weight_optional& x);

    // bloodgroup
    //
    typedef ::xml_schema::string bloodgroup_type;
    typedef ::xsd::cxx::tree::optional< bloodgroup_type > bloodgroup_optional;
    typedef ::xsd::cxx::tree::traits< bloodgroup_type, char > bloodgroup_traits;

    const bloodgroup_optional&
    bloodgroup () const;

    bloodgroup_optional&
    bloodgroup ();

    void
    bloodgroup (const bloodgroup_type& x);

    void
    bloodgroup (const bloodgroup_optional& x);

    void
    bloodgroup (::std::unique_ptr< bloodgroup_type > p);

    // smoking
    //
    typedef ::streit::smoking smoking_type;
    typedef ::xsd::cxx::tree::optional< smoking_type > smoking_optional;
    typedef ::xsd::cxx::tree::traits< smoking_type, char > smoking_traits;

    const smoking_optional&
    smoking () const;

    smoking_optional&
    smoking ();

    void
    smoking (const smoking_type& x);

    void
    smoking (const smoking_optional& x);

    void
    smoking (::std::unique_ptr< smoking_type > p);

    // numberofdives
    //
    typedef ::streit::numberofdives numberofdives_type;
    typedef ::xsd::cxx::tree::optional< numberofdives_type > numberofdives_optional;
    typedef ::xsd::cxx::tree::traits< numberofdives_type, char > numberofdives_traits;

    const numberofdives_optional&
    numberofdives () const;

    numberofdives_optional&
    numberofdives ();

    void
    numberofdives (const numberofdives_type& x);

    void
    numberofdives (const numberofdives_optional& x);

    void
    numberofdives (::std::unique_ptr< numberofdives_type > p);

    // Constructors.
    //
    personalType (const firstname_type&,
                  const lastname_type&);

    personalType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    personalType (const personalType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual personalType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    personalType&
    operator= (const personalType& x);

    virtual 
    ~personalType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< firstname_type > firstname_;
    middlename_optional middlename_;
    ::xsd::cxx::tree::one< lastname_type > lastname_;
    birthname_optional birthname_;
    honorific_optional honorific_;
    sex_optional sex_;
    birthdate_optional birthdate_;
    passport_optional passport_;
    membership_optional membership_;
    height_optional height_;
    weight_optional weight_;
    bloodgroup_optional bloodgroup_;
    smoking_optional smoking_;
    numberofdives_optional numberofdives_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const personalType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PERSONAL_TYPE_HXX
