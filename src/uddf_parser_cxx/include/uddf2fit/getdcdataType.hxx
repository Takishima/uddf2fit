// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef GETDCDATA_TYPE_HXX
#define GETDCDATA_TYPE_HXX

#include "getdcdataType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "markerType-fwd.hxx"

namespace streit
{
  class getdcdataType: public ::xml_schema::type
  {
    public:
    // getdcalldata
    //
    typedef ::streit::markerType getdcalldata_type;
    typedef ::xsd::cxx::tree::optional< getdcalldata_type > getdcalldata_optional;
    typedef ::xsd::cxx::tree::traits< getdcalldata_type, char > getdcalldata_traits;

    const getdcalldata_optional&
    getdcalldata () const;

    getdcalldata_optional&
    getdcalldata ();

    void
    getdcalldata (const getdcalldata_type& x);

    void
    getdcalldata (const getdcalldata_optional& x);

    void
    getdcalldata (::std::unique_ptr< getdcalldata_type > p);

    // getdcgeneratordata
    //
    typedef ::streit::markerType getdcgeneratordata_type;
    typedef ::xsd::cxx::tree::optional< getdcgeneratordata_type > getdcgeneratordata_optional;
    typedef ::xsd::cxx::tree::traits< getdcgeneratordata_type, char > getdcgeneratordata_traits;

    const getdcgeneratordata_optional&
    getdcgeneratordata () const;

    getdcgeneratordata_optional&
    getdcgeneratordata ();

    void
    getdcgeneratordata (const getdcgeneratordata_type& x);

    void
    getdcgeneratordata (const getdcgeneratordata_optional& x);

    void
    getdcgeneratordata (::std::unique_ptr< getdcgeneratordata_type > p);

    // getdcownerdata
    //
    typedef ::streit::markerType getdcownerdata_type;
    typedef ::xsd::cxx::tree::optional< getdcownerdata_type > getdcownerdata_optional;
    typedef ::xsd::cxx::tree::traits< getdcownerdata_type, char > getdcownerdata_traits;

    const getdcownerdata_optional&
    getdcownerdata () const;

    getdcownerdata_optional&
    getdcownerdata ();

    void
    getdcownerdata (const getdcownerdata_type& x);

    void
    getdcownerdata (const getdcownerdata_optional& x);

    void
    getdcownerdata (::std::unique_ptr< getdcownerdata_type > p);

    // getdcbuddydata
    //
    typedef ::streit::markerType getdcbuddydata_type;
    typedef ::xsd::cxx::tree::optional< getdcbuddydata_type > getdcbuddydata_optional;
    typedef ::xsd::cxx::tree::traits< getdcbuddydata_type, char > getdcbuddydata_traits;

    const getdcbuddydata_optional&
    getdcbuddydata () const;

    getdcbuddydata_optional&
    getdcbuddydata ();

    void
    getdcbuddydata (const getdcbuddydata_type& x);

    void
    getdcbuddydata (const getdcbuddydata_optional& x);

    void
    getdcbuddydata (::std::unique_ptr< getdcbuddydata_type > p);

    // getdcgasdefinitionsdata
    //
    typedef ::streit::markerType getdcgasdefinitionsdata_type;
    typedef ::xsd::cxx::tree::optional< getdcgasdefinitionsdata_type > getdcgasdefinitionsdata_optional;
    typedef ::xsd::cxx::tree::traits< getdcgasdefinitionsdata_type, char > getdcgasdefinitionsdata_traits;

    const getdcgasdefinitionsdata_optional&
    getdcgasdefinitionsdata () const;

    getdcgasdefinitionsdata_optional&
    getdcgasdefinitionsdata ();

    void
    getdcgasdefinitionsdata (const getdcgasdefinitionsdata_type& x);

    void
    getdcgasdefinitionsdata (const getdcgasdefinitionsdata_optional& x);

    void
    getdcgasdefinitionsdata (::std::unique_ptr< getdcgasdefinitionsdata_type > p);

    // getdcdivesitedata
    //
    typedef ::streit::markerType getdcdivesitedata_type;
    typedef ::xsd::cxx::tree::optional< getdcdivesitedata_type > getdcdivesitedata_optional;
    typedef ::xsd::cxx::tree::traits< getdcdivesitedata_type, char > getdcdivesitedata_traits;

    const getdcdivesitedata_optional&
    getdcdivesitedata () const;

    getdcdivesitedata_optional&
    getdcdivesitedata ();

    void
    getdcdivesitedata (const getdcdivesitedata_type& x);

    void
    getdcdivesitedata (const getdcdivesitedata_optional& x);

    void
    getdcdivesitedata (::std::unique_ptr< getdcdivesitedata_type > p);

    // getdcdivetripdata
    //
    typedef ::streit::markerType getdcdivetripdata_type;
    typedef ::xsd::cxx::tree::optional< getdcdivetripdata_type > getdcdivetripdata_optional;
    typedef ::xsd::cxx::tree::traits< getdcdivetripdata_type, char > getdcdivetripdata_traits;

    const getdcdivetripdata_optional&
    getdcdivetripdata () const;

    getdcdivetripdata_optional&
    getdcdivetripdata ();

    void
    getdcdivetripdata (const getdcdivetripdata_type& x);

    void
    getdcdivetripdata (const getdcdivetripdata_optional& x);

    void
    getdcdivetripdata (::std::unique_ptr< getdcdivetripdata_type > p);

    // getdcprofiledata
    //
    typedef ::streit::markerType getdcprofiledata_type;
    typedef ::xsd::cxx::tree::optional< getdcprofiledata_type > getdcprofiledata_optional;
    typedef ::xsd::cxx::tree::traits< getdcprofiledata_type, char > getdcprofiledata_traits;

    const getdcprofiledata_optional&
    getdcprofiledata () const;

    getdcprofiledata_optional&
    getdcprofiledata ();

    void
    getdcprofiledata (const getdcprofiledata_type& x);

    void
    getdcprofiledata (const getdcprofiledata_optional& x);

    void
    getdcprofiledata (::std::unique_ptr< getdcprofiledata_type > p);

    // Constructors.
    //
    getdcdataType ();

    getdcdataType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    getdcdataType (const getdcdataType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual getdcdataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    getdcdataType&
    operator= (const getdcdataType& x);

    virtual 
    ~getdcdataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    getdcalldata_optional getdcalldata_;
    getdcgeneratordata_optional getdcgeneratordata_;
    getdcownerdata_optional getdcownerdata_;
    getdcbuddydata_optional getdcbuddydata_;
    getdcgasdefinitionsdata_optional getdcgasdefinitionsdata_;
    getdcdivesitedata_optional getdcdivesitedata_;
    getdcdivetripdata_optional getdcdivetripdata_;
    getdcprofiledata_optional getdcprofiledata_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const getdcdataType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GETDCDATA_TYPE_HXX
