// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef EQUIPMENT_PIECE_TYPE_HXX
#define EQUIPMENT_PIECE_TYPE_HXX

#include "equipmentPieceType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "namedType.hxx"

#include "linkType-fwd.hxx"

#include "manufacturerType-fwd.hxx"

#include "purchaseType-fwd.hxx"

#include "encapsulatedDateTimeType-fwd.hxx"

#include "notesType-fwd.hxx"

namespace streit
{
  class equipmentPieceType: public ::streit::namedType
  {
    public:
    // link
    //
    typedef ::streit::linkType link_type;
    typedef ::xsd::cxx::tree::optional< link_type > link_optional;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_optional&
    link () const;

    link_optional&
    link ();

    void
    link (const link_type& x);

    void
    link (const link_optional& x);

    void
    link (::std::unique_ptr< link_type > p);

    // manufacturer
    //
    typedef ::streit::manufacturerType manufacturer_type;
    typedef ::xsd::cxx::tree::optional< manufacturer_type > manufacturer_optional;
    typedef ::xsd::cxx::tree::traits< manufacturer_type, char > manufacturer_traits;

    const manufacturer_optional&
    manufacturer () const;

    manufacturer_optional&
    manufacturer ();

    void
    manufacturer (const manufacturer_type& x);

    void
    manufacturer (const manufacturer_optional& x);

    void
    manufacturer (::std::unique_ptr< manufacturer_type > p);

    // model
    //
    typedef ::xml_schema::string model_type;
    typedef ::xsd::cxx::tree::optional< model_type > model_optional;
    typedef ::xsd::cxx::tree::traits< model_type, char > model_traits;

    const model_optional&
    model () const;

    model_optional&
    model ();

    void
    model (const model_type& x);

    void
    model (const model_optional& x);

    void
    model (::std::unique_ptr< model_type > p);

    // serialnumber
    //
    typedef ::xml_schema::string serialnumber_type;
    typedef ::xsd::cxx::tree::optional< serialnumber_type > serialnumber_optional;
    typedef ::xsd::cxx::tree::traits< serialnumber_type, char > serialnumber_traits;

    const serialnumber_optional&
    serialnumber () const;

    serialnumber_optional&
    serialnumber ();

    void
    serialnumber (const serialnumber_type& x);

    void
    serialnumber (const serialnumber_optional& x);

    void
    serialnumber (::std::unique_ptr< serialnumber_type > p);

    // purchase
    //
    typedef ::streit::purchaseType purchase_type;
    typedef ::xsd::cxx::tree::optional< purchase_type > purchase_optional;
    typedef ::xsd::cxx::tree::traits< purchase_type, char > purchase_traits;

    const purchase_optional&
    purchase () const;

    purchase_optional&
    purchase ();

    void
    purchase (const purchase_type& x);

    void
    purchase (const purchase_optional& x);

    void
    purchase (::std::unique_ptr< purchase_type > p);

    // serviceinterval
    //
    typedef ::xml_schema::positive_integer serviceinterval_type;
    typedef ::xsd::cxx::tree::optional< serviceinterval_type > serviceinterval_optional;
    typedef ::xsd::cxx::tree::traits< serviceinterval_type, char > serviceinterval_traits;

    const serviceinterval_optional&
    serviceinterval () const;

    serviceinterval_optional&
    serviceinterval ();

    void
    serviceinterval (const serviceinterval_type& x);

    void
    serviceinterval (const serviceinterval_optional& x);

    // nextservicedate
    //
    typedef ::streit::encapsulatedDateTimeType nextservicedate_type;
    typedef ::xsd::cxx::tree::optional< nextservicedate_type > nextservicedate_optional;
    typedef ::xsd::cxx::tree::traits< nextservicedate_type, char > nextservicedate_traits;

    const nextservicedate_optional&
    nextservicedate () const;

    nextservicedate_optional&
    nextservicedate ();

    void
    nextservicedate (const nextservicedate_type& x);

    void
    nextservicedate (const nextservicedate_optional& x);

    void
    nextservicedate (::std::unique_ptr< nextservicedate_type > p);

    // notes
    //
    typedef ::streit::notesType notes_type;
    typedef ::xsd::cxx::tree::optional< notes_type > notes_optional;
    typedef ::xsd::cxx::tree::traits< notes_type, char > notes_traits;

    const notes_optional&
    notes () const;

    notes_optional&
    notes ();

    void
    notes (const notes_type& x);

    void
    notes (const notes_optional& x);

    void
    notes (::std::unique_ptr< notes_type > p);

    // Constructors.
    //
    equipmentPieceType (const id_type&,
                        const name_type&);

    equipmentPieceType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    equipmentPieceType (const equipmentPieceType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual equipmentPieceType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    equipmentPieceType&
    operator= (const equipmentPieceType& x);

    virtual 
    ~equipmentPieceType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    link_optional link_;
    manufacturer_optional manufacturer_;
    model_optional model_;
    serialnumber_optional serialnumber_;
    purchase_optional purchase_;
    serviceinterval_optional serviceinterval_;
    nextservicedate_optional nextservicedate_;
    notes_optional notes_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const equipmentPieceType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // EQUIPMENT_PIECE_TYPE_HXX
