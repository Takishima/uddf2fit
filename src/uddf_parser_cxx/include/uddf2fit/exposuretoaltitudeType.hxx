// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef EXPOSURETOALTITUDE_TYPE_HXX
#define EXPOSURETOALTITUDE_TYPE_HXX

#include "exposuretoaltitudeType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "transportation-fwd.hxx"

#include "encapsulatedDateTimeType-fwd.hxx"

namespace streit
{
  class exposuretoaltitudeType: public ::xml_schema::type
  {
    public:
    // surfaceintervalbeforealtitudeexposure
    //
    typedef ::xml_schema::positive_integer surfaceintervalbeforealtitudeexposure_type;
    typedef ::xsd::cxx::tree::optional< surfaceintervalbeforealtitudeexposure_type > surfaceintervalbeforealtitudeexposure_optional;
    typedef ::xsd::cxx::tree::traits< surfaceintervalbeforealtitudeexposure_type, char > surfaceintervalbeforealtitudeexposure_traits;

    const surfaceintervalbeforealtitudeexposure_optional&
    surfaceintervalbeforealtitudeexposure () const;

    surfaceintervalbeforealtitudeexposure_optional&
    surfaceintervalbeforealtitudeexposure ();

    void
    surfaceintervalbeforealtitudeexposure (const surfaceintervalbeforealtitudeexposure_type& x);

    void
    surfaceintervalbeforealtitudeexposure (const surfaceintervalbeforealtitudeexposure_optional& x);

    // transportation
    //
    typedef ::streit::transportation transportation_type;
    typedef ::xsd::cxx::tree::traits< transportation_type, char > transportation_traits;

    const transportation_type&
    transportation () const;

    transportation_type&
    transportation ();

    void
    transportation (const transportation_type& x);

    void
    transportation (::std::unique_ptr< transportation_type > p);

    // dateofflight
    //
    typedef ::streit::encapsulatedDateTimeType dateofflight_type;
    typedef ::xsd::cxx::tree::optional< dateofflight_type > dateofflight_optional;
    typedef ::xsd::cxx::tree::traits< dateofflight_type, char > dateofflight_traits;

    const dateofflight_optional&
    dateofflight () const;

    dateofflight_optional&
    dateofflight ();

    void
    dateofflight (const dateofflight_type& x);

    void
    dateofflight (const dateofflight_optional& x);

    void
    dateofflight (::std::unique_ptr< dateofflight_type > p);

    // altitudeofexposure
    //
    typedef ::xml_schema::positive_integer altitudeofexposure_type;
    typedef ::xsd::cxx::tree::optional< altitudeofexposure_type > altitudeofexposure_optional;
    typedef ::xsd::cxx::tree::traits< altitudeofexposure_type, char > altitudeofexposure_traits;

    const altitudeofexposure_optional&
    altitudeofexposure () const;

    altitudeofexposure_optional&
    altitudeofexposure ();

    void
    altitudeofexposure (const altitudeofexposure_type& x);

    void
    altitudeofexposure (const altitudeofexposure_optional& x);

    // totallengthofexposure
    //
    typedef ::xml_schema::positive_integer totallengthofexposure_type;
    typedef ::xsd::cxx::tree::optional< totallengthofexposure_type > totallengthofexposure_optional;
    typedef ::xsd::cxx::tree::traits< totallengthofexposure_type, char > totallengthofexposure_traits;

    const totallengthofexposure_optional&
    totallengthofexposure () const;

    totallengthofexposure_optional&
    totallengthofexposure ();

    void
    totallengthofexposure (const totallengthofexposure_type& x);

    void
    totallengthofexposure (const totallengthofexposure_optional& x);

    // Constructors.
    //
    exposuretoaltitudeType (const transportation_type&);

    exposuretoaltitudeType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    exposuretoaltitudeType (const exposuretoaltitudeType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual exposuretoaltitudeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    exposuretoaltitudeType&
    operator= (const exposuretoaltitudeType& x);

    virtual 
    ~exposuretoaltitudeType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    surfaceintervalbeforealtitudeexposure_optional surfaceintervalbeforealtitudeexposure_;
    ::xsd::cxx::tree::one< transportation_type > transportation_;
    dateofflight_optional dateofflight_;
    altitudeofexposure_optional altitudeofexposure_;
    totallengthofexposure_optional totallengthofexposure_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const exposuretoaltitudeType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // EXPOSURETOALTITUDE_TYPE_HXX
