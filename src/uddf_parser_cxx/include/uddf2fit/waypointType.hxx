// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef WAYPOINT_TYPE_HXX
#define WAYPOINT_TYPE_HXX

#include "waypointType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "alarm-fwd.hxx"

#include "batterychargecondition-fwd.hxx"

#include "decostop-fwd.hxx"

#include "setpo2-fwd.hxx"

#include "linkType-fwd.hxx"

#include "tankpressure-fwd.hxx"

#include "divemode-fwd.hxx"

#include "gradientfactor-fwd.hxx"

#include "measuredpo2-fwd.hxx"

namespace streit
{
  class waypointType: public ::xml_schema::type
  {
    public:
    // alarm
    //
    typedef ::streit::alarm alarm_type;
    typedef ::xsd::cxx::tree::sequence< alarm_type > alarm_sequence;
    typedef alarm_sequence::iterator alarm_iterator;
    typedef alarm_sequence::const_iterator alarm_const_iterator;
    typedef ::xsd::cxx::tree::traits< alarm_type, char > alarm_traits;

    const alarm_sequence&
    alarm () const;

    alarm_sequence&
    alarm ();

    void
    alarm (const alarm_sequence& s);

    // batterychargecondition
    //
    typedef ::streit::batterychargecondition batterychargecondition_type;
    typedef ::xsd::cxx::tree::sequence< batterychargecondition_type > batterychargecondition_sequence;
    typedef batterychargecondition_sequence::iterator batterychargecondition_iterator;
    typedef batterychargecondition_sequence::const_iterator batterychargecondition_const_iterator;
    typedef ::xsd::cxx::tree::traits< batterychargecondition_type, char > batterychargecondition_traits;

    const batterychargecondition_sequence&
    batterychargecondition () const;

    batterychargecondition_sequence&
    batterychargecondition ();

    void
    batterychargecondition (const batterychargecondition_sequence& s);

    // cns
    //
    typedef ::xml_schema::float_ cns_type;
    typedef ::xsd::cxx::tree::optional< cns_type > cns_optional;
    typedef ::xsd::cxx::tree::traits< cns_type, char > cns_traits;

    const cns_optional&
    cns () const;

    cns_optional&
    cns ();

    void
    cns (const cns_type& x);

    void
    cns (const cns_optional& x);

    // decostop
    //
    typedef ::streit::decostop decostop_type;
    typedef ::xsd::cxx::tree::sequence< decostop_type > decostop_sequence;
    typedef decostop_sequence::iterator decostop_iterator;
    typedef decostop_sequence::const_iterator decostop_const_iterator;
    typedef ::xsd::cxx::tree::traits< decostop_type, char > decostop_traits;

    const decostop_sequence&
    decostop () const;

    decostop_sequence&
    decostop ();

    void
    decostop (const decostop_sequence& s);

    // bodytemperature
    //
    typedef ::xml_schema::float_ bodytemperature_type;
    typedef ::xsd::cxx::tree::optional< bodytemperature_type > bodytemperature_optional;
    typedef ::xsd::cxx::tree::traits< bodytemperature_type, char > bodytemperature_traits;

    const bodytemperature_optional&
    bodytemperature () const;

    bodytemperature_optional&
    bodytemperature ();

    void
    bodytemperature (const bodytemperature_type& x);

    void
    bodytemperature (const bodytemperature_optional& x);

    // calculatedpo2
    //
    typedef ::xml_schema::float_ calculatedpo2_type;
    typedef ::xsd::cxx::tree::optional< calculatedpo2_type > calculatedpo2_optional;
    typedef ::xsd::cxx::tree::traits< calculatedpo2_type, char > calculatedpo2_traits;

    const calculatedpo2_optional&
    calculatedpo2 () const;

    calculatedpo2_optional&
    calculatedpo2 ();

    void
    calculatedpo2 (const calculatedpo2_type& x);

    void
    calculatedpo2 (const calculatedpo2_optional& x);

    // depth
    //
    typedef ::xml_schema::float_ depth_type;
    typedef ::xsd::cxx::tree::optional< depth_type > depth_optional;
    typedef ::xsd::cxx::tree::traits< depth_type, char > depth_traits;

    const depth_optional&
    depth () const;

    depth_optional&
    depth ();

    void
    depth (const depth_type& x);

    void
    depth (const depth_optional& x);

    // divetime
    //
    typedef ::xml_schema::float_ divetime_type;
    typedef ::xsd::cxx::tree::optional< divetime_type > divetime_optional;
    typedef ::xsd::cxx::tree::traits< divetime_type, char > divetime_traits;

    const divetime_optional&
    divetime () const;

    divetime_optional&
    divetime ();

    void
    divetime (const divetime_type& x);

    void
    divetime (const divetime_optional& x);

    // heading
    //
    typedef ::xml_schema::float_ heading_type;
    typedef ::xsd::cxx::tree::optional< heading_type > heading_optional;
    typedef ::xsd::cxx::tree::traits< heading_type, char > heading_traits;

    const heading_optional&
    heading () const;

    heading_optional&
    heading ();

    void
    heading (const heading_type& x);

    void
    heading (const heading_optional& x);

    // heartrate
    //
    typedef ::xml_schema::float_ heartrate_type;
    typedef ::xsd::cxx::tree::optional< heartrate_type > heartrate_optional;
    typedef ::xsd::cxx::tree::traits< heartrate_type, char > heartrate_traits;

    const heartrate_optional&
    heartrate () const;

    heartrate_optional&
    heartrate ();

    void
    heartrate (const heartrate_type& x);

    void
    heartrate (const heartrate_optional& x);

    // otu
    //
    typedef ::xml_schema::float_ otu_type;
    typedef ::xsd::cxx::tree::optional< otu_type > otu_optional;
    typedef ::xsd::cxx::tree::traits< otu_type, char > otu_traits;

    const otu_optional&
    otu () const;

    otu_optional&
    otu ();

    void
    otu (const otu_type& x);

    void
    otu (const otu_optional& x);

    // pulserate
    //
    typedef ::xml_schema::float_ pulserate_type;
    typedef ::xsd::cxx::tree::optional< pulserate_type > pulserate_optional;
    typedef ::xsd::cxx::tree::traits< pulserate_type, char > pulserate_traits;

    const pulserate_optional&
    pulserate () const;

    pulserate_optional&
    pulserate ();

    void
    pulserate (const pulserate_type& x);

    void
    pulserate (const pulserate_optional& x);

    // remainingbottomtime
    //
    typedef ::xml_schema::float_ remainingbottomtime_type;
    typedef ::xsd::cxx::tree::optional< remainingbottomtime_type > remainingbottomtime_optional;
    typedef ::xsd::cxx::tree::traits< remainingbottomtime_type, char > remainingbottomtime_traits;

    const remainingbottomtime_optional&
    remainingbottomtime () const;

    remainingbottomtime_optional&
    remainingbottomtime ();

    void
    remainingbottomtime (const remainingbottomtime_type& x);

    void
    remainingbottomtime (const remainingbottomtime_optional& x);

    // remainingo2time
    //
    typedef ::xml_schema::float_ remainingo2time_type;
    typedef ::xsd::cxx::tree::optional< remainingo2time_type > remainingo2time_optional;
    typedef ::xsd::cxx::tree::traits< remainingo2time_type, char > remainingo2time_traits;

    const remainingo2time_optional&
    remainingo2time () const;

    remainingo2time_optional&
    remainingo2time ();

    void
    remainingo2time (const remainingo2time_type& x);

    void
    remainingo2time (const remainingo2time_optional& x);

    // setmarker
    //
    typedef ::xml_schema::string setmarker_type;
    typedef ::xsd::cxx::tree::optional< setmarker_type > setmarker_optional;
    typedef ::xsd::cxx::tree::traits< setmarker_type, char > setmarker_traits;

    const setmarker_optional&
    setmarker () const;

    setmarker_optional&
    setmarker ();

    void
    setmarker (const setmarker_type& x);

    void
    setmarker (const setmarker_optional& x);

    void
    setmarker (::std::unique_ptr< setmarker_type > p);

    // setpo2
    //
    typedef ::streit::setpo2 setpo2_type;
    typedef ::xsd::cxx::tree::optional< setpo2_type > setpo2_optional;
    typedef ::xsd::cxx::tree::traits< setpo2_type, char > setpo2_traits;

    const setpo2_optional&
    setpo2 () const;

    setpo2_optional&
    setpo2 ();

    void
    setpo2 (const setpo2_type& x);

    void
    setpo2 (const setpo2_optional& x);

    void
    setpo2 (::std::unique_ptr< setpo2_type > p);

    // switchmix
    //
    typedef ::streit::linkType switchmix_type;
    typedef ::xsd::cxx::tree::optional< switchmix_type > switchmix_optional;
    typedef ::xsd::cxx::tree::traits< switchmix_type, char > switchmix_traits;

    const switchmix_optional&
    switchmix () const;

    switchmix_optional&
    switchmix ();

    void
    switchmix (const switchmix_type& x);

    void
    switchmix (const switchmix_optional& x);

    void
    switchmix (::std::unique_ptr< switchmix_type > p);

    // tankpressure
    //
    typedef ::streit::tankpressure tankpressure_type;
    typedef ::xsd::cxx::tree::sequence< tankpressure_type > tankpressure_sequence;
    typedef tankpressure_sequence::iterator tankpressure_iterator;
    typedef tankpressure_sequence::const_iterator tankpressure_const_iterator;
    typedef ::xsd::cxx::tree::traits< tankpressure_type, char > tankpressure_traits;

    const tankpressure_sequence&
    tankpressure () const;

    tankpressure_sequence&
    tankpressure ();

    void
    tankpressure (const tankpressure_sequence& s);

    // temperature
    //
    typedef ::xml_schema::float_ temperature_type;
    typedef ::xsd::cxx::tree::optional< temperature_type > temperature_optional;
    typedef ::xsd::cxx::tree::traits< temperature_type, char > temperature_traits;

    const temperature_optional&
    temperature () const;

    temperature_optional&
    temperature ();

    void
    temperature (const temperature_type& x);

    void
    temperature (const temperature_optional& x);

    // divemode
    //
    typedef ::streit::divemode divemode_type;
    typedef ::xsd::cxx::tree::optional< divemode_type > divemode_optional;
    typedef ::xsd::cxx::tree::traits< divemode_type, char > divemode_traits;

    const divemode_optional&
    divemode () const;

    divemode_optional&
    divemode ();

    void
    divemode (const divemode_type& x);

    void
    divemode (const divemode_optional& x);

    void
    divemode (::std::unique_ptr< divemode_type > p);

    // gradientfactor
    //
    typedef ::streit::gradientfactor gradientfactor_type;
    typedef ::xsd::cxx::tree::optional< gradientfactor_type > gradientfactor_optional;
    typedef ::xsd::cxx::tree::traits< gradientfactor_type, char > gradientfactor_traits;

    const gradientfactor_optional&
    gradientfactor () const;

    gradientfactor_optional&
    gradientfactor ();

    void
    gradientfactor (const gradientfactor_type& x);

    void
    gradientfactor (const gradientfactor_optional& x);

    void
    gradientfactor (::std::unique_ptr< gradientfactor_type > p);

    // measuredpo2
    //
    typedef ::streit::measuredpo2 measuredpo2_type;
    typedef ::xsd::cxx::tree::sequence< measuredpo2_type > measuredpo2_sequence;
    typedef measuredpo2_sequence::iterator measuredpo2_iterator;
    typedef measuredpo2_sequence::const_iterator measuredpo2_const_iterator;
    typedef ::xsd::cxx::tree::traits< measuredpo2_type, char > measuredpo2_traits;

    const measuredpo2_sequence&
    measuredpo2 () const;

    measuredpo2_sequence&
    measuredpo2 ();

    void
    measuredpo2 (const measuredpo2_sequence& s);

    // nodecotime
    //
    typedef ::xml_schema::float_ nodecotime_type;
    typedef ::xsd::cxx::tree::optional< nodecotime_type > nodecotime_optional;
    typedef ::xsd::cxx::tree::traits< nodecotime_type, char > nodecotime_traits;

    const nodecotime_optional&
    nodecotime () const;

    nodecotime_optional&
    nodecotime ();

    void
    nodecotime (const nodecotime_type& x);

    void
    nodecotime (const nodecotime_optional& x);

    // Constructors.
    //
    waypointType ();

    waypointType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    waypointType (const waypointType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual waypointType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    waypointType&
    operator= (const waypointType& x);

    virtual 
    ~waypointType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    alarm_sequence alarm_;
    batterychargecondition_sequence batterychargecondition_;
    cns_optional cns_;
    decostop_sequence decostop_;
    bodytemperature_optional bodytemperature_;
    calculatedpo2_optional calculatedpo2_;
    depth_optional depth_;
    divetime_optional divetime_;
    heading_optional heading_;
    heartrate_optional heartrate_;
    otu_optional otu_;
    pulserate_optional pulserate_;
    remainingbottomtime_optional remainingbottomtime_;
    remainingo2time_optional remainingo2time_;
    setmarker_optional setmarker_;
    setpo2_optional setpo2_;
    switchmix_optional switchmix_;
    tankpressure_sequence tankpressure_;
    temperature_optional temperature_;
    divemode_optional divemode_;
    gradientfactor_optional gradientfactor_;
    measuredpo2_sequence measuredpo2_;
    nodecotime_optional nodecotime_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const waypointType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // WAYPOINT_TYPE_HXX
