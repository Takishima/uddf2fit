// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef APPLICATIONDATA_TYPE_HXX
#define APPLICATIONDATA_TYPE_HXX

#include "applicationdataType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "decotrainer-fwd.hxx"

#include "hargikas-fwd.hxx"

#include "heinrichsweikamp-fwd.hxx"

#include "tausim-fwd.hxx"

#include "tautabu-fwd.hxx"

namespace streit
{
  class applicationdataType: public ::xml_schema::type
  {
    public:
    // decotrainer
    //
    typedef ::streit::decotrainer decotrainer_type;
    typedef ::xsd::cxx::tree::optional< decotrainer_type > decotrainer_optional;
    typedef ::xsd::cxx::tree::traits< decotrainer_type, char > decotrainer_traits;

    const decotrainer_optional&
    decotrainer () const;

    decotrainer_optional&
    decotrainer ();

    void
    decotrainer (const decotrainer_type& x);

    void
    decotrainer (const decotrainer_optional& x);

    void
    decotrainer (::std::unique_ptr< decotrainer_type > p);

    // hargikas
    //
    typedef ::streit::hargikas hargikas_type;
    typedef ::xsd::cxx::tree::optional< hargikas_type > hargikas_optional;
    typedef ::xsd::cxx::tree::traits< hargikas_type, char > hargikas_traits;

    const hargikas_optional&
    hargikas () const;

    hargikas_optional&
    hargikas ();

    void
    hargikas (const hargikas_type& x);

    void
    hargikas (const hargikas_optional& x);

    void
    hargikas (::std::unique_ptr< hargikas_type > p);

    // heinrichsweikamp
    //
    typedef ::streit::heinrichsweikamp heinrichsweikamp_type;
    typedef ::xsd::cxx::tree::optional< heinrichsweikamp_type > heinrichsweikamp_optional;
    typedef ::xsd::cxx::tree::traits< heinrichsweikamp_type, char > heinrichsweikamp_traits;

    const heinrichsweikamp_optional&
    heinrichsweikamp () const;

    heinrichsweikamp_optional&
    heinrichsweikamp ();

    void
    heinrichsweikamp (const heinrichsweikamp_type& x);

    void
    heinrichsweikamp (const heinrichsweikamp_optional& x);

    void
    heinrichsweikamp (::std::unique_ptr< heinrichsweikamp_type > p);

    // tausim
    //
    typedef ::streit::tausim tausim_type;
    typedef ::xsd::cxx::tree::optional< tausim_type > tausim_optional;
    typedef ::xsd::cxx::tree::traits< tausim_type, char > tausim_traits;

    const tausim_optional&
    tausim () const;

    tausim_optional&
    tausim ();

    void
    tausim (const tausim_type& x);

    void
    tausim (const tausim_optional& x);

    void
    tausim (::std::unique_ptr< tausim_type > p);

    // tautabu
    //
    typedef ::streit::tautabu tautabu_type;
    typedef ::xsd::cxx::tree::optional< tautabu_type > tautabu_optional;
    typedef ::xsd::cxx::tree::traits< tautabu_type, char > tautabu_traits;

    const tautabu_optional&
    tautabu () const;

    tautabu_optional&
    tautabu ();

    void
    tautabu (const tautabu_type& x);

    void
    tautabu (const tautabu_optional& x);

    void
    tautabu (::std::unique_ptr< tautabu_type > p);

    // Constructors.
    //
    applicationdataType ();

    applicationdataType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    applicationdataType (const applicationdataType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual applicationdataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    applicationdataType&
    operator= (const applicationdataType& x);

    virtual 
    ~applicationdataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    decotrainer_optional decotrainer_;
    hargikas_optional hargikas_;
    heinrichsweikamp_optional heinrichsweikamp_;
    tausim_optional tausim_;
    tautabu_optional tautabu_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const applicationdataType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // APPLICATIONDATA_TYPE_HXX
