// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef CERTIFICATION_TYPE_HXX
#define CERTIFICATION_TYPE_HXX

#include "certificationType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "instructorType-fwd.hxx"

#include "encapsulatedDateTimeType-fwd.hxx"

namespace streit
{
  class certificationType: public ::xml_schema::type
  {
    public:
    // level
    //
    typedef ::xml_schema::string level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    void
    level (::std::unique_ptr< level_type > p);

    // specialty
    //
    typedef ::xml_schema::string specialty_type;
    typedef ::xsd::cxx::tree::optional< specialty_type > specialty_optional;
    typedef ::xsd::cxx::tree::traits< specialty_type, char > specialty_traits;

    const specialty_optional&
    specialty () const;

    specialty_optional&
    specialty ();

    void
    specialty (const specialty_type& x);

    void
    specialty (const specialty_optional& x);

    void
    specialty (::std::unique_ptr< specialty_type > p);

    // certificatenumber
    //
    typedef ::xml_schema::string certificatenumber_type;
    typedef ::xsd::cxx::tree::optional< certificatenumber_type > certificatenumber_optional;
    typedef ::xsd::cxx::tree::traits< certificatenumber_type, char > certificatenumber_traits;

    const certificatenumber_optional&
    certificatenumber () const;

    certificatenumber_optional&
    certificatenumber ();

    void
    certificatenumber (const certificatenumber_type& x);

    void
    certificatenumber (const certificatenumber_optional& x);

    void
    certificatenumber (::std::unique_ptr< certificatenumber_type > p);

    // organization
    //
    typedef ::xml_schema::string organization_type;
    typedef ::xsd::cxx::tree::optional< organization_type > organization_optional;
    typedef ::xsd::cxx::tree::traits< organization_type, char > organization_traits;

    const organization_optional&
    organization () const;

    organization_optional&
    organization ();

    void
    organization (const organization_type& x);

    void
    organization (const organization_optional& x);

    void
    organization (::std::unique_ptr< organization_type > p);

    // instructor
    //
    typedef ::streit::instructorType instructor_type;
    typedef ::xsd::cxx::tree::optional< instructor_type > instructor_optional;
    typedef ::xsd::cxx::tree::traits< instructor_type, char > instructor_traits;

    const instructor_optional&
    instructor () const;

    instructor_optional&
    instructor ();

    void
    instructor (const instructor_type& x);

    void
    instructor (const instructor_optional& x);

    void
    instructor (::std::unique_ptr< instructor_type > p);

    // issuedate
    //
    typedef ::streit::encapsulatedDateTimeType issuedate_type;
    typedef ::xsd::cxx::tree::optional< issuedate_type > issuedate_optional;
    typedef ::xsd::cxx::tree::traits< issuedate_type, char > issuedate_traits;

    const issuedate_optional&
    issuedate () const;

    issuedate_optional&
    issuedate ();

    void
    issuedate (const issuedate_type& x);

    void
    issuedate (const issuedate_optional& x);

    void
    issuedate (::std::unique_ptr< issuedate_type > p);

    // validdate
    //
    typedef ::streit::encapsulatedDateTimeType validdate_type;
    typedef ::xsd::cxx::tree::optional< validdate_type > validdate_optional;
    typedef ::xsd::cxx::tree::traits< validdate_type, char > validdate_traits;

    const validdate_optional&
    validdate () const;

    validdate_optional&
    validdate ();

    void
    validdate (const validdate_type& x);

    void
    validdate (const validdate_optional& x);

    void
    validdate (::std::unique_ptr< validdate_type > p);

    // Constructors.
    //
    certificationType ();

    certificationType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    certificationType (const certificationType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual certificationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    certificationType&
    operator= (const certificationType& x);

    virtual 
    ~certificationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    level_optional level_;
    specialty_optional specialty_;
    certificatenumber_optional certificatenumber_;
    organization_optional organization_;
    instructor_optional instructor_;
    issuedate_optional issuedate_;
    validdate_optional validdate_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const certificationType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CERTIFICATION_TYPE_HXX
