// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef BASE_CALCULATION_TYPE_HXX
#define BASE_CALCULATION_TYPE_HXX

#include "baseCalculationType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ID_TYPE.hxx"

#include "linkType-fwd.hxx"

#include "surfaceintervalType-fwd.hxx"

#include "outputType-fwd.hxx"

#include "applicationdataType-fwd.hxx"

#include "mixchangeType-fwd.hxx"

#include "inputprofileType-fwd.hxx"

namespace streit
{
  class baseCalculationType: public ::streit::ID_TYPE
  {
    public:
    // title
    //
    typedef ::xml_schema::string title_type;
    typedef ::xsd::cxx::tree::optional< title_type > title_optional;
    typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

    const title_optional&
    title () const;

    title_optional&
    title ();

    void
    title (const title_type& x);

    void
    title (const title_optional& x);

    void
    title (::std::unique_ptr< title_type > p);

    // link
    //
    typedef ::streit::linkType link_type;
    typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
    typedef link_sequence::iterator link_iterator;
    typedef link_sequence::const_iterator link_const_iterator;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_sequence&
    link () const;

    link_sequence&
    link ();

    void
    link (const link_sequence& s);

    // surfaceintervalafterdive
    //
    typedef ::streit::surfaceintervalType surfaceintervalafterdive_type;
    typedef ::xsd::cxx::tree::optional< surfaceintervalafterdive_type > surfaceintervalafterdive_optional;
    typedef ::xsd::cxx::tree::traits< surfaceintervalafterdive_type, char > surfaceintervalafterdive_traits;

    const surfaceintervalafterdive_optional&
    surfaceintervalafterdive () const;

    surfaceintervalafterdive_optional&
    surfaceintervalafterdive ();

    void
    surfaceintervalafterdive (const surfaceintervalafterdive_type& x);

    void
    surfaceintervalafterdive (const surfaceintervalafterdive_optional& x);

    void
    surfaceintervalafterdive (::std::unique_ptr< surfaceintervalafterdive_type > p);

    // surfaceintervalbeforedive
    //
    typedef ::streit::surfaceintervalType surfaceintervalbeforedive_type;
    typedef ::xsd::cxx::tree::optional< surfaceintervalbeforedive_type > surfaceintervalbeforedive_optional;
    typedef ::xsd::cxx::tree::traits< surfaceintervalbeforedive_type, char > surfaceintervalbeforedive_traits;

    const surfaceintervalbeforedive_optional&
    surfaceintervalbeforedive () const;

    surfaceintervalbeforedive_optional&
    surfaceintervalbeforedive ();

    void
    surfaceintervalbeforedive (const surfaceintervalbeforedive_type& x);

    void
    surfaceintervalbeforedive (const surfaceintervalbeforedive_optional& x);

    void
    surfaceintervalbeforedive (::std::unique_ptr< surfaceintervalbeforedive_type > p);

    // density
    //
    typedef ::xml_schema::float_ density_type;
    typedef ::xsd::cxx::tree::optional< density_type > density_optional;
    typedef ::xsd::cxx::tree::traits< density_type, char > density_traits;

    const density_optional&
    density () const;

    density_optional&
    density ();

    void
    density (const density_type& x);

    void
    density (const density_optional& x);

    // maximumascendingrate
    //
    typedef ::xml_schema::float_ maximumascendingrate_type;
    typedef ::xsd::cxx::tree::optional< maximumascendingrate_type > maximumascendingrate_optional;
    typedef ::xsd::cxx::tree::traits< maximumascendingrate_type, char > maximumascendingrate_traits;

    const maximumascendingrate_optional&
    maximumascendingrate () const;

    maximumascendingrate_optional&
    maximumascendingrate ();

    void
    maximumascendingrate (const maximumascendingrate_type& x);

    void
    maximumascendingrate (const maximumascendingrate_optional& x);

    // output
    //
    typedef ::streit::outputType output_type;
    typedef ::xsd::cxx::tree::optional< output_type > output_optional;
    typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

    const output_optional&
    output () const;

    output_optional&
    output ();

    void
    output (const output_type& x);

    void
    output (const output_optional& x);

    void
    output (::std::unique_ptr< output_type > p);

    // applicationdata
    //
    typedef ::streit::applicationdataType applicationdata_type;
    typedef ::xsd::cxx::tree::optional< applicationdata_type > applicationdata_optional;
    typedef ::xsd::cxx::tree::traits< applicationdata_type, char > applicationdata_traits;

    const applicationdata_optional&
    applicationdata () const;

    applicationdata_optional&
    applicationdata ();

    void
    applicationdata (const applicationdata_type& x);

    void
    applicationdata (const applicationdata_optional& x);

    void
    applicationdata (::std::unique_ptr< applicationdata_type > p);

    // decomodel
    //
    typedef ::xml_schema::string decomodel_type;
    typedef ::xsd::cxx::tree::optional< decomodel_type > decomodel_optional;
    typedef ::xsd::cxx::tree::traits< decomodel_type, char > decomodel_traits;

    const decomodel_optional&
    decomodel () const;

    decomodel_optional&
    decomodel ();

    void
    decomodel (const decomodel_type& x);

    void
    decomodel (const decomodel_optional& x);

    void
    decomodel (::std::unique_ptr< decomodel_type > p);

    // deepstoptime
    //
    typedef ::xml_schema::float_ deepstoptime_type;
    typedef ::xsd::cxx::tree::optional< deepstoptime_type > deepstoptime_optional;
    typedef ::xsd::cxx::tree::traits< deepstoptime_type, char > deepstoptime_traits;

    const deepstoptime_optional&
    deepstoptime () const;

    deepstoptime_optional&
    deepstoptime ();

    void
    deepstoptime (const deepstoptime_type& x);

    void
    deepstoptime (const deepstoptime_optional& x);

    // mixchange
    //
    typedef ::streit::mixchangeType mixchange_type;
    typedef ::xsd::cxx::tree::optional< mixchange_type > mixchange_optional;
    typedef ::xsd::cxx::tree::traits< mixchange_type, char > mixchange_traits;

    const mixchange_optional&
    mixchange () const;

    mixchange_optional&
    mixchange ();

    void
    mixchange (const mixchange_type& x);

    void
    mixchange (const mixchange_optional& x);

    void
    mixchange (::std::unique_ptr< mixchange_type > p);

    // inputprofile
    //
    typedef ::streit::inputprofileType inputprofile_type;
    typedef ::xsd::cxx::tree::optional< inputprofile_type > inputprofile_optional;
    typedef ::xsd::cxx::tree::traits< inputprofile_type, char > inputprofile_traits;

    const inputprofile_optional&
    inputprofile () const;

    inputprofile_optional&
    inputprofile ();

    void
    inputprofile (const inputprofile_type& x);

    void
    inputprofile (const inputprofile_optional& x);

    void
    inputprofile (::std::unique_ptr< inputprofile_type > p);

    // Constructors.
    //
    baseCalculationType (const id_type&);

    baseCalculationType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    baseCalculationType (const baseCalculationType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual baseCalculationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    baseCalculationType&
    operator= (const baseCalculationType& x);

    virtual 
    ~baseCalculationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    title_optional title_;
    link_sequence link_;
    surfaceintervalafterdive_optional surfaceintervalafterdive_;
    surfaceintervalbeforedive_optional surfaceintervalbeforedive_;
    density_optional density_;
    maximumascendingrate_optional maximumascendingrate_;
    output_optional output_;
    applicationdata_optional applicationdata_;
    decomodel_optional decomodel_;
    deepstoptime_optional deepstoptime_;
    mixchange_optional mixchange_;
    inputprofile_optional inputprofile_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const baseCalculationType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BASE_CALCULATION_TYPE_HXX
