// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef INFORMATIONBEFOREDIVE_TYPE_HXX
#define INFORMATIONBEFOREDIVE_TYPE_HXX

#include "informationbeforediveType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "linkType-fwd.hxx"

#include "surfaceintervalType-fwd.hxx"

#include "equipmentused-fwd.hxx"

#include "apparatus-fwd.hxx"

#include "platform-fwd.hxx"

#include "purpose-fwd.hxx"

#include "stateofrestbeforedive-fwd.hxx"

#include "alcoholbeforedive-fwd.hxx"

#include "medicalbeforedive-fwd.hxx"

#include "nosuit-fwd.hxx"

#include "priceType-fwd.hxx"

#include "inputprofileType-fwd.hxx"

#include "samplesType-fwd.hxx"

namespace streit
{
  class informationbeforediveType: public ::xml_schema::type
  {
    public:
    // link
    //
    typedef ::streit::linkType link_type;
    typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
    typedef link_sequence::iterator link_iterator;
    typedef link_sequence::const_iterator link_const_iterator;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_sequence&
    link () const;

    link_sequence&
    link ();

    void
    link (const link_sequence& s);

    // divenumber
    //
    typedef ::xml_schema::positive_integer divenumber_type;
    typedef ::xsd::cxx::tree::optional< divenumber_type > divenumber_optional;
    typedef ::xsd::cxx::tree::traits< divenumber_type, char > divenumber_traits;

    const divenumber_optional&
    divenumber () const;

    divenumber_optional&
    divenumber ();

    void
    divenumber (const divenumber_type& x);

    void
    divenumber (const divenumber_optional& x);

    // divenumberofday
    //
    typedef ::xml_schema::positive_integer divenumberofday_type;
    typedef ::xsd::cxx::tree::optional< divenumberofday_type > divenumberofday_optional;
    typedef ::xsd::cxx::tree::traits< divenumberofday_type, char > divenumberofday_traits;

    const divenumberofday_optional&
    divenumberofday () const;

    divenumberofday_optional&
    divenumberofday ();

    void
    divenumberofday (const divenumberofday_type& x);

    void
    divenumberofday (const divenumberofday_optional& x);

    // internaldivenumber
    //
    typedef ::xml_schema::positive_integer internaldivenumber_type;
    typedef ::xsd::cxx::tree::optional< internaldivenumber_type > internaldivenumber_optional;
    typedef ::xsd::cxx::tree::traits< internaldivenumber_type, char > internaldivenumber_traits;

    const internaldivenumber_optional&
    internaldivenumber () const;

    internaldivenumber_optional&
    internaldivenumber ();

    void
    internaldivenumber (const internaldivenumber_type& x);

    void
    internaldivenumber (const internaldivenumber_optional& x);

    // datetime
    //
    typedef ::xml_schema::date_time datetime_type;
    typedef ::xsd::cxx::tree::traits< datetime_type, char > datetime_traits;

    const datetime_type&
    datetime () const;

    datetime_type&
    datetime ();

    void
    datetime (const datetime_type& x);

    void
    datetime (::std::unique_ptr< datetime_type > p);

    // airtemperature
    //
    typedef ::xml_schema::float_ airtemperature_type;
    typedef ::xsd::cxx::tree::optional< airtemperature_type > airtemperature_optional;
    typedef ::xsd::cxx::tree::traits< airtemperature_type, char > airtemperature_traits;

    const airtemperature_optional&
    airtemperature () const;

    airtemperature_optional&
    airtemperature ();

    void
    airtemperature (const airtemperature_type& x);

    void
    airtemperature (const airtemperature_optional& x);

    // surfaceintervalbeforedive
    //
    typedef ::streit::surfaceintervalType surfaceintervalbeforedive_type;
    typedef ::xsd::cxx::tree::optional< surfaceintervalbeforedive_type > surfaceintervalbeforedive_optional;
    typedef ::xsd::cxx::tree::traits< surfaceintervalbeforedive_type, char > surfaceintervalbeforedive_traits;

    const surfaceintervalbeforedive_optional&
    surfaceintervalbeforedive () const;

    surfaceintervalbeforedive_optional&
    surfaceintervalbeforedive ();

    void
    surfaceintervalbeforedive (const surfaceintervalbeforedive_type& x);

    void
    surfaceintervalbeforedive (const surfaceintervalbeforedive_optional& x);

    void
    surfaceintervalbeforedive (::std::unique_ptr< surfaceintervalbeforedive_type > p);

    // altitude
    //
    typedef ::xml_schema::float_ altitude_type;
    typedef ::xsd::cxx::tree::optional< altitude_type > altitude_optional;
    typedef ::xsd::cxx::tree::traits< altitude_type, char > altitude_traits;

    const altitude_optional&
    altitude () const;

    altitude_optional&
    altitude ();

    void
    altitude (const altitude_type& x);

    void
    altitude (const altitude_optional& x);

    // equipmentused
    //
    typedef ::streit::equipmentused equipmentused_type;
    typedef ::xsd::cxx::tree::optional< equipmentused_type > equipmentused_optional;
    typedef ::xsd::cxx::tree::traits< equipmentused_type, char > equipmentused_traits;

    const equipmentused_optional&
    equipmentused () const;

    equipmentused_optional&
    equipmentused ();

    void
    equipmentused (const equipmentused_type& x);

    void
    equipmentused (const equipmentused_optional& x);

    void
    equipmentused (::std::unique_ptr< equipmentused_type > p);

    // apparatus
    //
    typedef ::streit::apparatus apparatus_type;
    typedef ::xsd::cxx::tree::optional< apparatus_type > apparatus_optional;
    typedef ::xsd::cxx::tree::traits< apparatus_type, char > apparatus_traits;

    const apparatus_optional&
    apparatus () const;

    apparatus_optional&
    apparatus ();

    void
    apparatus (const apparatus_type& x);

    void
    apparatus (const apparatus_optional& x);

    void
    apparatus (::std::unique_ptr< apparatus_type > p);

    // platform
    //
    typedef ::streit::platform platform_type;
    typedef ::xsd::cxx::tree::optional< platform_type > platform_optional;
    typedef ::xsd::cxx::tree::traits< platform_type, char > platform_traits;

    const platform_optional&
    platform () const;

    platform_optional&
    platform ();

    void
    platform (const platform_type& x);

    void
    platform (const platform_optional& x);

    void
    platform (::std::unique_ptr< platform_type > p);

    // purpose
    //
    typedef ::streit::purpose purpose_type;
    typedef ::xsd::cxx::tree::optional< purpose_type > purpose_optional;
    typedef ::xsd::cxx::tree::traits< purpose_type, char > purpose_traits;

    const purpose_optional&
    purpose () const;

    purpose_optional&
    purpose ();

    void
    purpose (const purpose_type& x);

    void
    purpose (const purpose_optional& x);

    void
    purpose (::std::unique_ptr< purpose_type > p);

    // stateofrestbeforedive
    //
    typedef ::streit::stateofrestbeforedive stateofrestbeforedive_type;
    typedef ::xsd::cxx::tree::optional< stateofrestbeforedive_type > stateofrestbeforedive_optional;
    typedef ::xsd::cxx::tree::traits< stateofrestbeforedive_type, char > stateofrestbeforedive_traits;

    const stateofrestbeforedive_optional&
    stateofrestbeforedive () const;

    stateofrestbeforedive_optional&
    stateofrestbeforedive ();

    void
    stateofrestbeforedive (const stateofrestbeforedive_type& x);

    void
    stateofrestbeforedive (const stateofrestbeforedive_optional& x);

    void
    stateofrestbeforedive (::std::unique_ptr< stateofrestbeforedive_type > p);

    // tripmembership
    //
    typedef ::streit::linkType tripmembership_type;
    typedef ::xsd::cxx::tree::optional< tripmembership_type > tripmembership_optional;
    typedef ::xsd::cxx::tree::traits< tripmembership_type, char > tripmembership_traits;

    const tripmembership_optional&
    tripmembership () const;

    tripmembership_optional&
    tripmembership ();

    void
    tripmembership (const tripmembership_type& x);

    void
    tripmembership (const tripmembership_optional& x);

    void
    tripmembership (::std::unique_ptr< tripmembership_type > p);

    // alcoholbeforedive
    //
    typedef ::streit::alcoholbeforedive alcoholbeforedive_type;
    typedef ::xsd::cxx::tree::optional< alcoholbeforedive_type > alcoholbeforedive_optional;
    typedef ::xsd::cxx::tree::traits< alcoholbeforedive_type, char > alcoholbeforedive_traits;

    const alcoholbeforedive_optional&
    alcoholbeforedive () const;

    alcoholbeforedive_optional&
    alcoholbeforedive ();

    void
    alcoholbeforedive (const alcoholbeforedive_type& x);

    void
    alcoholbeforedive (const alcoholbeforedive_optional& x);

    void
    alcoholbeforedive (::std::unique_ptr< alcoholbeforedive_type > p);

    // medicalbeforedive
    //
    typedef ::streit::medicalbeforedive medicalbeforedive_type;
    typedef ::xsd::cxx::tree::optional< medicalbeforedive_type > medicalbeforedive_optional;
    typedef ::xsd::cxx::tree::traits< medicalbeforedive_type, char > medicalbeforedive_traits;

    const medicalbeforedive_optional&
    medicalbeforedive () const;

    medicalbeforedive_optional&
    medicalbeforedive ();

    void
    medicalbeforedive (const medicalbeforedive_type& x);

    void
    medicalbeforedive (const medicalbeforedive_optional& x);

    void
    medicalbeforedive (::std::unique_ptr< medicalbeforedive_type > p);

    // nosuit
    //
    typedef ::streit::nosuit nosuit_type;
    typedef ::xsd::cxx::tree::optional< nosuit_type > nosuit_optional;
    typedef ::xsd::cxx::tree::traits< nosuit_type, char > nosuit_traits;

    const nosuit_optional&
    nosuit () const;

    nosuit_optional&
    nosuit ();

    void
    nosuit (const nosuit_type& x);

    void
    nosuit (const nosuit_optional& x);

    void
    nosuit (::std::unique_ptr< nosuit_type > p);

    // price
    //
    typedef ::streit::priceType price_type;
    typedef ::xsd::cxx::tree::optional< price_type > price_optional;
    typedef ::xsd::cxx::tree::traits< price_type, char > price_traits;

    const price_optional&
    price () const;

    price_optional&
    price ();

    void
    price (const price_type& x);

    void
    price (const price_optional& x);

    void
    price (::std::unique_ptr< price_type > p);

    // inputprofile
    //
    typedef ::streit::inputprofileType inputprofile_type;
    typedef ::xsd::cxx::tree::optional< inputprofile_type > inputprofile_optional;
    typedef ::xsd::cxx::tree::traits< inputprofile_type, char > inputprofile_traits;

    const inputprofile_optional&
    inputprofile () const;

    inputprofile_optional&
    inputprofile ();

    void
    inputprofile (const inputprofile_type& x);

    void
    inputprofile (const inputprofile_optional& x);

    void
    inputprofile (::std::unique_ptr< inputprofile_type > p);

    // plannedprofile
    //
    typedef ::streit::samplesType plannedprofile_type;
    typedef ::xsd::cxx::tree::optional< plannedprofile_type > plannedprofile_optional;
    typedef ::xsd::cxx::tree::traits< plannedprofile_type, char > plannedprofile_traits;

    const plannedprofile_optional&
    plannedprofile () const;

    plannedprofile_optional&
    plannedprofile ();

    void
    plannedprofile (const plannedprofile_type& x);

    void
    plannedprofile (const plannedprofile_optional& x);

    void
    plannedprofile (::std::unique_ptr< plannedprofile_type > p);

    // surfacepressure
    //
    typedef ::xml_schema::float_ surfacepressure_type;
    typedef ::xsd::cxx::tree::optional< surfacepressure_type > surfacepressure_optional;
    typedef ::xsd::cxx::tree::traits< surfacepressure_type, char > surfacepressure_traits;

    const surfacepressure_optional&
    surfacepressure () const;

    surfacepressure_optional&
    surfacepressure ();

    void
    surfacepressure (const surfacepressure_type& x);

    void
    surfacepressure (const surfacepressure_optional& x);

    // Constructors.
    //
    informationbeforediveType (const datetime_type&);

    informationbeforediveType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    informationbeforediveType (const informationbeforediveType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual informationbeforediveType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    informationbeforediveType&
    operator= (const informationbeforediveType& x);

    virtual 
    ~informationbeforediveType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    link_sequence link_;
    divenumber_optional divenumber_;
    divenumberofday_optional divenumberofday_;
    internaldivenumber_optional internaldivenumber_;
    ::xsd::cxx::tree::one< datetime_type > datetime_;
    airtemperature_optional airtemperature_;
    surfaceintervalbeforedive_optional surfaceintervalbeforedive_;
    altitude_optional altitude_;
    equipmentused_optional equipmentused_;
    apparatus_optional apparatus_;
    platform_optional platform_;
    purpose_optional purpose_;
    stateofrestbeforedive_optional stateofrestbeforedive_;
    tripmembership_optional tripmembership_;
    alcoholbeforedive_optional alcoholbeforedive_;
    medicalbeforedive_optional medicalbeforedive_;
    nosuit_optional nosuit_;
    price_optional price_;
    inputprofile_optional inputprofile_;
    plannedprofile_optional plannedprofile_;
    surfacepressure_optional surfacepressure_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const informationbeforediveType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // INFORMATIONBEFOREDIVE_TYPE_HXX
