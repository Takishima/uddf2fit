// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef CONTACT_TYPE_HXX
#define CONTACT_TYPE_HXX

#include "contactType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace streit
{
  class contactType: public ::xml_schema::type
  {
    public:
    // language
    //
    typedef ::xml_schema::string language_type;
    typedef ::xsd::cxx::tree::sequence< language_type > language_sequence;
    typedef language_sequence::iterator language_iterator;
    typedef language_sequence::const_iterator language_const_iterator;
    typedef ::xsd::cxx::tree::traits< language_type, char > language_traits;

    const language_sequence&
    language () const;

    language_sequence&
    language ();

    void
    language (const language_sequence& s);

    // phone
    //
    typedef ::xml_schema::string phone_type;
    typedef ::xsd::cxx::tree::sequence< phone_type > phone_sequence;
    typedef phone_sequence::iterator phone_iterator;
    typedef phone_sequence::const_iterator phone_const_iterator;
    typedef ::xsd::cxx::tree::traits< phone_type, char > phone_traits;

    const phone_sequence&
    phone () const;

    phone_sequence&
    phone ();

    void
    phone (const phone_sequence& s);

    // mobilephone
    //
    typedef ::xml_schema::string mobilephone_type;
    typedef ::xsd::cxx::tree::sequence< mobilephone_type > mobilephone_sequence;
    typedef mobilephone_sequence::iterator mobilephone_iterator;
    typedef mobilephone_sequence::const_iterator mobilephone_const_iterator;
    typedef ::xsd::cxx::tree::traits< mobilephone_type, char > mobilephone_traits;

    const mobilephone_sequence&
    mobilephone () const;

    mobilephone_sequence&
    mobilephone ();

    void
    mobilephone (const mobilephone_sequence& s);

    // fax
    //
    typedef ::xml_schema::string fax_type;
    typedef ::xsd::cxx::tree::sequence< fax_type > fax_sequence;
    typedef fax_sequence::iterator fax_iterator;
    typedef fax_sequence::const_iterator fax_const_iterator;
    typedef ::xsd::cxx::tree::traits< fax_type, char > fax_traits;

    const fax_sequence&
    fax () const;

    fax_sequence&
    fax ();

    void
    fax (const fax_sequence& s);

    // email
    //
    typedef ::xml_schema::string email_type;
    typedef ::xsd::cxx::tree::sequence< email_type > email_sequence;
    typedef email_sequence::iterator email_iterator;
    typedef email_sequence::const_iterator email_const_iterator;
    typedef ::xsd::cxx::tree::traits< email_type, char > email_traits;

    const email_sequence&
    email () const;

    email_sequence&
    email ();

    void
    email (const email_sequence& s);

    // homepage
    //
    typedef ::xml_schema::uri homepage_type;
    typedef ::xsd::cxx::tree::sequence< homepage_type > homepage_sequence;
    typedef homepage_sequence::iterator homepage_iterator;
    typedef homepage_sequence::const_iterator homepage_const_iterator;
    typedef ::xsd::cxx::tree::traits< homepage_type, char > homepage_traits;

    const homepage_sequence&
    homepage () const;

    homepage_sequence&
    homepage ();

    void
    homepage (const homepage_sequence& s);

    // Constructors.
    //
    contactType ();

    contactType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    contactType (const contactType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual contactType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    contactType&
    operator= (const contactType& x);

    virtual 
    ~contactType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    language_sequence language_;
    phone_sequence phone_;
    mobilephone_sequence mobilephone_;
    fax_sequence fax_;
    email_sequence email_;
    homepage_sequence homepage_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const contactType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CONTACT_TYPE_HXX
