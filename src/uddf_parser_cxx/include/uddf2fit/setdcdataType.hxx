// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef SETDCDATA_TYPE_HXX
#define SETDCDATA_TYPE_HXX

#include "setdcdataType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "dcalarmWithTimeType-fwd.hxx"

#include "dcbuddydataType-fwd.hxx"

#include "encapsulatedDateTimeType-fwd.hxx"

#include "dcdecomodelType-fwd.hxx"

#include "dcalarmWithDepthType-fwd.hxx"

#include "dcdivepo2alarmType-fwd.hxx"

#include "dcdivesitedataType-fwd.hxx"

#include "dcdivetimealarmType-fwd.hxx"

#include "dcendndtalarmType-fwd.hxx"

#include "dcgasdefinitionsdataType-fwd.hxx"

#include "markerType-fwd.hxx"

namespace streit
{
  class setdcdataType: public ::xml_schema::type
  {
    public:
    // setdcalarmtime
    //
    typedef ::streit::dcalarmWithTimeType setdcalarmtime_type;
    typedef ::xsd::cxx::tree::sequence< setdcalarmtime_type > setdcalarmtime_sequence;
    typedef setdcalarmtime_sequence::iterator setdcalarmtime_iterator;
    typedef setdcalarmtime_sequence::const_iterator setdcalarmtime_const_iterator;
    typedef ::xsd::cxx::tree::traits< setdcalarmtime_type, char > setdcalarmtime_traits;

    const setdcalarmtime_sequence&
    setdcalarmtime () const;

    setdcalarmtime_sequence&
    setdcalarmtime ();

    void
    setdcalarmtime (const setdcalarmtime_sequence& s);

    // setdcaltitude
    //
    typedef ::xml_schema::float_ setdcaltitude_type;
    typedef ::xsd::cxx::tree::optional< setdcaltitude_type > setdcaltitude_optional;
    typedef ::xsd::cxx::tree::traits< setdcaltitude_type, char > setdcaltitude_traits;

    const setdcaltitude_optional&
    setdcaltitude () const;

    setdcaltitude_optional&
    setdcaltitude ();

    void
    setdcaltitude (const setdcaltitude_type& x);

    void
    setdcaltitude (const setdcaltitude_optional& x);

    // setdcbuddydata
    //
    typedef ::streit::dcbuddydataType setdcbuddydata_type;
    typedef ::xsd::cxx::tree::optional< setdcbuddydata_type > setdcbuddydata_optional;
    typedef ::xsd::cxx::tree::traits< setdcbuddydata_type, char > setdcbuddydata_traits;

    const setdcbuddydata_optional&
    setdcbuddydata () const;

    setdcbuddydata_optional&
    setdcbuddydata ();

    void
    setdcbuddydata (const setdcbuddydata_type& x);

    void
    setdcbuddydata (const setdcbuddydata_optional& x);

    void
    setdcbuddydata (::std::unique_ptr< setdcbuddydata_type > p);

    // setdcdatetime
    //
    typedef ::streit::encapsulatedDateTimeType setdcdatetime_type;
    typedef ::xsd::cxx::tree::optional< setdcdatetime_type > setdcdatetime_optional;
    typedef ::xsd::cxx::tree::traits< setdcdatetime_type, char > setdcdatetime_traits;

    const setdcdatetime_optional&
    setdcdatetime () const;

    setdcdatetime_optional&
    setdcdatetime ();

    void
    setdcdatetime (const setdcdatetime_type& x);

    void
    setdcdatetime (const setdcdatetime_optional& x);

    void
    setdcdatetime (::std::unique_ptr< setdcdatetime_type > p);

    // setdcdecomodel
    //
    typedef ::streit::dcdecomodelType setdcdecomodel_type;
    typedef ::xsd::cxx::tree::optional< setdcdecomodel_type > setdcdecomodel_optional;
    typedef ::xsd::cxx::tree::traits< setdcdecomodel_type, char > setdcdecomodel_traits;

    const setdcdecomodel_optional&
    setdcdecomodel () const;

    setdcdecomodel_optional&
    setdcdecomodel ();

    void
    setdcdecomodel (const setdcdecomodel_type& x);

    void
    setdcdecomodel (const setdcdecomodel_optional& x);

    void
    setdcdecomodel (::std::unique_ptr< setdcdecomodel_type > p);

    // setdcdivedepthalarm
    //
    typedef ::streit::dcalarmWithDepthType setdcdivedepthalarm_type;
    typedef ::xsd::cxx::tree::sequence< setdcdivedepthalarm_type > setdcdivedepthalarm_sequence;
    typedef setdcdivedepthalarm_sequence::iterator setdcdivedepthalarm_iterator;
    typedef setdcdivedepthalarm_sequence::const_iterator setdcdivedepthalarm_const_iterator;
    typedef ::xsd::cxx::tree::traits< setdcdivedepthalarm_type, char > setdcdivedepthalarm_traits;

    const setdcdivedepthalarm_sequence&
    setdcdivedepthalarm () const;

    setdcdivedepthalarm_sequence&
    setdcdivedepthalarm ();

    void
    setdcdivedepthalarm (const setdcdivedepthalarm_sequence& s);

    // setdcdivepo2alarm
    //
    typedef ::streit::dcdivepo2alarmType setdcdivepo2alarm_type;
    typedef ::xsd::cxx::tree::sequence< setdcdivepo2alarm_type > setdcdivepo2alarm_sequence;
    typedef setdcdivepo2alarm_sequence::iterator setdcdivepo2alarm_iterator;
    typedef setdcdivepo2alarm_sequence::const_iterator setdcdivepo2alarm_const_iterator;
    typedef ::xsd::cxx::tree::traits< setdcdivepo2alarm_type, char > setdcdivepo2alarm_traits;

    const setdcdivepo2alarm_sequence&
    setdcdivepo2alarm () const;

    setdcdivepo2alarm_sequence&
    setdcdivepo2alarm ();

    void
    setdcdivepo2alarm (const setdcdivepo2alarm_sequence& s);

    // setdcdivesitedata
    //
    typedef ::streit::dcdivesitedataType setdcdivesitedata_type;
    typedef ::xsd::cxx::tree::optional< setdcdivesitedata_type > setdcdivesitedata_optional;
    typedef ::xsd::cxx::tree::traits< setdcdivesitedata_type, char > setdcdivesitedata_traits;

    const setdcdivesitedata_optional&
    setdcdivesitedata () const;

    setdcdivesitedata_optional&
    setdcdivesitedata ();

    void
    setdcdivesitedata (const setdcdivesitedata_type& x);

    void
    setdcdivesitedata (const setdcdivesitedata_optional& x);

    void
    setdcdivesitedata (::std::unique_ptr< setdcdivesitedata_type > p);

    // setdcdivetimealarm
    //
    typedef ::streit::dcdivetimealarmType setdcdivetimealarm_type;
    typedef ::xsd::cxx::tree::sequence< setdcdivetimealarm_type > setdcdivetimealarm_sequence;
    typedef setdcdivetimealarm_sequence::iterator setdcdivetimealarm_iterator;
    typedef setdcdivetimealarm_sequence::const_iterator setdcdivetimealarm_const_iterator;
    typedef ::xsd::cxx::tree::traits< setdcdivetimealarm_type, char > setdcdivetimealarm_traits;

    const setdcdivetimealarm_sequence&
    setdcdivetimealarm () const;

    setdcdivetimealarm_sequence&
    setdcdivetimealarm ();

    void
    setdcdivetimealarm (const setdcdivetimealarm_sequence& s);

    // setdcendndtalarm
    //
    typedef ::streit::dcendndtalarmType setdcendndtalarm_type;
    typedef ::xsd::cxx::tree::optional< setdcendndtalarm_type > setdcendndtalarm_optional;
    typedef ::xsd::cxx::tree::traits< setdcendndtalarm_type, char > setdcendndtalarm_traits;

    const setdcendndtalarm_optional&
    setdcendndtalarm () const;

    setdcendndtalarm_optional&
    setdcendndtalarm ();

    void
    setdcendndtalarm (const setdcendndtalarm_type& x);

    void
    setdcendndtalarm (const setdcendndtalarm_optional& x);

    void
    setdcendndtalarm (::std::unique_ptr< setdcendndtalarm_type > p);

    // setdcgasdefinitionsdata
    //
    typedef ::streit::dcgasdefinitionsdataType setdcgasdefinitionsdata_type;
    typedef ::xsd::cxx::tree::optional< setdcgasdefinitionsdata_type > setdcgasdefinitionsdata_optional;
    typedef ::xsd::cxx::tree::traits< setdcgasdefinitionsdata_type, char > setdcgasdefinitionsdata_traits;

    const setdcgasdefinitionsdata_optional&
    setdcgasdefinitionsdata () const;

    setdcgasdefinitionsdata_optional&
    setdcgasdefinitionsdata ();

    void
    setdcgasdefinitionsdata (const setdcgasdefinitionsdata_type& x);

    void
    setdcgasdefinitionsdata (const setdcgasdefinitionsdata_optional& x);

    void
    setdcgasdefinitionsdata (::std::unique_ptr< setdcgasdefinitionsdata_type > p);

    // setdcownerdata
    //
    typedef ::streit::markerType setdcownerdata_type;
    typedef ::xsd::cxx::tree::optional< setdcownerdata_type > setdcownerdata_optional;
    typedef ::xsd::cxx::tree::traits< setdcownerdata_type, char > setdcownerdata_traits;

    const setdcownerdata_optional&
    setdcownerdata () const;

    setdcownerdata_optional&
    setdcownerdata ();

    void
    setdcownerdata (const setdcownerdata_type& x);

    void
    setdcownerdata (const setdcownerdata_optional& x);

    void
    setdcownerdata (::std::unique_ptr< setdcownerdata_type > p);

    // setdcpassword
    //
    typedef ::xml_schema::string setdcpassword_type;
    typedef ::xsd::cxx::tree::optional< setdcpassword_type > setdcpassword_optional;
    typedef ::xsd::cxx::tree::traits< setdcpassword_type, char > setdcpassword_traits;

    const setdcpassword_optional&
    setdcpassword () const;

    setdcpassword_optional&
    setdcpassword ();

    void
    setdcpassword (const setdcpassword_type& x);

    void
    setdcpassword (const setdcpassword_optional& x);

    void
    setdcpassword (::std::unique_ptr< setdcpassword_type > p);

    // setdcgeneratordata
    //
    typedef ::streit::markerType setdcgeneratordata_type;
    typedef ::xsd::cxx::tree::optional< setdcgeneratordata_type > setdcgeneratordata_optional;
    typedef ::xsd::cxx::tree::traits< setdcgeneratordata_type, char > setdcgeneratordata_traits;

    const setdcgeneratordata_optional&
    setdcgeneratordata () const;

    setdcgeneratordata_optional&
    setdcgeneratordata ();

    void
    setdcgeneratordata (const setdcgeneratordata_type& x);

    void
    setdcgeneratordata (const setdcgeneratordata_optional& x);

    void
    setdcgeneratordata (::std::unique_ptr< setdcgeneratordata_type > p);

    // Constructors.
    //
    setdcdataType ();

    setdcdataType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    setdcdataType (const setdcdataType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual setdcdataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    setdcdataType&
    operator= (const setdcdataType& x);

    virtual 
    ~setdcdataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    setdcalarmtime_sequence setdcalarmtime_;
    setdcaltitude_optional setdcaltitude_;
    setdcbuddydata_optional setdcbuddydata_;
    setdcdatetime_optional setdcdatetime_;
    setdcdecomodel_optional setdcdecomodel_;
    setdcdivedepthalarm_sequence setdcdivedepthalarm_;
    setdcdivepo2alarm_sequence setdcdivepo2alarm_;
    setdcdivesitedata_optional setdcdivesitedata_;
    setdcdivetimealarm_sequence setdcdivetimealarm_;
    setdcendndtalarm_optional setdcendndtalarm_;
    setdcgasdefinitionsdata_optional setdcgasdefinitionsdata_;
    setdcownerdata_optional setdcownerdata_;
    setdcpassword_optional setdcpassword_;
    setdcgeneratordata_optional setdcgeneratordata_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const setdcdataType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SETDCDATA_TYPE_HXX
