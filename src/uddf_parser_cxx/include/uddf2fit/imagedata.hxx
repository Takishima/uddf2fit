// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef IMAGEDATA_HXX
#define IMAGEDATA_HXX

#include "imagedata-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "meteringmethod-fwd.hxx"

namespace streit
{
  class imagedata: public ::xml_schema::type
  {
    public:
    // aperture
    //
    typedef ::xml_schema::float_ aperture_type;
    typedef ::xsd::cxx::tree::optional< aperture_type > aperture_optional;
    typedef ::xsd::cxx::tree::traits< aperture_type, char > aperture_traits;

    const aperture_optional&
    aperture () const;

    aperture_optional&
    aperture ();

    void
    aperture (const aperture_type& x);

    void
    aperture (const aperture_optional& x);

    // datetime
    //
    typedef ::xml_schema::date_time datetime_type;
    typedef ::xsd::cxx::tree::optional< datetime_type > datetime_optional;
    typedef ::xsd::cxx::tree::traits< datetime_type, char > datetime_traits;

    const datetime_optional&
    datetime () const;

    datetime_optional&
    datetime ();

    void
    datetime (const datetime_type& x);

    void
    datetime (const datetime_optional& x);

    void
    datetime (::std::unique_ptr< datetime_type > p);

    // exposurecompensation
    //
    typedef ::xml_schema::float_ exposurecompensation_type;
    typedef ::xsd::cxx::tree::optional< exposurecompensation_type > exposurecompensation_optional;
    typedef ::xsd::cxx::tree::traits< exposurecompensation_type, char > exposurecompensation_traits;

    const exposurecompensation_optional&
    exposurecompensation () const;

    exposurecompensation_optional&
    exposurecompensation ();

    void
    exposurecompensation (const exposurecompensation_type& x);

    void
    exposurecompensation (const exposurecompensation_optional& x);

    // filmspeed
    //
    typedef ::xml_schema::unsigned_int filmspeed_type;
    typedef ::xsd::cxx::tree::optional< filmspeed_type > filmspeed_optional;
    typedef ::xsd::cxx::tree::traits< filmspeed_type, char > filmspeed_traits;

    const filmspeed_optional&
    filmspeed () const;

    filmspeed_optional&
    filmspeed ();

    void
    filmspeed (const filmspeed_type& x);

    void
    filmspeed (const filmspeed_optional& x);

    // focallength
    //
    typedef ::xml_schema::float_ focallength_type;
    typedef ::xsd::cxx::tree::optional< focallength_type > focallength_optional;
    typedef ::xsd::cxx::tree::traits< focallength_type, char > focallength_traits;

    const focallength_optional&
    focallength () const;

    focallength_optional&
    focallength ();

    void
    focallength (const focallength_type& x);

    void
    focallength (const focallength_optional& x);

    // focusingdistance
    //
    typedef ::xml_schema::float_ focusingdistance_type;
    typedef ::xsd::cxx::tree::optional< focusingdistance_type > focusingdistance_optional;
    typedef ::xsd::cxx::tree::traits< focusingdistance_type, char > focusingdistance_traits;

    const focusingdistance_optional&
    focusingdistance () const;

    focusingdistance_optional&
    focusingdistance ();

    void
    focusingdistance (const focusingdistance_type& x);

    void
    focusingdistance (const focusingdistance_optional& x);

    // meteringmethod
    //
    typedef ::streit::meteringmethod meteringmethod_type;
    typedef ::xsd::cxx::tree::optional< meteringmethod_type > meteringmethod_optional;
    typedef ::xsd::cxx::tree::traits< meteringmethod_type, char > meteringmethod_traits;

    const meteringmethod_optional&
    meteringmethod () const;

    meteringmethod_optional&
    meteringmethod ();

    void
    meteringmethod (const meteringmethod_type& x);

    void
    meteringmethod (const meteringmethod_optional& x);

    void
    meteringmethod (::std::unique_ptr< meteringmethod_type > p);

    // shutterspeed
    //
    typedef ::xml_schema::float_ shutterspeed_type;
    typedef ::xsd::cxx::tree::optional< shutterspeed_type > shutterspeed_optional;
    typedef ::xsd::cxx::tree::traits< shutterspeed_type, char > shutterspeed_traits;

    const shutterspeed_optional&
    shutterspeed () const;

    shutterspeed_optional&
    shutterspeed ();

    void
    shutterspeed (const shutterspeed_type& x);

    void
    shutterspeed (const shutterspeed_optional& x);

    // Constructors.
    //
    imagedata ();

    imagedata (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    imagedata (const imagedata& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual imagedata*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    imagedata&
    operator= (const imagedata& x);

    virtual 
    ~imagedata ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    aperture_optional aperture_;
    datetime_optional datetime_;
    exposurecompensation_optional exposurecompensation_;
    filmspeed_optional filmspeed_;
    focallength_optional focallength_;
    focusingdistance_optional focusingdistance_;
    meteringmethod_optional meteringmethod_;
    shutterspeed_optional shutterspeed_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const imagedata&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // IMAGEDATA_HXX
