// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef BOTTOMTIMETABLE_TYPE_HXX
#define BOTTOMTIMETABLE_TYPE_HXX

#include "bottomtimetableType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "ID_TYPE.hxx"

#include "linkType-fwd.hxx"

#include "outputType-fwd.hxx"

#include "applicationdataType-fwd.hxx"

#include "bottomtimetablescopeType-fwd.hxx"

namespace streit
{
  class bottomtimetableType: public ::streit::ID_TYPE
  {
    public:
    // title
    //
    typedef ::xml_schema::type title_type;
    typedef ::xsd::cxx::tree::optional< title_type > title_optional;
    typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

    const title_optional&
    title () const;

    title_optional&
    title ();

    void
    title (const title_type& x);

    void
    title (const title_optional& x);

    void
    title (::std::unique_ptr< title_type > p);

    // link
    //
    typedef ::streit::linkType link_type;
    typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
    typedef link_sequence::iterator link_iterator;
    typedef link_sequence::const_iterator link_const_iterator;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_sequence&
    link () const;

    link_sequence&
    link ();

    void
    link (const link_sequence& s);

    // output
    //
    typedef ::streit::outputType output_type;
    typedef ::xsd::cxx::tree::optional< output_type > output_optional;
    typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

    const output_optional&
    output () const;

    output_optional&
    output ();

    void
    output (const output_type& x);

    void
    output (const output_optional& x);

    void
    output (::std::unique_ptr< output_type > p);

    // applicationdata
    //
    typedef ::streit::applicationdataType applicationdata_type;
    typedef ::xsd::cxx::tree::optional< applicationdata_type > applicationdata_optional;
    typedef ::xsd::cxx::tree::traits< applicationdata_type, char > applicationdata_traits;

    const applicationdata_optional&
    applicationdata () const;

    applicationdata_optional&
    applicationdata ();

    void
    applicationdata (const applicationdata_type& x);

    void
    applicationdata (const applicationdata_optional& x);

    void
    applicationdata (::std::unique_ptr< applicationdata_type > p);

    // bottomtimetablescope
    //
    typedef ::streit::bottomtimetablescopeType bottomtimetablescope_type;
    typedef ::xsd::cxx::tree::traits< bottomtimetablescope_type, char > bottomtimetablescope_traits;

    const bottomtimetablescope_type&
    bottomtimetablescope () const;

    bottomtimetablescope_type&
    bottomtimetablescope ();

    void
    bottomtimetablescope (const bottomtimetablescope_type& x);

    void
    bottomtimetablescope (::std::unique_ptr< bottomtimetablescope_type > p);

    // Constructors.
    //
    bottomtimetableType (const id_type&,
                         const bottomtimetablescope_type&);

    bottomtimetableType (const id_type&,
                         ::std::unique_ptr< bottomtimetablescope_type >);

    bottomtimetableType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    bottomtimetableType (const bottomtimetableType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual bottomtimetableType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    bottomtimetableType&
    operator= (const bottomtimetableType& x);

    virtual 
    ~bottomtimetableType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    title_optional title_;
    link_sequence link_;
    output_optional output_;
    applicationdata_optional applicationdata_;
    ::xsd::cxx::tree::one< bottomtimetablescope_type > bottomtimetablescope_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const bottomtimetableType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BOTTOMTIMETABLE_TYPE_HXX
