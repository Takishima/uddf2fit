// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

#ifndef TANKDATA_TYPE_HXX
#define TANKDATA_TYPE_HXX

#include "tankdataType-fwd.hxx"

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (LIBXSD_VERSION != 400002000000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "linkType-fwd.hxx"

namespace streit
{
  class tankdataType: public ::xml_schema::type
  {
    public:
    // link
    //
    typedef ::streit::linkType link_type;
    typedef ::xsd::cxx::tree::sequence< link_type > link_sequence;
    typedef link_sequence::iterator link_iterator;
    typedef link_sequence::const_iterator link_const_iterator;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_sequence&
    link () const;

    link_sequence&
    link ();

    void
    link (const link_sequence& s);

    // tankvolume
    //
    typedef ::xml_schema::float_ tankvolume_type;
    typedef ::xsd::cxx::tree::optional< tankvolume_type > tankvolume_optional;
    typedef ::xsd::cxx::tree::traits< tankvolume_type, char > tankvolume_traits;

    const tankvolume_optional&
    tankvolume () const;

    tankvolume_optional&
    tankvolume ();

    void
    tankvolume (const tankvolume_type& x);

    void
    tankvolume (const tankvolume_optional& x);

    // tankpressurebegin
    //
    typedef ::xml_schema::float_ tankpressurebegin_type;
    typedef ::xsd::cxx::tree::traits< tankpressurebegin_type, char > tankpressurebegin_traits;

    const tankpressurebegin_type&
    tankpressurebegin () const;

    tankpressurebegin_type&
    tankpressurebegin ();

    void
    tankpressurebegin (const tankpressurebegin_type& x);

    // tankpressureend
    //
    typedef ::xml_schema::float_ tankpressureend_type;
    typedef ::xsd::cxx::tree::optional< tankpressureend_type > tankpressureend_optional;
    typedef ::xsd::cxx::tree::traits< tankpressureend_type, char > tankpressureend_traits;

    const tankpressureend_optional&
    tankpressureend () const;

    tankpressureend_optional&
    tankpressureend ();

    void
    tankpressureend (const tankpressureend_type& x);

    void
    tankpressureend (const tankpressureend_optional& x);

    // breathingconsumptionvolume
    //
    typedef ::xml_schema::float_ breathingconsumptionvolume_type;
    typedef ::xsd::cxx::tree::optional< breathingconsumptionvolume_type > breathingconsumptionvolume_optional;
    typedef ::xsd::cxx::tree::traits< breathingconsumptionvolume_type, char > breathingconsumptionvolume_traits;

    const breathingconsumptionvolume_optional&
    breathingconsumptionvolume () const;

    breathingconsumptionvolume_optional&
    breathingconsumptionvolume ();

    void
    breathingconsumptionvolume (const breathingconsumptionvolume_type& x);

    void
    breathingconsumptionvolume (const breathingconsumptionvolume_optional& x);

    // Constructors.
    //
    tankdataType (const tankpressurebegin_type&);

    tankdataType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    tankdataType (const tankdataType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual tankdataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    tankdataType&
    operator= (const tankdataType& x);

    virtual 
    ~tankdataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    link_sequence link_;
    tankvolume_optional tankvolume_;
    ::xsd::cxx::tree::one< tankpressurebegin_type > tankpressurebegin_;
    tankpressureend_optional tankpressureend_;
    breathingconsumptionvolume_optional breathingconsumptionvolume_;
  };
}

#include <iosfwd>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream&, const tankdataType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // TANKDATA_TYPE_HXX
