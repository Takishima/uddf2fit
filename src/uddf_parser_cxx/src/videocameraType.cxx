// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "videocameraType.hxx"

#include "ID.hxx"

#include "equipmentPieceType.hxx"

namespace streit
{
  // videocameraType
  //

  const videocameraType::body_optional& videocameraType::
  body () const
  {
    return this->body_;
  }

  videocameraType::body_optional& videocameraType::
  body ()
  {
    return this->body_;
  }

  void videocameraType::
  body (const body_type& x)
  {
    this->body_.set (x);
  }

  void videocameraType::
  body (const body_optional& x)
  {
    this->body_ = x;
  }

  void videocameraType::
  body (::std::unique_ptr< body_type > x)
  {
    this->body_.set (std::move (x));
  }

  const videocameraType::lens_optional& videocameraType::
  lens () const
  {
    return this->lens_;
  }

  videocameraType::lens_optional& videocameraType::
  lens ()
  {
    return this->lens_;
  }

  void videocameraType::
  lens (const lens_type& x)
  {
    this->lens_.set (x);
  }

  void videocameraType::
  lens (const lens_optional& x)
  {
    this->lens_ = x;
  }

  void videocameraType::
  lens (::std::unique_ptr< lens_type > x)
  {
    this->lens_.set (std::move (x));
  }

  const videocameraType::housing_optional& videocameraType::
  housing () const
  {
    return this->housing_;
  }

  videocameraType::housing_optional& videocameraType::
  housing ()
  {
    return this->housing_;
  }

  void videocameraType::
  housing (const housing_type& x)
  {
    this->housing_.set (x);
  }

  void videocameraType::
  housing (const housing_optional& x)
  {
    this->housing_ = x;
  }

  void videocameraType::
  housing (::std::unique_ptr< housing_type > x)
  {
    this->housing_.set (std::move (x));
  }

  const videocameraType::light_optional& videocameraType::
  light () const
  {
    return this->light_;
  }

  videocameraType::light_optional& videocameraType::
  light ()
  {
    return this->light_;
  }

  void videocameraType::
  light (const light_type& x)
  {
    this->light_.set (x);
  }

  void videocameraType::
  light (const light_optional& x)
  {
    this->light_ = x;
  }

  void videocameraType::
  light (::std::unique_ptr< light_type > x)
  {
    this->light_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // videocameraType
  //

  videocameraType::
  videocameraType (const id_type& id)
  : ::streit::ID_TYPE (id),
    body_ (this),
    lens_ (this),
    housing_ (this),
    light_ (this)
  {
  }

  videocameraType::
  videocameraType (const videocameraType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::streit::ID_TYPE (x, f, c),
    body_ (x.body_, f, this),
    lens_ (x.lens_, f, this),
    housing_ (x.housing_, f, this),
    light_ (x.light_, f, this)
  {
  }

  videocameraType::
  videocameraType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::streit::ID_TYPE (e, f | ::xml_schema::flags::base, c),
    body_ (this),
    lens_ (this),
    housing_ (this),
    light_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void videocameraType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::ID_TYPE::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // body
      //
      if (n.name () == "body" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< body_type > r (
          body_traits::create (i, f, this));

        if (!this->body_)
        {
          this->body_.set (::std::move (r));
          continue;
        }
      }

      // lens
      //
      if (n.name () == "lens" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< lens_type > r (
          lens_traits::create (i, f, this));

        if (!this->lens_)
        {
          this->lens_.set (::std::move (r));
          continue;
        }
      }

      // housing
      //
      if (n.name () == "housing" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< housing_type > r (
          housing_traits::create (i, f, this));

        if (!this->housing_)
        {
          this->housing_.set (::std::move (r));
          continue;
        }
      }

      // light
      //
      if (n.name () == "light" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< light_type > r (
          light_traits::create (i, f, this));

        if (!this->light_)
        {
          this->light_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  videocameraType* videocameraType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class videocameraType (*this, f, c);
  }

  videocameraType& videocameraType::
  operator= (const videocameraType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::ID_TYPE& > (*this) = x;
      this->body_ = x.body_;
      this->lens_ = x.lens_;
      this->housing_ = x.housing_;
      this->light_ = x.light_;
    }

    return *this;
  }

  videocameraType::
  ~videocameraType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const videocameraType& i)
  {
    o << static_cast< const ::streit::ID_TYPE& > (i);

    if (i.body ())
    {
      o << ::std::endl << "body: " << *i.body ();
    }

    if (i.lens ())
    {
      o << ::std::endl << "lens: " << *i.lens ();
    }

    if (i.housing ())
    {
      o << ::std::endl << "housing: " << *i.housing ();
    }

    if (i.light ())
    {
      o << ::std::endl << "light: " << *i.light ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

