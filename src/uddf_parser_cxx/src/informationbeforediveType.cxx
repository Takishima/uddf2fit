// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "informationbeforediveType.hxx"

#include "linkType.hxx"

#include "surfaceintervalType.hxx"

#include "equipmentused.hxx"

#include "apparatus.hxx"

#include "platform.hxx"

#include "purpose.hxx"

#include "stateofrestbeforedive.hxx"

#include "alcoholbeforedive.hxx"

#include "medicalbeforedive.hxx"

#include "nosuit.hxx"

#include "priceType.hxx"

#include "inputprofileType.hxx"

#include "samplesType.hxx"

namespace streit
{
  // informationbeforediveType
  //

  const informationbeforediveType::link_sequence& informationbeforediveType::
  link () const
  {
    return this->link_;
  }

  informationbeforediveType::link_sequence& informationbeforediveType::
  link ()
  {
    return this->link_;
  }

  void informationbeforediveType::
  link (const link_sequence& s)
  {
    this->link_ = s;
  }

  const informationbeforediveType::divenumber_optional& informationbeforediveType::
  divenumber () const
  {
    return this->divenumber_;
  }

  informationbeforediveType::divenumber_optional& informationbeforediveType::
  divenumber ()
  {
    return this->divenumber_;
  }

  void informationbeforediveType::
  divenumber (const divenumber_type& x)
  {
    this->divenumber_.set (x);
  }

  void informationbeforediveType::
  divenumber (const divenumber_optional& x)
  {
    this->divenumber_ = x;
  }

  const informationbeforediveType::divenumberofday_optional& informationbeforediveType::
  divenumberofday () const
  {
    return this->divenumberofday_;
  }

  informationbeforediveType::divenumberofday_optional& informationbeforediveType::
  divenumberofday ()
  {
    return this->divenumberofday_;
  }

  void informationbeforediveType::
  divenumberofday (const divenumberofday_type& x)
  {
    this->divenumberofday_.set (x);
  }

  void informationbeforediveType::
  divenumberofday (const divenumberofday_optional& x)
  {
    this->divenumberofday_ = x;
  }

  const informationbeforediveType::internaldivenumber_optional& informationbeforediveType::
  internaldivenumber () const
  {
    return this->internaldivenumber_;
  }

  informationbeforediveType::internaldivenumber_optional& informationbeforediveType::
  internaldivenumber ()
  {
    return this->internaldivenumber_;
  }

  void informationbeforediveType::
  internaldivenumber (const internaldivenumber_type& x)
  {
    this->internaldivenumber_.set (x);
  }

  void informationbeforediveType::
  internaldivenumber (const internaldivenumber_optional& x)
  {
    this->internaldivenumber_ = x;
  }

  const informationbeforediveType::datetime_type& informationbeforediveType::
  datetime () const
  {
    return this->datetime_.get ();
  }

  informationbeforediveType::datetime_type& informationbeforediveType::
  datetime ()
  {
    return this->datetime_.get ();
  }

  void informationbeforediveType::
  datetime (const datetime_type& x)
  {
    this->datetime_.set (x);
  }

  void informationbeforediveType::
  datetime (::std::unique_ptr< datetime_type > x)
  {
    this->datetime_.set (std::move (x));
  }

  const informationbeforediveType::airtemperature_optional& informationbeforediveType::
  airtemperature () const
  {
    return this->airtemperature_;
  }

  informationbeforediveType::airtemperature_optional& informationbeforediveType::
  airtemperature ()
  {
    return this->airtemperature_;
  }

  void informationbeforediveType::
  airtemperature (const airtemperature_type& x)
  {
    this->airtemperature_.set (x);
  }

  void informationbeforediveType::
  airtemperature (const airtemperature_optional& x)
  {
    this->airtemperature_ = x;
  }

  const informationbeforediveType::surfaceintervalbeforedive_optional& informationbeforediveType::
  surfaceintervalbeforedive () const
  {
    return this->surfaceintervalbeforedive_;
  }

  informationbeforediveType::surfaceintervalbeforedive_optional& informationbeforediveType::
  surfaceintervalbeforedive ()
  {
    return this->surfaceintervalbeforedive_;
  }

  void informationbeforediveType::
  surfaceintervalbeforedive (const surfaceintervalbeforedive_type& x)
  {
    this->surfaceintervalbeforedive_.set (x);
  }

  void informationbeforediveType::
  surfaceintervalbeforedive (const surfaceintervalbeforedive_optional& x)
  {
    this->surfaceintervalbeforedive_ = x;
  }

  void informationbeforediveType::
  surfaceintervalbeforedive (::std::unique_ptr< surfaceintervalbeforedive_type > x)
  {
    this->surfaceintervalbeforedive_.set (std::move (x));
  }

  const informationbeforediveType::altitude_optional& informationbeforediveType::
  altitude () const
  {
    return this->altitude_;
  }

  informationbeforediveType::altitude_optional& informationbeforediveType::
  altitude ()
  {
    return this->altitude_;
  }

  void informationbeforediveType::
  altitude (const altitude_type& x)
  {
    this->altitude_.set (x);
  }

  void informationbeforediveType::
  altitude (const altitude_optional& x)
  {
    this->altitude_ = x;
  }

  const informationbeforediveType::equipmentused_optional& informationbeforediveType::
  equipmentused () const
  {
    return this->equipmentused_;
  }

  informationbeforediveType::equipmentused_optional& informationbeforediveType::
  equipmentused ()
  {
    return this->equipmentused_;
  }

  void informationbeforediveType::
  equipmentused (const equipmentused_type& x)
  {
    this->equipmentused_.set (x);
  }

  void informationbeforediveType::
  equipmentused (const equipmentused_optional& x)
  {
    this->equipmentused_ = x;
  }

  void informationbeforediveType::
  equipmentused (::std::unique_ptr< equipmentused_type > x)
  {
    this->equipmentused_.set (std::move (x));
  }

  const informationbeforediveType::apparatus_optional& informationbeforediveType::
  apparatus () const
  {
    return this->apparatus_;
  }

  informationbeforediveType::apparatus_optional& informationbeforediveType::
  apparatus ()
  {
    return this->apparatus_;
  }

  void informationbeforediveType::
  apparatus (const apparatus_type& x)
  {
    this->apparatus_.set (x);
  }

  void informationbeforediveType::
  apparatus (const apparatus_optional& x)
  {
    this->apparatus_ = x;
  }

  void informationbeforediveType::
  apparatus (::std::unique_ptr< apparatus_type > x)
  {
    this->apparatus_.set (std::move (x));
  }

  const informationbeforediveType::platform_optional& informationbeforediveType::
  platform () const
  {
    return this->platform_;
  }

  informationbeforediveType::platform_optional& informationbeforediveType::
  platform ()
  {
    return this->platform_;
  }

  void informationbeforediveType::
  platform (const platform_type& x)
  {
    this->platform_.set (x);
  }

  void informationbeforediveType::
  platform (const platform_optional& x)
  {
    this->platform_ = x;
  }

  void informationbeforediveType::
  platform (::std::unique_ptr< platform_type > x)
  {
    this->platform_.set (std::move (x));
  }

  const informationbeforediveType::purpose_optional& informationbeforediveType::
  purpose () const
  {
    return this->purpose_;
  }

  informationbeforediveType::purpose_optional& informationbeforediveType::
  purpose ()
  {
    return this->purpose_;
  }

  void informationbeforediveType::
  purpose (const purpose_type& x)
  {
    this->purpose_.set (x);
  }

  void informationbeforediveType::
  purpose (const purpose_optional& x)
  {
    this->purpose_ = x;
  }

  void informationbeforediveType::
  purpose (::std::unique_ptr< purpose_type > x)
  {
    this->purpose_.set (std::move (x));
  }

  const informationbeforediveType::stateofrestbeforedive_optional& informationbeforediveType::
  stateofrestbeforedive () const
  {
    return this->stateofrestbeforedive_;
  }

  informationbeforediveType::stateofrestbeforedive_optional& informationbeforediveType::
  stateofrestbeforedive ()
  {
    return this->stateofrestbeforedive_;
  }

  void informationbeforediveType::
  stateofrestbeforedive (const stateofrestbeforedive_type& x)
  {
    this->stateofrestbeforedive_.set (x);
  }

  void informationbeforediveType::
  stateofrestbeforedive (const stateofrestbeforedive_optional& x)
  {
    this->stateofrestbeforedive_ = x;
  }

  void informationbeforediveType::
  stateofrestbeforedive (::std::unique_ptr< stateofrestbeforedive_type > x)
  {
    this->stateofrestbeforedive_.set (std::move (x));
  }

  const informationbeforediveType::tripmembership_optional& informationbeforediveType::
  tripmembership () const
  {
    return this->tripmembership_;
  }

  informationbeforediveType::tripmembership_optional& informationbeforediveType::
  tripmembership ()
  {
    return this->tripmembership_;
  }

  void informationbeforediveType::
  tripmembership (const tripmembership_type& x)
  {
    this->tripmembership_.set (x);
  }

  void informationbeforediveType::
  tripmembership (const tripmembership_optional& x)
  {
    this->tripmembership_ = x;
  }

  void informationbeforediveType::
  tripmembership (::std::unique_ptr< tripmembership_type > x)
  {
    this->tripmembership_.set (std::move (x));
  }

  const informationbeforediveType::alcoholbeforedive_optional& informationbeforediveType::
  alcoholbeforedive () const
  {
    return this->alcoholbeforedive_;
  }

  informationbeforediveType::alcoholbeforedive_optional& informationbeforediveType::
  alcoholbeforedive ()
  {
    return this->alcoholbeforedive_;
  }

  void informationbeforediveType::
  alcoholbeforedive (const alcoholbeforedive_type& x)
  {
    this->alcoholbeforedive_.set (x);
  }

  void informationbeforediveType::
  alcoholbeforedive (const alcoholbeforedive_optional& x)
  {
    this->alcoholbeforedive_ = x;
  }

  void informationbeforediveType::
  alcoholbeforedive (::std::unique_ptr< alcoholbeforedive_type > x)
  {
    this->alcoholbeforedive_.set (std::move (x));
  }

  const informationbeforediveType::medicalbeforedive_optional& informationbeforediveType::
  medicalbeforedive () const
  {
    return this->medicalbeforedive_;
  }

  informationbeforediveType::medicalbeforedive_optional& informationbeforediveType::
  medicalbeforedive ()
  {
    return this->medicalbeforedive_;
  }

  void informationbeforediveType::
  medicalbeforedive (const medicalbeforedive_type& x)
  {
    this->medicalbeforedive_.set (x);
  }

  void informationbeforediveType::
  medicalbeforedive (const medicalbeforedive_optional& x)
  {
    this->medicalbeforedive_ = x;
  }

  void informationbeforediveType::
  medicalbeforedive (::std::unique_ptr< medicalbeforedive_type > x)
  {
    this->medicalbeforedive_.set (std::move (x));
  }

  const informationbeforediveType::nosuit_optional& informationbeforediveType::
  nosuit () const
  {
    return this->nosuit_;
  }

  informationbeforediveType::nosuit_optional& informationbeforediveType::
  nosuit ()
  {
    return this->nosuit_;
  }

  void informationbeforediveType::
  nosuit (const nosuit_type& x)
  {
    this->nosuit_.set (x);
  }

  void informationbeforediveType::
  nosuit (const nosuit_optional& x)
  {
    this->nosuit_ = x;
  }

  void informationbeforediveType::
  nosuit (::std::unique_ptr< nosuit_type > x)
  {
    this->nosuit_.set (std::move (x));
  }

  const informationbeforediveType::price_optional& informationbeforediveType::
  price () const
  {
    return this->price_;
  }

  informationbeforediveType::price_optional& informationbeforediveType::
  price ()
  {
    return this->price_;
  }

  void informationbeforediveType::
  price (const price_type& x)
  {
    this->price_.set (x);
  }

  void informationbeforediveType::
  price (const price_optional& x)
  {
    this->price_ = x;
  }

  void informationbeforediveType::
  price (::std::unique_ptr< price_type > x)
  {
    this->price_.set (std::move (x));
  }

  const informationbeforediveType::inputprofile_optional& informationbeforediveType::
  inputprofile () const
  {
    return this->inputprofile_;
  }

  informationbeforediveType::inputprofile_optional& informationbeforediveType::
  inputprofile ()
  {
    return this->inputprofile_;
  }

  void informationbeforediveType::
  inputprofile (const inputprofile_type& x)
  {
    this->inputprofile_.set (x);
  }

  void informationbeforediveType::
  inputprofile (const inputprofile_optional& x)
  {
    this->inputprofile_ = x;
  }

  void informationbeforediveType::
  inputprofile (::std::unique_ptr< inputprofile_type > x)
  {
    this->inputprofile_.set (std::move (x));
  }

  const informationbeforediveType::plannedprofile_optional& informationbeforediveType::
  plannedprofile () const
  {
    return this->plannedprofile_;
  }

  informationbeforediveType::plannedprofile_optional& informationbeforediveType::
  plannedprofile ()
  {
    return this->plannedprofile_;
  }

  void informationbeforediveType::
  plannedprofile (const plannedprofile_type& x)
  {
    this->plannedprofile_.set (x);
  }

  void informationbeforediveType::
  plannedprofile (const plannedprofile_optional& x)
  {
    this->plannedprofile_ = x;
  }

  void informationbeforediveType::
  plannedprofile (::std::unique_ptr< plannedprofile_type > x)
  {
    this->plannedprofile_.set (std::move (x));
  }

  const informationbeforediveType::surfacepressure_optional& informationbeforediveType::
  surfacepressure () const
  {
    return this->surfacepressure_;
  }

  informationbeforediveType::surfacepressure_optional& informationbeforediveType::
  surfacepressure ()
  {
    return this->surfacepressure_;
  }

  void informationbeforediveType::
  surfacepressure (const surfacepressure_type& x)
  {
    this->surfacepressure_.set (x);
  }

  void informationbeforediveType::
  surfacepressure (const surfacepressure_optional& x)
  {
    this->surfacepressure_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // informationbeforediveType
  //

  informationbeforediveType::
  informationbeforediveType (const datetime_type& datetime)
  : ::xml_schema::type (),
    link_ (this),
    divenumber_ (this),
    divenumberofday_ (this),
    internaldivenumber_ (this),
    datetime_ (datetime, this),
    airtemperature_ (this),
    surfaceintervalbeforedive_ (this),
    altitude_ (this),
    equipmentused_ (this),
    apparatus_ (this),
    platform_ (this),
    purpose_ (this),
    stateofrestbeforedive_ (this),
    tripmembership_ (this),
    alcoholbeforedive_ (this),
    medicalbeforedive_ (this),
    nosuit_ (this),
    price_ (this),
    inputprofile_ (this),
    plannedprofile_ (this),
    surfacepressure_ (this)
  {
  }

  informationbeforediveType::
  informationbeforediveType (const informationbeforediveType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    link_ (x.link_, f, this),
    divenumber_ (x.divenumber_, f, this),
    divenumberofday_ (x.divenumberofday_, f, this),
    internaldivenumber_ (x.internaldivenumber_, f, this),
    datetime_ (x.datetime_, f, this),
    airtemperature_ (x.airtemperature_, f, this),
    surfaceintervalbeforedive_ (x.surfaceintervalbeforedive_, f, this),
    altitude_ (x.altitude_, f, this),
    equipmentused_ (x.equipmentused_, f, this),
    apparatus_ (x.apparatus_, f, this),
    platform_ (x.platform_, f, this),
    purpose_ (x.purpose_, f, this),
    stateofrestbeforedive_ (x.stateofrestbeforedive_, f, this),
    tripmembership_ (x.tripmembership_, f, this),
    alcoholbeforedive_ (x.alcoholbeforedive_, f, this),
    medicalbeforedive_ (x.medicalbeforedive_, f, this),
    nosuit_ (x.nosuit_, f, this),
    price_ (x.price_, f, this),
    inputprofile_ (x.inputprofile_, f, this),
    plannedprofile_ (x.plannedprofile_, f, this),
    surfacepressure_ (x.surfacepressure_, f, this)
  {
  }

  informationbeforediveType::
  informationbeforediveType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    link_ (this),
    divenumber_ (this),
    divenumberofday_ (this),
    internaldivenumber_ (this),
    datetime_ (this),
    airtemperature_ (this),
    surfaceintervalbeforedive_ (this),
    altitude_ (this),
    equipmentused_ (this),
    apparatus_ (this),
    platform_ (this),
    purpose_ (this),
    stateofrestbeforedive_ (this),
    tripmembership_ (this),
    alcoholbeforedive_ (this),
    medicalbeforedive_ (this),
    nosuit_ (this),
    price_ (this),
    inputprofile_ (this),
    plannedprofile_ (this),
    surfacepressure_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void informationbeforediveType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // link
      //
      if (n.name () == "link" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< link_type > r (
          link_traits::create (i, f, this));

        this->link_.push_back (::std::move (r));
        continue;
      }

      // divenumber
      //
      if (n.name () == "divenumber" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->divenumber_)
        {
          this->divenumber_.set (divenumber_traits::create (i, f, this));
          continue;
        }
      }

      // divenumberofday
      //
      if (n.name () == "divenumberofday" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->divenumberofday_)
        {
          this->divenumberofday_.set (divenumberofday_traits::create (i, f, this));
          continue;
        }
      }

      // internaldivenumber
      //
      if (n.name () == "internaldivenumber" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->internaldivenumber_)
        {
          this->internaldivenumber_.set (internaldivenumber_traits::create (i, f, this));
          continue;
        }
      }

      // datetime
      //
      if (n.name () == "datetime" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< datetime_type > r (
          datetime_traits::create (i, f, this));

        if (!datetime_.present ())
        {
          this->datetime_.set (::std::move (r));
          continue;
        }
      }

      // airtemperature
      //
      if (n.name () == "airtemperature" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->airtemperature_)
        {
          this->airtemperature_.set (airtemperature_traits::create (i, f, this));
          continue;
        }
      }

      // surfaceintervalbeforedive
      //
      if (n.name () == "surfaceintervalbeforedive" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< surfaceintervalbeforedive_type > r (
          surfaceintervalbeforedive_traits::create (i, f, this));

        if (!this->surfaceintervalbeforedive_)
        {
          this->surfaceintervalbeforedive_.set (::std::move (r));
          continue;
        }
      }

      // altitude
      //
      if (n.name () == "altitude" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->altitude_)
        {
          this->altitude_.set (altitude_traits::create (i, f, this));
          continue;
        }
      }

      // equipmentused
      //
      if (n.name () == "equipmentused" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< equipmentused_type > r (
          equipmentused_traits::create (i, f, this));

        if (!this->equipmentused_)
        {
          this->equipmentused_.set (::std::move (r));
          continue;
        }
      }

      // apparatus
      //
      if (n.name () == "apparatus" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< apparatus_type > r (
          apparatus_traits::create (i, f, this));

        if (!this->apparatus_)
        {
          this->apparatus_.set (::std::move (r));
          continue;
        }
      }

      // platform
      //
      if (n.name () == "platform" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< platform_type > r (
          platform_traits::create (i, f, this));

        if (!this->platform_)
        {
          this->platform_.set (::std::move (r));
          continue;
        }
      }

      // purpose
      //
      if (n.name () == "purpose" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< purpose_type > r (
          purpose_traits::create (i, f, this));

        if (!this->purpose_)
        {
          this->purpose_.set (::std::move (r));
          continue;
        }
      }

      // stateofrestbeforedive
      //
      if (n.name () == "stateofrestbeforedive" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< stateofrestbeforedive_type > r (
          stateofrestbeforedive_traits::create (i, f, this));

        if (!this->stateofrestbeforedive_)
        {
          this->stateofrestbeforedive_.set (::std::move (r));
          continue;
        }
      }

      // tripmembership
      //
      if (n.name () == "tripmembership" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< tripmembership_type > r (
          tripmembership_traits::create (i, f, this));

        if (!this->tripmembership_)
        {
          this->tripmembership_.set (::std::move (r));
          continue;
        }
      }

      // alcoholbeforedive
      //
      if (n.name () == "alcoholbeforedive" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< alcoholbeforedive_type > r (
          alcoholbeforedive_traits::create (i, f, this));

        if (!this->alcoholbeforedive_)
        {
          this->alcoholbeforedive_.set (::std::move (r));
          continue;
        }
      }

      // medicalbeforedive
      //
      if (n.name () == "medicalbeforedive" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< medicalbeforedive_type > r (
          medicalbeforedive_traits::create (i, f, this));

        if (!this->medicalbeforedive_)
        {
          this->medicalbeforedive_.set (::std::move (r));
          continue;
        }
      }

      // nosuit
      //
      if (n.name () == "nosuit" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< nosuit_type > r (
          nosuit_traits::create (i, f, this));

        if (!this->nosuit_)
        {
          this->nosuit_.set (::std::move (r));
          continue;
        }
      }

      // price
      //
      if (n.name () == "price" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< price_type > r (
          price_traits::create (i, f, this));

        if (!this->price_)
        {
          this->price_.set (::std::move (r));
          continue;
        }
      }

      // inputprofile
      //
      if (n.name () == "inputprofile" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< inputprofile_type > r (
          inputprofile_traits::create (i, f, this));

        if (!this->inputprofile_)
        {
          this->inputprofile_.set (::std::move (r));
          continue;
        }
      }

      // plannedprofile
      //
      if (n.name () == "plannedprofile" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< plannedprofile_type > r (
          plannedprofile_traits::create (i, f, this));

        if (!this->plannedprofile_)
        {
          this->plannedprofile_.set (::std::move (r));
          continue;
        }
      }

      // surfacepressure
      //
      if (n.name () == "surfacepressure" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->surfacepressure_)
        {
          this->surfacepressure_.set (surfacepressure_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!datetime_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "datetime",
        "http://www.streit.cc/uddf/3.2/");
    }
  }

  informationbeforediveType* informationbeforediveType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class informationbeforediveType (*this, f, c);
  }

  informationbeforediveType& informationbeforediveType::
  operator= (const informationbeforediveType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->link_ = x.link_;
      this->divenumber_ = x.divenumber_;
      this->divenumberofday_ = x.divenumberofday_;
      this->internaldivenumber_ = x.internaldivenumber_;
      this->datetime_ = x.datetime_;
      this->airtemperature_ = x.airtemperature_;
      this->surfaceintervalbeforedive_ = x.surfaceintervalbeforedive_;
      this->altitude_ = x.altitude_;
      this->equipmentused_ = x.equipmentused_;
      this->apparatus_ = x.apparatus_;
      this->platform_ = x.platform_;
      this->purpose_ = x.purpose_;
      this->stateofrestbeforedive_ = x.stateofrestbeforedive_;
      this->tripmembership_ = x.tripmembership_;
      this->alcoholbeforedive_ = x.alcoholbeforedive_;
      this->medicalbeforedive_ = x.medicalbeforedive_;
      this->nosuit_ = x.nosuit_;
      this->price_ = x.price_;
      this->inputprofile_ = x.inputprofile_;
      this->plannedprofile_ = x.plannedprofile_;
      this->surfacepressure_ = x.surfacepressure_;
    }

    return *this;
  }

  informationbeforediveType::
  ~informationbeforediveType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const informationbeforediveType& i)
  {
    for (informationbeforediveType::link_const_iterator
         b (i.link ().begin ()), e (i.link ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "link: " << *b;
    }

    if (i.divenumber ())
    {
      o << ::std::endl << "divenumber: " << *i.divenumber ();
    }

    if (i.divenumberofday ())
    {
      o << ::std::endl << "divenumberofday: " << *i.divenumberofday ();
    }

    if (i.internaldivenumber ())
    {
      o << ::std::endl << "internaldivenumber: " << *i.internaldivenumber ();
    }

    o << ::std::endl << "datetime: " << i.datetime ();
    if (i.airtemperature ())
    {
      o << ::std::endl << "airtemperature: " << *i.airtemperature ();
    }

    if (i.surfaceintervalbeforedive ())
    {
      o << ::std::endl << "surfaceintervalbeforedive: " << *i.surfaceintervalbeforedive ();
    }

    if (i.altitude ())
    {
      o << ::std::endl << "altitude: " << *i.altitude ();
    }

    if (i.equipmentused ())
    {
      o << ::std::endl << "equipmentused: " << *i.equipmentused ();
    }

    if (i.apparatus ())
    {
      o << ::std::endl << "apparatus: " << *i.apparatus ();
    }

    if (i.platform ())
    {
      o << ::std::endl << "platform: " << *i.platform ();
    }

    if (i.purpose ())
    {
      o << ::std::endl << "purpose: " << *i.purpose ();
    }

    if (i.stateofrestbeforedive ())
    {
      o << ::std::endl << "stateofrestbeforedive: " << *i.stateofrestbeforedive ();
    }

    if (i.tripmembership ())
    {
      o << ::std::endl << "tripmembership: " << *i.tripmembership ();
    }

    if (i.alcoholbeforedive ())
    {
      o << ::std::endl << "alcoholbeforedive: " << *i.alcoholbeforedive ();
    }

    if (i.medicalbeforedive ())
    {
      o << ::std::endl << "medicalbeforedive: " << *i.medicalbeforedive ();
    }

    if (i.nosuit ())
    {
      o << ::std::endl << "nosuit: " << *i.nosuit ();
    }

    if (i.price ())
    {
      o << ::std::endl << "price: " << *i.price ();
    }

    if (i.inputprofile ())
    {
      o << ::std::endl << "inputprofile: " << *i.inputprofile ();
    }

    if (i.plannedprofile ())
    {
      o << ::std::endl << "plannedprofile: " << *i.plannedprofile ();
    }

    if (i.surfacepressure ())
    {
      o << ::std::endl << "surfacepressure: " << *i.surfacepressure ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

