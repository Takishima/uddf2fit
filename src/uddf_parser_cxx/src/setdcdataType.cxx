// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "setdcdataType.hxx"

#include "dcalarmWithTimeType.hxx"

#include "dcbuddydataType.hxx"

#include "encapsulatedDateTimeType.hxx"

#include "dcdecomodelType.hxx"

#include "dcalarmWithDepthType.hxx"

#include "dcdivepo2alarmType.hxx"

#include "dcdivesitedataType.hxx"

#include "dcdivetimealarmType.hxx"

#include "dcendndtalarmType.hxx"

#include "dcgasdefinitionsdataType.hxx"

#include "markerType.hxx"

namespace streit
{
  // setdcdataType
  //

  const setdcdataType::setdcalarmtime_sequence& setdcdataType::
  setdcalarmtime () const
  {
    return this->setdcalarmtime_;
  }

  setdcdataType::setdcalarmtime_sequence& setdcdataType::
  setdcalarmtime ()
  {
    return this->setdcalarmtime_;
  }

  void setdcdataType::
  setdcalarmtime (const setdcalarmtime_sequence& s)
  {
    this->setdcalarmtime_ = s;
  }

  const setdcdataType::setdcaltitude_optional& setdcdataType::
  setdcaltitude () const
  {
    return this->setdcaltitude_;
  }

  setdcdataType::setdcaltitude_optional& setdcdataType::
  setdcaltitude ()
  {
    return this->setdcaltitude_;
  }

  void setdcdataType::
  setdcaltitude (const setdcaltitude_type& x)
  {
    this->setdcaltitude_.set (x);
  }

  void setdcdataType::
  setdcaltitude (const setdcaltitude_optional& x)
  {
    this->setdcaltitude_ = x;
  }

  const setdcdataType::setdcbuddydata_optional& setdcdataType::
  setdcbuddydata () const
  {
    return this->setdcbuddydata_;
  }

  setdcdataType::setdcbuddydata_optional& setdcdataType::
  setdcbuddydata ()
  {
    return this->setdcbuddydata_;
  }

  void setdcdataType::
  setdcbuddydata (const setdcbuddydata_type& x)
  {
    this->setdcbuddydata_.set (x);
  }

  void setdcdataType::
  setdcbuddydata (const setdcbuddydata_optional& x)
  {
    this->setdcbuddydata_ = x;
  }

  void setdcdataType::
  setdcbuddydata (::std::unique_ptr< setdcbuddydata_type > x)
  {
    this->setdcbuddydata_.set (std::move (x));
  }

  const setdcdataType::setdcdatetime_optional& setdcdataType::
  setdcdatetime () const
  {
    return this->setdcdatetime_;
  }

  setdcdataType::setdcdatetime_optional& setdcdataType::
  setdcdatetime ()
  {
    return this->setdcdatetime_;
  }

  void setdcdataType::
  setdcdatetime (const setdcdatetime_type& x)
  {
    this->setdcdatetime_.set (x);
  }

  void setdcdataType::
  setdcdatetime (const setdcdatetime_optional& x)
  {
    this->setdcdatetime_ = x;
  }

  void setdcdataType::
  setdcdatetime (::std::unique_ptr< setdcdatetime_type > x)
  {
    this->setdcdatetime_.set (std::move (x));
  }

  const setdcdataType::setdcdecomodel_optional& setdcdataType::
  setdcdecomodel () const
  {
    return this->setdcdecomodel_;
  }

  setdcdataType::setdcdecomodel_optional& setdcdataType::
  setdcdecomodel ()
  {
    return this->setdcdecomodel_;
  }

  void setdcdataType::
  setdcdecomodel (const setdcdecomodel_type& x)
  {
    this->setdcdecomodel_.set (x);
  }

  void setdcdataType::
  setdcdecomodel (const setdcdecomodel_optional& x)
  {
    this->setdcdecomodel_ = x;
  }

  void setdcdataType::
  setdcdecomodel (::std::unique_ptr< setdcdecomodel_type > x)
  {
    this->setdcdecomodel_.set (std::move (x));
  }

  const setdcdataType::setdcdivedepthalarm_sequence& setdcdataType::
  setdcdivedepthalarm () const
  {
    return this->setdcdivedepthalarm_;
  }

  setdcdataType::setdcdivedepthalarm_sequence& setdcdataType::
  setdcdivedepthalarm ()
  {
    return this->setdcdivedepthalarm_;
  }

  void setdcdataType::
  setdcdivedepthalarm (const setdcdivedepthalarm_sequence& s)
  {
    this->setdcdivedepthalarm_ = s;
  }

  const setdcdataType::setdcdivepo2alarm_sequence& setdcdataType::
  setdcdivepo2alarm () const
  {
    return this->setdcdivepo2alarm_;
  }

  setdcdataType::setdcdivepo2alarm_sequence& setdcdataType::
  setdcdivepo2alarm ()
  {
    return this->setdcdivepo2alarm_;
  }

  void setdcdataType::
  setdcdivepo2alarm (const setdcdivepo2alarm_sequence& s)
  {
    this->setdcdivepo2alarm_ = s;
  }

  const setdcdataType::setdcdivesitedata_optional& setdcdataType::
  setdcdivesitedata () const
  {
    return this->setdcdivesitedata_;
  }

  setdcdataType::setdcdivesitedata_optional& setdcdataType::
  setdcdivesitedata ()
  {
    return this->setdcdivesitedata_;
  }

  void setdcdataType::
  setdcdivesitedata (const setdcdivesitedata_type& x)
  {
    this->setdcdivesitedata_.set (x);
  }

  void setdcdataType::
  setdcdivesitedata (const setdcdivesitedata_optional& x)
  {
    this->setdcdivesitedata_ = x;
  }

  void setdcdataType::
  setdcdivesitedata (::std::unique_ptr< setdcdivesitedata_type > x)
  {
    this->setdcdivesitedata_.set (std::move (x));
  }

  const setdcdataType::setdcdivetimealarm_sequence& setdcdataType::
  setdcdivetimealarm () const
  {
    return this->setdcdivetimealarm_;
  }

  setdcdataType::setdcdivetimealarm_sequence& setdcdataType::
  setdcdivetimealarm ()
  {
    return this->setdcdivetimealarm_;
  }

  void setdcdataType::
  setdcdivetimealarm (const setdcdivetimealarm_sequence& s)
  {
    this->setdcdivetimealarm_ = s;
  }

  const setdcdataType::setdcendndtalarm_optional& setdcdataType::
  setdcendndtalarm () const
  {
    return this->setdcendndtalarm_;
  }

  setdcdataType::setdcendndtalarm_optional& setdcdataType::
  setdcendndtalarm ()
  {
    return this->setdcendndtalarm_;
  }

  void setdcdataType::
  setdcendndtalarm (const setdcendndtalarm_type& x)
  {
    this->setdcendndtalarm_.set (x);
  }

  void setdcdataType::
  setdcendndtalarm (const setdcendndtalarm_optional& x)
  {
    this->setdcendndtalarm_ = x;
  }

  void setdcdataType::
  setdcendndtalarm (::std::unique_ptr< setdcendndtalarm_type > x)
  {
    this->setdcendndtalarm_.set (std::move (x));
  }

  const setdcdataType::setdcgasdefinitionsdata_optional& setdcdataType::
  setdcgasdefinitionsdata () const
  {
    return this->setdcgasdefinitionsdata_;
  }

  setdcdataType::setdcgasdefinitionsdata_optional& setdcdataType::
  setdcgasdefinitionsdata ()
  {
    return this->setdcgasdefinitionsdata_;
  }

  void setdcdataType::
  setdcgasdefinitionsdata (const setdcgasdefinitionsdata_type& x)
  {
    this->setdcgasdefinitionsdata_.set (x);
  }

  void setdcdataType::
  setdcgasdefinitionsdata (const setdcgasdefinitionsdata_optional& x)
  {
    this->setdcgasdefinitionsdata_ = x;
  }

  void setdcdataType::
  setdcgasdefinitionsdata (::std::unique_ptr< setdcgasdefinitionsdata_type > x)
  {
    this->setdcgasdefinitionsdata_.set (std::move (x));
  }

  const setdcdataType::setdcownerdata_optional& setdcdataType::
  setdcownerdata () const
  {
    return this->setdcownerdata_;
  }

  setdcdataType::setdcownerdata_optional& setdcdataType::
  setdcownerdata ()
  {
    return this->setdcownerdata_;
  }

  void setdcdataType::
  setdcownerdata (const setdcownerdata_type& x)
  {
    this->setdcownerdata_.set (x);
  }

  void setdcdataType::
  setdcownerdata (const setdcownerdata_optional& x)
  {
    this->setdcownerdata_ = x;
  }

  void setdcdataType::
  setdcownerdata (::std::unique_ptr< setdcownerdata_type > x)
  {
    this->setdcownerdata_.set (std::move (x));
  }

  const setdcdataType::setdcpassword_optional& setdcdataType::
  setdcpassword () const
  {
    return this->setdcpassword_;
  }

  setdcdataType::setdcpassword_optional& setdcdataType::
  setdcpassword ()
  {
    return this->setdcpassword_;
  }

  void setdcdataType::
  setdcpassword (const setdcpassword_type& x)
  {
    this->setdcpassword_.set (x);
  }

  void setdcdataType::
  setdcpassword (const setdcpassword_optional& x)
  {
    this->setdcpassword_ = x;
  }

  void setdcdataType::
  setdcpassword (::std::unique_ptr< setdcpassword_type > x)
  {
    this->setdcpassword_.set (std::move (x));
  }

  const setdcdataType::setdcgeneratordata_optional& setdcdataType::
  setdcgeneratordata () const
  {
    return this->setdcgeneratordata_;
  }

  setdcdataType::setdcgeneratordata_optional& setdcdataType::
  setdcgeneratordata ()
  {
    return this->setdcgeneratordata_;
  }

  void setdcdataType::
  setdcgeneratordata (const setdcgeneratordata_type& x)
  {
    this->setdcgeneratordata_.set (x);
  }

  void setdcdataType::
  setdcgeneratordata (const setdcgeneratordata_optional& x)
  {
    this->setdcgeneratordata_ = x;
  }

  void setdcdataType::
  setdcgeneratordata (::std::unique_ptr< setdcgeneratordata_type > x)
  {
    this->setdcgeneratordata_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // setdcdataType
  //

  setdcdataType::
  setdcdataType ()
  : ::xml_schema::type (),
    setdcalarmtime_ (this),
    setdcaltitude_ (this),
    setdcbuddydata_ (this),
    setdcdatetime_ (this),
    setdcdecomodel_ (this),
    setdcdivedepthalarm_ (this),
    setdcdivepo2alarm_ (this),
    setdcdivesitedata_ (this),
    setdcdivetimealarm_ (this),
    setdcendndtalarm_ (this),
    setdcgasdefinitionsdata_ (this),
    setdcownerdata_ (this),
    setdcpassword_ (this),
    setdcgeneratordata_ (this)
  {
  }

  setdcdataType::
  setdcdataType (const setdcdataType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    setdcalarmtime_ (x.setdcalarmtime_, f, this),
    setdcaltitude_ (x.setdcaltitude_, f, this),
    setdcbuddydata_ (x.setdcbuddydata_, f, this),
    setdcdatetime_ (x.setdcdatetime_, f, this),
    setdcdecomodel_ (x.setdcdecomodel_, f, this),
    setdcdivedepthalarm_ (x.setdcdivedepthalarm_, f, this),
    setdcdivepo2alarm_ (x.setdcdivepo2alarm_, f, this),
    setdcdivesitedata_ (x.setdcdivesitedata_, f, this),
    setdcdivetimealarm_ (x.setdcdivetimealarm_, f, this),
    setdcendndtalarm_ (x.setdcendndtalarm_, f, this),
    setdcgasdefinitionsdata_ (x.setdcgasdefinitionsdata_, f, this),
    setdcownerdata_ (x.setdcownerdata_, f, this),
    setdcpassword_ (x.setdcpassword_, f, this),
    setdcgeneratordata_ (x.setdcgeneratordata_, f, this)
  {
  }

  setdcdataType::
  setdcdataType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    setdcalarmtime_ (this),
    setdcaltitude_ (this),
    setdcbuddydata_ (this),
    setdcdatetime_ (this),
    setdcdecomodel_ (this),
    setdcdivedepthalarm_ (this),
    setdcdivepo2alarm_ (this),
    setdcdivesitedata_ (this),
    setdcdivetimealarm_ (this),
    setdcendndtalarm_ (this),
    setdcgasdefinitionsdata_ (this),
    setdcownerdata_ (this),
    setdcpassword_ (this),
    setdcgeneratordata_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void setdcdataType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // setdcalarmtime
      //
      if (n.name () == "setdcalarmtime" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcalarmtime_type > r (
          setdcalarmtime_traits::create (i, f, this));

        this->setdcalarmtime_.push_back (::std::move (r));
        continue;
      }

      // setdcaltitude
      //
      if (n.name () == "setdcaltitude" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->setdcaltitude_)
        {
          this->setdcaltitude_.set (setdcaltitude_traits::create (i, f, this));
          continue;
        }
      }

      // setdcbuddydata
      //
      if (n.name () == "setdcbuddydata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcbuddydata_type > r (
          setdcbuddydata_traits::create (i, f, this));

        if (!this->setdcbuddydata_)
        {
          this->setdcbuddydata_.set (::std::move (r));
          continue;
        }
      }

      // setdcdatetime
      //
      if (n.name () == "setdcdatetime" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcdatetime_type > r (
          setdcdatetime_traits::create (i, f, this));

        if (!this->setdcdatetime_)
        {
          this->setdcdatetime_.set (::std::move (r));
          continue;
        }
      }

      // setdcdecomodel
      //
      if (n.name () == "setdcdecomodel" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcdecomodel_type > r (
          setdcdecomodel_traits::create (i, f, this));

        if (!this->setdcdecomodel_)
        {
          this->setdcdecomodel_.set (::std::move (r));
          continue;
        }
      }

      // setdcdivedepthalarm
      //
      if (n.name () == "setdcdivedepthalarm" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcdivedepthalarm_type > r (
          setdcdivedepthalarm_traits::create (i, f, this));

        this->setdcdivedepthalarm_.push_back (::std::move (r));
        continue;
      }

      // setdcdivepo2alarm
      //
      if (n.name () == "setdcdivepo2alarm" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcdivepo2alarm_type > r (
          setdcdivepo2alarm_traits::create (i, f, this));

        this->setdcdivepo2alarm_.push_back (::std::move (r));
        continue;
      }

      // setdcdivesitedata
      //
      if (n.name () == "setdcdivesitedata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcdivesitedata_type > r (
          setdcdivesitedata_traits::create (i, f, this));

        if (!this->setdcdivesitedata_)
        {
          this->setdcdivesitedata_.set (::std::move (r));
          continue;
        }
      }

      // setdcdivetimealarm
      //
      if (n.name () == "setdcdivetimealarm" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcdivetimealarm_type > r (
          setdcdivetimealarm_traits::create (i, f, this));

        this->setdcdivetimealarm_.push_back (::std::move (r));
        continue;
      }

      // setdcendndtalarm
      //
      if (n.name () == "setdcendndtalarm" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcendndtalarm_type > r (
          setdcendndtalarm_traits::create (i, f, this));

        if (!this->setdcendndtalarm_)
        {
          this->setdcendndtalarm_.set (::std::move (r));
          continue;
        }
      }

      // setdcgasdefinitionsdata
      //
      if (n.name () == "setdcgasdefinitionsdata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcgasdefinitionsdata_type > r (
          setdcgasdefinitionsdata_traits::create (i, f, this));

        if (!this->setdcgasdefinitionsdata_)
        {
          this->setdcgasdefinitionsdata_.set (::std::move (r));
          continue;
        }
      }

      // setdcownerdata
      //
      if (n.name () == "setdcownerdata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcownerdata_type > r (
          setdcownerdata_traits::create (i, f, this));

        if (!this->setdcownerdata_)
        {
          this->setdcownerdata_.set (::std::move (r));
          continue;
        }
      }

      // setdcpassword
      //
      if (n.name () == "setdcpassword" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcpassword_type > r (
          setdcpassword_traits::create (i, f, this));

        if (!this->setdcpassword_)
        {
          this->setdcpassword_.set (::std::move (r));
          continue;
        }
      }

      // setdcgeneratordata
      //
      if (n.name () == "setdcgeneratordata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setdcgeneratordata_type > r (
          setdcgeneratordata_traits::create (i, f, this));

        if (!this->setdcgeneratordata_)
        {
          this->setdcgeneratordata_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  setdcdataType* setdcdataType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class setdcdataType (*this, f, c);
  }

  setdcdataType& setdcdataType::
  operator= (const setdcdataType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->setdcalarmtime_ = x.setdcalarmtime_;
      this->setdcaltitude_ = x.setdcaltitude_;
      this->setdcbuddydata_ = x.setdcbuddydata_;
      this->setdcdatetime_ = x.setdcdatetime_;
      this->setdcdecomodel_ = x.setdcdecomodel_;
      this->setdcdivedepthalarm_ = x.setdcdivedepthalarm_;
      this->setdcdivepo2alarm_ = x.setdcdivepo2alarm_;
      this->setdcdivesitedata_ = x.setdcdivesitedata_;
      this->setdcdivetimealarm_ = x.setdcdivetimealarm_;
      this->setdcendndtalarm_ = x.setdcendndtalarm_;
      this->setdcgasdefinitionsdata_ = x.setdcgasdefinitionsdata_;
      this->setdcownerdata_ = x.setdcownerdata_;
      this->setdcpassword_ = x.setdcpassword_;
      this->setdcgeneratordata_ = x.setdcgeneratordata_;
    }

    return *this;
  }

  setdcdataType::
  ~setdcdataType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const setdcdataType& i)
  {
    for (setdcdataType::setdcalarmtime_const_iterator
         b (i.setdcalarmtime ().begin ()), e (i.setdcalarmtime ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "setdcalarmtime: " << *b;
    }

    if (i.setdcaltitude ())
    {
      o << ::std::endl << "setdcaltitude: " << *i.setdcaltitude ();
    }

    if (i.setdcbuddydata ())
    {
      o << ::std::endl << "setdcbuddydata: " << *i.setdcbuddydata ();
    }

    if (i.setdcdatetime ())
    {
      o << ::std::endl << "setdcdatetime: " << *i.setdcdatetime ();
    }

    if (i.setdcdecomodel ())
    {
      o << ::std::endl << "setdcdecomodel: " << *i.setdcdecomodel ();
    }

    for (setdcdataType::setdcdivedepthalarm_const_iterator
         b (i.setdcdivedepthalarm ().begin ()), e (i.setdcdivedepthalarm ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "setdcdivedepthalarm: " << *b;
    }

    for (setdcdataType::setdcdivepo2alarm_const_iterator
         b (i.setdcdivepo2alarm ().begin ()), e (i.setdcdivepo2alarm ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "setdcdivepo2alarm: " << *b;
    }

    if (i.setdcdivesitedata ())
    {
      o << ::std::endl << "setdcdivesitedata: " << *i.setdcdivesitedata ();
    }

    for (setdcdataType::setdcdivetimealarm_const_iterator
         b (i.setdcdivetimealarm ().begin ()), e (i.setdcdivetimealarm ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "setdcdivetimealarm: " << *b;
    }

    if (i.setdcendndtalarm ())
    {
      o << ::std::endl << "setdcendndtalarm: " << *i.setdcendndtalarm ();
    }

    if (i.setdcgasdefinitionsdata ())
    {
      o << ::std::endl << "setdcgasdefinitionsdata: " << *i.setdcgasdefinitionsdata ();
    }

    if (i.setdcownerdata ())
    {
      o << ::std::endl << "setdcownerdata: " << *i.setdcownerdata ();
    }

    if (i.setdcpassword ())
    {
      o << ::std::endl << "setdcpassword: " << *i.setdcpassword ();
    }

    if (i.setdcgeneratordata ())
    {
      o << ::std::endl << "setdcgeneratordata: " << *i.setdcgeneratordata ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

