// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "decostop.hxx"

#include "kind.hxx"

namespace streit
{
  // decostop
  //

  const decostop::kind_type& decostop::
  kind () const
  {
    return this->kind_.get ();
  }

  decostop::kind_type& decostop::
  kind ()
  {
    return this->kind_.get ();
  }

  void decostop::
  kind (const kind_type& x)
  {
    this->kind_.set (x);
  }

  void decostop::
  kind (::std::unique_ptr< kind_type > x)
  {
    this->kind_.set (std::move (x));
  }

  const decostop::decodepth_type& decostop::
  decodepth () const
  {
    return this->decodepth_.get ();
  }

  decostop::decodepth_type& decostop::
  decodepth ()
  {
    return this->decodepth_.get ();
  }

  void decostop::
  decodepth (const decodepth_type& x)
  {
    this->decodepth_.set (x);
  }

  const decostop::duration_type& decostop::
  duration () const
  {
    return this->duration_.get ();
  }

  decostop::duration_type& decostop::
  duration ()
  {
    return this->duration_.get ();
  }

  void decostop::
  duration (const duration_type& x)
  {
    this->duration_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // decostop
  //

  decostop::
  decostop (const kind_type& kind,
            const decodepth_type& decodepth,
            const duration_type& duration)
  : ::xml_schema::type (),
    kind_ (kind, this),
    decodepth_ (decodepth, this),
    duration_ (duration, this)
  {
  }

  decostop::
  decostop (const decostop& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    kind_ (x.kind_, f, this),
    decodepth_ (x.decodepth_, f, this),
    duration_ (x.duration_, f, this)
  {
  }

  decostop::
  decostop (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    kind_ (this),
    decodepth_ (this),
    duration_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void decostop::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "kind" && n.namespace_ ().empty ())
      {
        this->kind_.set (kind_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "decodepth" && n.namespace_ ().empty ())
      {
        this->decodepth_.set (decodepth_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "duration" && n.namespace_ ().empty ())
      {
        this->duration_.set (duration_traits::create (i, f, this));
        continue;
      }
    }

    if (!kind_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "kind",
        "");
    }

    if (!decodepth_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "decodepth",
        "");
    }

    if (!duration_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "duration",
        "");
    }
  }

  decostop* decostop::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class decostop (*this, f, c);
  }

  decostop& decostop::
  operator= (const decostop& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->kind_ = x.kind_;
      this->decodepth_ = x.decodepth_;
      this->duration_ = x.duration_;
    }

    return *this;
  }

  decostop::
  ~decostop ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const decostop& i)
  {
    o << ::std::endl << "kind: " << i.kind ();
    o << ::std::endl << "decodepth: " << i.decodepth ();
    o << ::std::endl << "duration: " << i.duration ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

