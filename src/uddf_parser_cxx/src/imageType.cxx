// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "imageType.hxx"

#include "ID.hxx"

#include "imagedata.hxx"

namespace streit
{
  // imageType
  //

  const imageType::imagedata_optional& imageType::
  imagedata () const
  {
    return this->imagedata_;
  }

  imageType::imagedata_optional& imageType::
  imagedata ()
  {
    return this->imagedata_;
  }

  void imageType::
  imagedata (const imagedata_type& x)
  {
    this->imagedata_.set (x);
  }

  void imageType::
  imagedata (const imagedata_optional& x)
  {
    this->imagedata_ = x;
  }

  void imageType::
  imagedata (::std::unique_ptr< imagedata_type > x)
  {
    this->imagedata_.set (std::move (x));
  }

  const imageType::height_optional& imageType::
  height () const
  {
    return this->height_;
  }

  imageType::height_optional& imageType::
  height ()
  {
    return this->height_;
  }

  void imageType::
  height (const height_type& x)
  {
    this->height_.set (x);
  }

  void imageType::
  height (const height_optional& x)
  {
    this->height_ = x;
  }

  const imageType::width_optional& imageType::
  width () const
  {
    return this->width_;
  }

  imageType::width_optional& imageType::
  width ()
  {
    return this->width_;
  }

  void imageType::
  width (const width_type& x)
  {
    this->width_.set (x);
  }

  void imageType::
  width (const width_optional& x)
  {
    this->width_ = x;
  }

  const imageType::format_optional& imageType::
  format () const
  {
    return this->format_;
  }

  imageType::format_optional& imageType::
  format ()
  {
    return this->format_;
  }

  void imageType::
  format (const format_type& x)
  {
    this->format_.set (x);
  }

  void imageType::
  format (const format_optional& x)
  {
    this->format_ = x;
  }

  void imageType::
  format (::std::unique_ptr< format_type > x)
  {
    this->format_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // imageType
  //

  imageType::
  imageType (const id_type& id,
             const objectname_type& objectname)
  : ::streit::mediaType (id,
                         objectname),
    imagedata_ (this),
    height_ (this),
    width_ (this),
    format_ (this)
  {
  }

  imageType::
  imageType (const imageType& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::streit::mediaType (x, f, c),
    imagedata_ (x.imagedata_, f, this),
    height_ (x.height_, f, this),
    width_ (x.width_, f, this),
    format_ (x.format_, f, this)
  {
  }

  imageType::
  imageType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::streit::mediaType (e, f | ::xml_schema::flags::base, c),
    imagedata_ (this),
    height_ (this),
    width_ (this),
    format_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void imageType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::mediaType::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // imagedata
      //
      if (n.name () == "imagedata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< imagedata_type > r (
          imagedata_traits::create (i, f, this));

        if (!this->imagedata_)
        {
          this->imagedata_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    p.reset_attributes ();

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "height" && n.namespace_ ().empty ())
      {
        this->height_.set (height_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "width" && n.namespace_ ().empty ())
      {
        this->width_.set (width_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "format" && n.namespace_ ().empty ())
      {
        this->format_.set (format_traits::create (i, f, this));
        continue;
      }
    }
  }

  imageType* imageType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class imageType (*this, f, c);
  }

  imageType& imageType::
  operator= (const imageType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::mediaType& > (*this) = x;
      this->imagedata_ = x.imagedata_;
      this->height_ = x.height_;
      this->width_ = x.width_;
      this->format_ = x.format_;
    }

    return *this;
  }

  imageType::
  ~imageType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const imageType& i)
  {
    o << static_cast< const ::streit::mediaType& > (i);

    if (i.imagedata ())
    {
      o << ::std::endl << "imagedata: " << *i.imagedata ();
    }

    if (i.height ())
    {
      o << ::std::endl << "height: " << *i.height ();
    }

    if (i.width ())
    {
      o << ::std::endl << "width: " << *i.width ();
    }

    if (i.format ())
    {
      o << ::std::endl << "format: " << *i.format ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

