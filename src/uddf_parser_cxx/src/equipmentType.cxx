// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "equipmentType.hxx"

#include "equipmentPieceType.hxx"

#include "cameraType.hxx"

#include "equipmentconfigurationType.hxx"

#include "rebreatherType.hxx"

#include "suitType.hxx"

#include "tankType.hxx"

#include "videocameraType.hxx"

namespace streit
{
  // equipmentType
  //

  const equipmentType::boots_sequence& equipmentType::
  boots () const
  {
    return this->boots_;
  }

  equipmentType::boots_sequence& equipmentType::
  boots ()
  {
    return this->boots_;
  }

  void equipmentType::
  boots (const boots_sequence& s)
  {
    this->boots_ = s;
  }

  const equipmentType::buoyancycontroldevice_sequence& equipmentType::
  buoyancycontroldevice () const
  {
    return this->buoyancycontroldevice_;
  }

  equipmentType::buoyancycontroldevice_sequence& equipmentType::
  buoyancycontroldevice ()
  {
    return this->buoyancycontroldevice_;
  }

  void equipmentType::
  buoyancycontroldevice (const buoyancycontroldevice_sequence& s)
  {
    this->buoyancycontroldevice_ = s;
  }

  const equipmentType::camera_sequence& equipmentType::
  camera () const
  {
    return this->camera_;
  }

  equipmentType::camera_sequence& equipmentType::
  camera ()
  {
    return this->camera_;
  }

  void equipmentType::
  camera (const camera_sequence& s)
  {
    this->camera_ = s;
  }

  const equipmentType::compass_sequence& equipmentType::
  compass () const
  {
    return this->compass_;
  }

  equipmentType::compass_sequence& equipmentType::
  compass ()
  {
    return this->compass_;
  }

  void equipmentType::
  compass (const compass_sequence& s)
  {
    this->compass_ = s;
  }

  const equipmentType::compressor_sequence& equipmentType::
  compressor () const
  {
    return this->compressor_;
  }

  equipmentType::compressor_sequence& equipmentType::
  compressor ()
  {
    return this->compressor_;
  }

  void equipmentType::
  compressor (const compressor_sequence& s)
  {
    this->compressor_ = s;
  }

  const equipmentType::divecomputer_sequence& equipmentType::
  divecomputer () const
  {
    return this->divecomputer_;
  }

  equipmentType::divecomputer_sequence& equipmentType::
  divecomputer ()
  {
    return this->divecomputer_;
  }

  void equipmentType::
  divecomputer (const divecomputer_sequence& s)
  {
    this->divecomputer_ = s;
  }

  const equipmentType::equipmentconfiguration_sequence& equipmentType::
  equipmentconfiguration () const
  {
    return this->equipmentconfiguration_;
  }

  equipmentType::equipmentconfiguration_sequence& equipmentType::
  equipmentconfiguration ()
  {
    return this->equipmentconfiguration_;
  }

  void equipmentType::
  equipmentconfiguration (const equipmentconfiguration_sequence& s)
  {
    this->equipmentconfiguration_ = s;
  }

  const equipmentType::fins_sequence& equipmentType::
  fins () const
  {
    return this->fins_;
  }

  equipmentType::fins_sequence& equipmentType::
  fins ()
  {
    return this->fins_;
  }

  void equipmentType::
  fins (const fins_sequence& s)
  {
    this->fins_ = s;
  }

  const equipmentType::gloves_sequence& equipmentType::
  gloves () const
  {
    return this->gloves_;
  }

  equipmentType::gloves_sequence& equipmentType::
  gloves ()
  {
    return this->gloves_;
  }

  void equipmentType::
  gloves (const gloves_sequence& s)
  {
    this->gloves_ = s;
  }

  const equipmentType::knife_sequence& equipmentType::
  knife () const
  {
    return this->knife_;
  }

  equipmentType::knife_sequence& equipmentType::
  knife ()
  {
    return this->knife_;
  }

  void equipmentType::
  knife (const knife_sequence& s)
  {
    this->knife_ = s;
  }

  const equipmentType::lead_sequence& equipmentType::
  lead () const
  {
    return this->lead_;
  }

  equipmentType::lead_sequence& equipmentType::
  lead ()
  {
    return this->lead_;
  }

  void equipmentType::
  lead (const lead_sequence& s)
  {
    this->lead_ = s;
  }

  const equipmentType::light_sequence& equipmentType::
  light () const
  {
    return this->light_;
  }

  equipmentType::light_sequence& equipmentType::
  light ()
  {
    return this->light_;
  }

  void equipmentType::
  light (const light_sequence& s)
  {
    this->light_ = s;
  }

  const equipmentType::mask_sequence& equipmentType::
  mask () const
  {
    return this->mask_;
  }

  equipmentType::mask_sequence& equipmentType::
  mask ()
  {
    return this->mask_;
  }

  void equipmentType::
  mask (const mask_sequence& s)
  {
    this->mask_ = s;
  }

  const equipmentType::rebreather_sequence& equipmentType::
  rebreather () const
  {
    return this->rebreather_;
  }

  equipmentType::rebreather_sequence& equipmentType::
  rebreather ()
  {
    return this->rebreather_;
  }

  void equipmentType::
  rebreather (const rebreather_sequence& s)
  {
    this->rebreather_ = s;
  }

  const equipmentType::regulator_sequence& equipmentType::
  regulator () const
  {
    return this->regulator_;
  }

  equipmentType::regulator_sequence& equipmentType::
  regulator ()
  {
    return this->regulator_;
  }

  void equipmentType::
  regulator (const regulator_sequence& s)
  {
    this->regulator_ = s;
  }

  const equipmentType::scooter_sequence& equipmentType::
  scooter () const
  {
    return this->scooter_;
  }

  equipmentType::scooter_sequence& equipmentType::
  scooter ()
  {
    return this->scooter_;
  }

  void equipmentType::
  scooter (const scooter_sequence& s)
  {
    this->scooter_ = s;
  }

  const equipmentType::suit_sequence& equipmentType::
  suit () const
  {
    return this->suit_;
  }

  equipmentType::suit_sequence& equipmentType::
  suit ()
  {
    return this->suit_;
  }

  void equipmentType::
  suit (const suit_sequence& s)
  {
    this->suit_ = s;
  }

  const equipmentType::tank_sequence& equipmentType::
  tank () const
  {
    return this->tank_;
  }

  equipmentType::tank_sequence& equipmentType::
  tank ()
  {
    return this->tank_;
  }

  void equipmentType::
  tank (const tank_sequence& s)
  {
    this->tank_ = s;
  }

  const equipmentType::variouspieces_sequence& equipmentType::
  variouspieces () const
  {
    return this->variouspieces_;
  }

  equipmentType::variouspieces_sequence& equipmentType::
  variouspieces ()
  {
    return this->variouspieces_;
  }

  void equipmentType::
  variouspieces (const variouspieces_sequence& s)
  {
    this->variouspieces_ = s;
  }

  const equipmentType::videocamera_sequence& equipmentType::
  videocamera () const
  {
    return this->videocamera_;
  }

  equipmentType::videocamera_sequence& equipmentType::
  videocamera ()
  {
    return this->videocamera_;
  }

  void equipmentType::
  videocamera (const videocamera_sequence& s)
  {
    this->videocamera_ = s;
  }

  const equipmentType::watch_sequence& equipmentType::
  watch () const
  {
    return this->watch_;
  }

  equipmentType::watch_sequence& equipmentType::
  watch ()
  {
    return this->watch_;
  }

  void equipmentType::
  watch (const watch_sequence& s)
  {
    this->watch_ = s;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // equipmentType
  //

  equipmentType::
  equipmentType ()
  : ::xml_schema::type (),
    boots_ (this),
    buoyancycontroldevice_ (this),
    camera_ (this),
    compass_ (this),
    compressor_ (this),
    divecomputer_ (this),
    equipmentconfiguration_ (this),
    fins_ (this),
    gloves_ (this),
    knife_ (this),
    lead_ (this),
    light_ (this),
    mask_ (this),
    rebreather_ (this),
    regulator_ (this),
    scooter_ (this),
    suit_ (this),
    tank_ (this),
    variouspieces_ (this),
    videocamera_ (this),
    watch_ (this)
  {
  }

  equipmentType::
  equipmentType (const equipmentType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    boots_ (x.boots_, f, this),
    buoyancycontroldevice_ (x.buoyancycontroldevice_, f, this),
    camera_ (x.camera_, f, this),
    compass_ (x.compass_, f, this),
    compressor_ (x.compressor_, f, this),
    divecomputer_ (x.divecomputer_, f, this),
    equipmentconfiguration_ (x.equipmentconfiguration_, f, this),
    fins_ (x.fins_, f, this),
    gloves_ (x.gloves_, f, this),
    knife_ (x.knife_, f, this),
    lead_ (x.lead_, f, this),
    light_ (x.light_, f, this),
    mask_ (x.mask_, f, this),
    rebreather_ (x.rebreather_, f, this),
    regulator_ (x.regulator_, f, this),
    scooter_ (x.scooter_, f, this),
    suit_ (x.suit_, f, this),
    tank_ (x.tank_, f, this),
    variouspieces_ (x.variouspieces_, f, this),
    videocamera_ (x.videocamera_, f, this),
    watch_ (x.watch_, f, this)
  {
  }

  equipmentType::
  equipmentType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    boots_ (this),
    buoyancycontroldevice_ (this),
    camera_ (this),
    compass_ (this),
    compressor_ (this),
    divecomputer_ (this),
    equipmentconfiguration_ (this),
    fins_ (this),
    gloves_ (this),
    knife_ (this),
    lead_ (this),
    light_ (this),
    mask_ (this),
    rebreather_ (this),
    regulator_ (this),
    scooter_ (this),
    suit_ (this),
    tank_ (this),
    variouspieces_ (this),
    videocamera_ (this),
    watch_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void equipmentType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // boots
      //
      if (n.name () == "boots" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< boots_type > r (
          boots_traits::create (i, f, this));

        this->boots_.push_back (::std::move (r));
        continue;
      }

      // buoyancycontroldevice
      //
      if (n.name () == "buoyancycontroldevice" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< buoyancycontroldevice_type > r (
          buoyancycontroldevice_traits::create (i, f, this));

        this->buoyancycontroldevice_.push_back (::std::move (r));
        continue;
      }

      // camera
      //
      if (n.name () == "camera" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< camera_type > r (
          camera_traits::create (i, f, this));

        this->camera_.push_back (::std::move (r));
        continue;
      }

      // compass
      //
      if (n.name () == "compass" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< compass_type > r (
          compass_traits::create (i, f, this));

        this->compass_.push_back (::std::move (r));
        continue;
      }

      // compressor
      //
      if (n.name () == "compressor" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< compressor_type > r (
          compressor_traits::create (i, f, this));

        this->compressor_.push_back (::std::move (r));
        continue;
      }

      // divecomputer
      //
      if (n.name () == "divecomputer" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< divecomputer_type > r (
          divecomputer_traits::create (i, f, this));

        this->divecomputer_.push_back (::std::move (r));
        continue;
      }

      // equipmentconfiguration
      //
      if (n.name () == "equipmentconfiguration" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< equipmentconfiguration_type > r (
          equipmentconfiguration_traits::create (i, f, this));

        this->equipmentconfiguration_.push_back (::std::move (r));
        continue;
      }

      // fins
      //
      if (n.name () == "fins" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< fins_type > r (
          fins_traits::create (i, f, this));

        this->fins_.push_back (::std::move (r));
        continue;
      }

      // gloves
      //
      if (n.name () == "gloves" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< gloves_type > r (
          gloves_traits::create (i, f, this));

        this->gloves_.push_back (::std::move (r));
        continue;
      }

      // knife
      //
      if (n.name () == "knife" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< knife_type > r (
          knife_traits::create (i, f, this));

        this->knife_.push_back (::std::move (r));
        continue;
      }

      // lead
      //
      if (n.name () == "lead" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< lead_type > r (
          lead_traits::create (i, f, this));

        this->lead_.push_back (::std::move (r));
        continue;
      }

      // light
      //
      if (n.name () == "light" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< light_type > r (
          light_traits::create (i, f, this));

        this->light_.push_back (::std::move (r));
        continue;
      }

      // mask
      //
      if (n.name () == "mask" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< mask_type > r (
          mask_traits::create (i, f, this));

        this->mask_.push_back (::std::move (r));
        continue;
      }

      // rebreather
      //
      if (n.name () == "rebreather" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< rebreather_type > r (
          rebreather_traits::create (i, f, this));

        this->rebreather_.push_back (::std::move (r));
        continue;
      }

      // regulator
      //
      if (n.name () == "regulator" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< regulator_type > r (
          regulator_traits::create (i, f, this));

        this->regulator_.push_back (::std::move (r));
        continue;
      }

      // scooter
      //
      if (n.name () == "scooter" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< scooter_type > r (
          scooter_traits::create (i, f, this));

        this->scooter_.push_back (::std::move (r));
        continue;
      }

      // suit
      //
      if (n.name () == "suit" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< suit_type > r (
          suit_traits::create (i, f, this));

        this->suit_.push_back (::std::move (r));
        continue;
      }

      // tank
      //
      if (n.name () == "tank" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< tank_type > r (
          tank_traits::create (i, f, this));

        this->tank_.push_back (::std::move (r));
        continue;
      }

      // variouspieces
      //
      if (n.name () == "variouspieces" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< variouspieces_type > r (
          variouspieces_traits::create (i, f, this));

        this->variouspieces_.push_back (::std::move (r));
        continue;
      }

      // videocamera
      //
      if (n.name () == "videocamera" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< videocamera_type > r (
          videocamera_traits::create (i, f, this));

        this->videocamera_.push_back (::std::move (r));
        continue;
      }

      // watch
      //
      if (n.name () == "watch" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< watch_type > r (
          watch_traits::create (i, f, this));

        this->watch_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  equipmentType* equipmentType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class equipmentType (*this, f, c);
  }

  equipmentType& equipmentType::
  operator= (const equipmentType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->boots_ = x.boots_;
      this->buoyancycontroldevice_ = x.buoyancycontroldevice_;
      this->camera_ = x.camera_;
      this->compass_ = x.compass_;
      this->compressor_ = x.compressor_;
      this->divecomputer_ = x.divecomputer_;
      this->equipmentconfiguration_ = x.equipmentconfiguration_;
      this->fins_ = x.fins_;
      this->gloves_ = x.gloves_;
      this->knife_ = x.knife_;
      this->lead_ = x.lead_;
      this->light_ = x.light_;
      this->mask_ = x.mask_;
      this->rebreather_ = x.rebreather_;
      this->regulator_ = x.regulator_;
      this->scooter_ = x.scooter_;
      this->suit_ = x.suit_;
      this->tank_ = x.tank_;
      this->variouspieces_ = x.variouspieces_;
      this->videocamera_ = x.videocamera_;
      this->watch_ = x.watch_;
    }

    return *this;
  }

  equipmentType::
  ~equipmentType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const equipmentType& i)
  {
    for (equipmentType::boots_const_iterator
         b (i.boots ().begin ()), e (i.boots ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "boots: " << *b;
    }

    for (equipmentType::buoyancycontroldevice_const_iterator
         b (i.buoyancycontroldevice ().begin ()), e (i.buoyancycontroldevice ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "buoyancycontroldevice: " << *b;
    }

    for (equipmentType::camera_const_iterator
         b (i.camera ().begin ()), e (i.camera ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "camera: " << *b;
    }

    for (equipmentType::compass_const_iterator
         b (i.compass ().begin ()), e (i.compass ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "compass: " << *b;
    }

    for (equipmentType::compressor_const_iterator
         b (i.compressor ().begin ()), e (i.compressor ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "compressor: " << *b;
    }

    for (equipmentType::divecomputer_const_iterator
         b (i.divecomputer ().begin ()), e (i.divecomputer ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "divecomputer: " << *b;
    }

    for (equipmentType::equipmentconfiguration_const_iterator
         b (i.equipmentconfiguration ().begin ()), e (i.equipmentconfiguration ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "equipmentconfiguration: " << *b;
    }

    for (equipmentType::fins_const_iterator
         b (i.fins ().begin ()), e (i.fins ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "fins: " << *b;
    }

    for (equipmentType::gloves_const_iterator
         b (i.gloves ().begin ()), e (i.gloves ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "gloves: " << *b;
    }

    for (equipmentType::knife_const_iterator
         b (i.knife ().begin ()), e (i.knife ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "knife: " << *b;
    }

    for (equipmentType::lead_const_iterator
         b (i.lead ().begin ()), e (i.lead ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "lead: " << *b;
    }

    for (equipmentType::light_const_iterator
         b (i.light ().begin ()), e (i.light ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "light: " << *b;
    }

    for (equipmentType::mask_const_iterator
         b (i.mask ().begin ()), e (i.mask ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "mask: " << *b;
    }

    for (equipmentType::rebreather_const_iterator
         b (i.rebreather ().begin ()), e (i.rebreather ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "rebreather: " << *b;
    }

    for (equipmentType::regulator_const_iterator
         b (i.regulator ().begin ()), e (i.regulator ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "regulator: " << *b;
    }

    for (equipmentType::scooter_const_iterator
         b (i.scooter ().begin ()), e (i.scooter ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "scooter: " << *b;
    }

    for (equipmentType::suit_const_iterator
         b (i.suit ().begin ()), e (i.suit ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "suit: " << *b;
    }

    for (equipmentType::tank_const_iterator
         b (i.tank ().begin ()), e (i.tank ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "tank: " << *b;
    }

    for (equipmentType::variouspieces_const_iterator
         b (i.variouspieces ().begin ()), e (i.variouspieces ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "variouspieces: " << *b;
    }

    for (equipmentType::videocamera_const_iterator
         b (i.videocamera ().begin ()), e (i.videocamera ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "videocamera: " << *b;
    }

    for (equipmentType::watch_const_iterator
         b (i.watch ().begin ()), e (i.watch ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "watch: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

