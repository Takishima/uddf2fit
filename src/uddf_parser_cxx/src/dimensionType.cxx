// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "dimensionType.hxx"

namespace streit
{
  // dimensionType
  //

  const dimensionType::length_optional& dimensionType::
  length () const
  {
    return this->length_;
  }

  dimensionType::length_optional& dimensionType::
  length ()
  {
    return this->length_;
  }

  void dimensionType::
  length (const length_type& x)
  {
    this->length_.set (x);
  }

  void dimensionType::
  length (const length_optional& x)
  {
    this->length_ = x;
  }

  const dimensionType::beam_optional& dimensionType::
  beam () const
  {
    return this->beam_;
  }

  dimensionType::beam_optional& dimensionType::
  beam ()
  {
    return this->beam_;
  }

  void dimensionType::
  beam (const beam_type& x)
  {
    this->beam_.set (x);
  }

  void dimensionType::
  beam (const beam_optional& x)
  {
    this->beam_ = x;
  }

  const dimensionType::draught_optional& dimensionType::
  draught () const
  {
    return this->draught_;
  }

  dimensionType::draught_optional& dimensionType::
  draught ()
  {
    return this->draught_;
  }

  void dimensionType::
  draught (const draught_type& x)
  {
    this->draught_.set (x);
  }

  void dimensionType::
  draught (const draught_optional& x)
  {
    this->draught_ = x;
  }

  const dimensionType::displacement_optional& dimensionType::
  displacement () const
  {
    return this->displacement_;
  }

  dimensionType::displacement_optional& dimensionType::
  displacement ()
  {
    return this->displacement_;
  }

  void dimensionType::
  displacement (const displacement_type& x)
  {
    this->displacement_.set (x);
  }

  void dimensionType::
  displacement (const displacement_optional& x)
  {
    this->displacement_ = x;
  }

  const dimensionType::tonnage_optional& dimensionType::
  tonnage () const
  {
    return this->tonnage_;
  }

  dimensionType::tonnage_optional& dimensionType::
  tonnage ()
  {
    return this->tonnage_;
  }

  void dimensionType::
  tonnage (const tonnage_type& x)
  {
    this->tonnage_.set (x);
  }

  void dimensionType::
  tonnage (const tonnage_optional& x)
  {
    this->tonnage_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // dimensionType
  //

  dimensionType::
  dimensionType ()
  : ::xml_schema::type (),
    length_ (this),
    beam_ (this),
    draught_ (this),
    displacement_ (this),
    tonnage_ (this)
  {
  }

  dimensionType::
  dimensionType (const dimensionType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    length_ (x.length_, f, this),
    beam_ (x.beam_, f, this),
    draught_ (x.draught_, f, this),
    displacement_ (x.displacement_, f, this),
    tonnage_ (x.tonnage_, f, this)
  {
  }

  dimensionType::
  dimensionType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    length_ (this),
    beam_ (this),
    draught_ (this),
    displacement_ (this),
    tonnage_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void dimensionType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // length
      //
      if (n.name () == "length" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->length_)
        {
          this->length_.set (length_traits::create (i, f, this));
          continue;
        }
      }

      // beam
      //
      if (n.name () == "beam" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->beam_)
        {
          this->beam_.set (beam_traits::create (i, f, this));
          continue;
        }
      }

      // draught
      //
      if (n.name () == "draught" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->draught_)
        {
          this->draught_.set (draught_traits::create (i, f, this));
          continue;
        }
      }

      // displacement
      //
      if (n.name () == "displacement" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->displacement_)
        {
          this->displacement_.set (displacement_traits::create (i, f, this));
          continue;
        }
      }

      // tonnage
      //
      if (n.name () == "tonnage" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->tonnage_)
        {
          this->tonnage_.set (tonnage_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }
  }

  dimensionType* dimensionType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class dimensionType (*this, f, c);
  }

  dimensionType& dimensionType::
  operator= (const dimensionType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->length_ = x.length_;
      this->beam_ = x.beam_;
      this->draught_ = x.draught_;
      this->displacement_ = x.displacement_;
      this->tonnage_ = x.tonnage_;
    }

    return *this;
  }

  dimensionType::
  ~dimensionType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const dimensionType& i)
  {
    if (i.length ())
    {
      o << ::std::endl << "length: " << *i.length ();
    }

    if (i.beam ())
    {
      o << ::std::endl << "beam: " << *i.beam ();
    }

    if (i.draught ())
    {
      o << ::std::endl << "draught: " << *i.draught ();
    }

    if (i.displacement ())
    {
      o << ::std::endl << "displacement: " << *i.displacement ();
    }

    if (i.tonnage ())
    {
      o << ::std::endl << "tonnage: " << *i.tonnage ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

