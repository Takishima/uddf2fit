// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "bottomtimetableType.hxx"

#include "ID.hxx"

#include "linkType.hxx"

#include "outputType.hxx"

#include "applicationdataType.hxx"

#include "bottomtimetablescopeType.hxx"

namespace streit
{
  // bottomtimetableType
  //

  const bottomtimetableType::title_optional& bottomtimetableType::
  title () const
  {
    return this->title_;
  }

  bottomtimetableType::title_optional& bottomtimetableType::
  title ()
  {
    return this->title_;
  }

  void bottomtimetableType::
  title (const title_type& x)
  {
    this->title_.set (x);
  }

  void bottomtimetableType::
  title (const title_optional& x)
  {
    this->title_ = x;
  }

  void bottomtimetableType::
  title (::std::unique_ptr< title_type > x)
  {
    this->title_.set (std::move (x));
  }

  const bottomtimetableType::link_sequence& bottomtimetableType::
  link () const
  {
    return this->link_;
  }

  bottomtimetableType::link_sequence& bottomtimetableType::
  link ()
  {
    return this->link_;
  }

  void bottomtimetableType::
  link (const link_sequence& s)
  {
    this->link_ = s;
  }

  const bottomtimetableType::output_optional& bottomtimetableType::
  output () const
  {
    return this->output_;
  }

  bottomtimetableType::output_optional& bottomtimetableType::
  output ()
  {
    return this->output_;
  }

  void bottomtimetableType::
  output (const output_type& x)
  {
    this->output_.set (x);
  }

  void bottomtimetableType::
  output (const output_optional& x)
  {
    this->output_ = x;
  }

  void bottomtimetableType::
  output (::std::unique_ptr< output_type > x)
  {
    this->output_.set (std::move (x));
  }

  const bottomtimetableType::applicationdata_optional& bottomtimetableType::
  applicationdata () const
  {
    return this->applicationdata_;
  }

  bottomtimetableType::applicationdata_optional& bottomtimetableType::
  applicationdata ()
  {
    return this->applicationdata_;
  }

  void bottomtimetableType::
  applicationdata (const applicationdata_type& x)
  {
    this->applicationdata_.set (x);
  }

  void bottomtimetableType::
  applicationdata (const applicationdata_optional& x)
  {
    this->applicationdata_ = x;
  }

  void bottomtimetableType::
  applicationdata (::std::unique_ptr< applicationdata_type > x)
  {
    this->applicationdata_.set (std::move (x));
  }

  const bottomtimetableType::bottomtimetablescope_type& bottomtimetableType::
  bottomtimetablescope () const
  {
    return this->bottomtimetablescope_.get ();
  }

  bottomtimetableType::bottomtimetablescope_type& bottomtimetableType::
  bottomtimetablescope ()
  {
    return this->bottomtimetablescope_.get ();
  }

  void bottomtimetableType::
  bottomtimetablescope (const bottomtimetablescope_type& x)
  {
    this->bottomtimetablescope_.set (x);
  }

  void bottomtimetableType::
  bottomtimetablescope (::std::unique_ptr< bottomtimetablescope_type > x)
  {
    this->bottomtimetablescope_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // bottomtimetableType
  //

  bottomtimetableType::
  bottomtimetableType (const id_type& id,
                       const bottomtimetablescope_type& bottomtimetablescope)
  : ::streit::ID_TYPE (id),
    title_ (this),
    link_ (this),
    output_ (this),
    applicationdata_ (this),
    bottomtimetablescope_ (bottomtimetablescope, this)
  {
  }

  bottomtimetableType::
  bottomtimetableType (const id_type& id,
                       ::std::unique_ptr< bottomtimetablescope_type > bottomtimetablescope)
  : ::streit::ID_TYPE (id),
    title_ (this),
    link_ (this),
    output_ (this),
    applicationdata_ (this),
    bottomtimetablescope_ (std::move (bottomtimetablescope), this)
  {
  }

  bottomtimetableType::
  bottomtimetableType (const bottomtimetableType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::streit::ID_TYPE (x, f, c),
    title_ (x.title_, f, this),
    link_ (x.link_, f, this),
    output_ (x.output_, f, this),
    applicationdata_ (x.applicationdata_, f, this),
    bottomtimetablescope_ (x.bottomtimetablescope_, f, this)
  {
  }

  bottomtimetableType::
  bottomtimetableType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::streit::ID_TYPE (e, f | ::xml_schema::flags::base, c),
    title_ (this),
    link_ (this),
    output_ (this),
    applicationdata_ (this),
    bottomtimetablescope_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void bottomtimetableType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::ID_TYPE::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // title
      //
      if (n.name () == "title" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< title_type > r (
          title_traits::create (i, f, this));

        if (!this->title_)
        {
          this->title_.set (::std::move (r));
          continue;
        }
      }

      // link
      //
      if (n.name () == "link" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< link_type > r (
          link_traits::create (i, f, this));

        this->link_.push_back (::std::move (r));
        continue;
      }

      // output
      //
      if (n.name () == "output" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< output_type > r (
          output_traits::create (i, f, this));

        if (!this->output_)
        {
          this->output_.set (::std::move (r));
          continue;
        }
      }

      // applicationdata
      //
      if (n.name () == "applicationdata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< applicationdata_type > r (
          applicationdata_traits::create (i, f, this));

        if (!this->applicationdata_)
        {
          this->applicationdata_.set (::std::move (r));
          continue;
        }
      }

      // bottomtimetablescope
      //
      if (n.name () == "bottomtimetablescope" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< bottomtimetablescope_type > r (
          bottomtimetablescope_traits::create (i, f, this));

        if (!bottomtimetablescope_.present ())
        {
          this->bottomtimetablescope_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!bottomtimetablescope_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "bottomtimetablescope",
        "http://www.streit.cc/uddf/3.2/");
    }
  }

  bottomtimetableType* bottomtimetableType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class bottomtimetableType (*this, f, c);
  }

  bottomtimetableType& bottomtimetableType::
  operator= (const bottomtimetableType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::ID_TYPE& > (*this) = x;
      this->title_ = x.title_;
      this->link_ = x.link_;
      this->output_ = x.output_;
      this->applicationdata_ = x.applicationdata_;
      this->bottomtimetablescope_ = x.bottomtimetablescope_;
    }

    return *this;
  }

  bottomtimetableType::
  ~bottomtimetableType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const bottomtimetableType& i)
  {
    o << static_cast< const ::streit::ID_TYPE& > (i);

    if (i.title ())
    {
      o << ::std::endl << "title: " << *i.title ();
    }

    for (bottomtimetableType::link_const_iterator
         b (i.link ().begin ()), e (i.link ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "link: " << *b;
    }

    if (i.output ())
    {
      o << ::std::endl << "output: " << *i.output ();
    }

    if (i.applicationdata ())
    {
      o << ::std::endl << "applicationdata: " << *i.applicationdata ();
    }

    o << ::std::endl << "bottomtimetablescope: " << i.bottomtimetablescope ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

