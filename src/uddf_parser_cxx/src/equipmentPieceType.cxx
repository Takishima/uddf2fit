// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "equipmentPieceType.hxx"

#include "ID.hxx"

#include "linkType.hxx"

#include "manufacturerType.hxx"

#include "purchaseType.hxx"

#include "encapsulatedDateTimeType.hxx"

#include "notesType.hxx"

namespace streit
{
  // equipmentPieceType
  //

  const equipmentPieceType::link_optional& equipmentPieceType::
  link () const
  {
    return this->link_;
  }

  equipmentPieceType::link_optional& equipmentPieceType::
  link ()
  {
    return this->link_;
  }

  void equipmentPieceType::
  link (const link_type& x)
  {
    this->link_.set (x);
  }

  void equipmentPieceType::
  link (const link_optional& x)
  {
    this->link_ = x;
  }

  void equipmentPieceType::
  link (::std::unique_ptr< link_type > x)
  {
    this->link_.set (std::move (x));
  }

  const equipmentPieceType::manufacturer_optional& equipmentPieceType::
  manufacturer () const
  {
    return this->manufacturer_;
  }

  equipmentPieceType::manufacturer_optional& equipmentPieceType::
  manufacturer ()
  {
    return this->manufacturer_;
  }

  void equipmentPieceType::
  manufacturer (const manufacturer_type& x)
  {
    this->manufacturer_.set (x);
  }

  void equipmentPieceType::
  manufacturer (const manufacturer_optional& x)
  {
    this->manufacturer_ = x;
  }

  void equipmentPieceType::
  manufacturer (::std::unique_ptr< manufacturer_type > x)
  {
    this->manufacturer_.set (std::move (x));
  }

  const equipmentPieceType::model_optional& equipmentPieceType::
  model () const
  {
    return this->model_;
  }

  equipmentPieceType::model_optional& equipmentPieceType::
  model ()
  {
    return this->model_;
  }

  void equipmentPieceType::
  model (const model_type& x)
  {
    this->model_.set (x);
  }

  void equipmentPieceType::
  model (const model_optional& x)
  {
    this->model_ = x;
  }

  void equipmentPieceType::
  model (::std::unique_ptr< model_type > x)
  {
    this->model_.set (std::move (x));
  }

  const equipmentPieceType::serialnumber_optional& equipmentPieceType::
  serialnumber () const
  {
    return this->serialnumber_;
  }

  equipmentPieceType::serialnumber_optional& equipmentPieceType::
  serialnumber ()
  {
    return this->serialnumber_;
  }

  void equipmentPieceType::
  serialnumber (const serialnumber_type& x)
  {
    this->serialnumber_.set (x);
  }

  void equipmentPieceType::
  serialnumber (const serialnumber_optional& x)
  {
    this->serialnumber_ = x;
  }

  void equipmentPieceType::
  serialnumber (::std::unique_ptr< serialnumber_type > x)
  {
    this->serialnumber_.set (std::move (x));
  }

  const equipmentPieceType::purchase_optional& equipmentPieceType::
  purchase () const
  {
    return this->purchase_;
  }

  equipmentPieceType::purchase_optional& equipmentPieceType::
  purchase ()
  {
    return this->purchase_;
  }

  void equipmentPieceType::
  purchase (const purchase_type& x)
  {
    this->purchase_.set (x);
  }

  void equipmentPieceType::
  purchase (const purchase_optional& x)
  {
    this->purchase_ = x;
  }

  void equipmentPieceType::
  purchase (::std::unique_ptr< purchase_type > x)
  {
    this->purchase_.set (std::move (x));
  }

  const equipmentPieceType::serviceinterval_optional& equipmentPieceType::
  serviceinterval () const
  {
    return this->serviceinterval_;
  }

  equipmentPieceType::serviceinterval_optional& equipmentPieceType::
  serviceinterval ()
  {
    return this->serviceinterval_;
  }

  void equipmentPieceType::
  serviceinterval (const serviceinterval_type& x)
  {
    this->serviceinterval_.set (x);
  }

  void equipmentPieceType::
  serviceinterval (const serviceinterval_optional& x)
  {
    this->serviceinterval_ = x;
  }

  const equipmentPieceType::nextservicedate_optional& equipmentPieceType::
  nextservicedate () const
  {
    return this->nextservicedate_;
  }

  equipmentPieceType::nextservicedate_optional& equipmentPieceType::
  nextservicedate ()
  {
    return this->nextservicedate_;
  }

  void equipmentPieceType::
  nextservicedate (const nextservicedate_type& x)
  {
    this->nextservicedate_.set (x);
  }

  void equipmentPieceType::
  nextservicedate (const nextservicedate_optional& x)
  {
    this->nextservicedate_ = x;
  }

  void equipmentPieceType::
  nextservicedate (::std::unique_ptr< nextservicedate_type > x)
  {
    this->nextservicedate_.set (std::move (x));
  }

  const equipmentPieceType::notes_optional& equipmentPieceType::
  notes () const
  {
    return this->notes_;
  }

  equipmentPieceType::notes_optional& equipmentPieceType::
  notes ()
  {
    return this->notes_;
  }

  void equipmentPieceType::
  notes (const notes_type& x)
  {
    this->notes_.set (x);
  }

  void equipmentPieceType::
  notes (const notes_optional& x)
  {
    this->notes_ = x;
  }

  void equipmentPieceType::
  notes (::std::unique_ptr< notes_type > x)
  {
    this->notes_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // equipmentPieceType
  //

  equipmentPieceType::
  equipmentPieceType (const id_type& id,
                      const name_type& name)
  : ::streit::namedType (id,
                         name),
    link_ (this),
    manufacturer_ (this),
    model_ (this),
    serialnumber_ (this),
    purchase_ (this),
    serviceinterval_ (this),
    nextservicedate_ (this),
    notes_ (this)
  {
  }

  equipmentPieceType::
  equipmentPieceType (const equipmentPieceType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::streit::namedType (x, f, c),
    link_ (x.link_, f, this),
    manufacturer_ (x.manufacturer_, f, this),
    model_ (x.model_, f, this),
    serialnumber_ (x.serialnumber_, f, this),
    purchase_ (x.purchase_, f, this),
    serviceinterval_ (x.serviceinterval_, f, this),
    nextservicedate_ (x.nextservicedate_, f, this),
    notes_ (x.notes_, f, this)
  {
  }

  equipmentPieceType::
  equipmentPieceType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::streit::namedType (e, f | ::xml_schema::flags::base, c),
    link_ (this),
    manufacturer_ (this),
    model_ (this),
    serialnumber_ (this),
    purchase_ (this),
    serviceinterval_ (this),
    nextservicedate_ (this),
    notes_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void equipmentPieceType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::namedType::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // link
      //
      if (n.name () == "link" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< link_type > r (
          link_traits::create (i, f, this));

        if (!this->link_)
        {
          this->link_.set (::std::move (r));
          continue;
        }
      }

      // manufacturer
      //
      if (n.name () == "manufacturer" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< manufacturer_type > r (
          manufacturer_traits::create (i, f, this));

        if (!this->manufacturer_)
        {
          this->manufacturer_.set (::std::move (r));
          continue;
        }
      }

      // model
      //
      if (n.name () == "model" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< model_type > r (
          model_traits::create (i, f, this));

        if (!this->model_)
        {
          this->model_.set (::std::move (r));
          continue;
        }
      }

      // serialnumber
      //
      if (n.name () == "serialnumber" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< serialnumber_type > r (
          serialnumber_traits::create (i, f, this));

        if (!this->serialnumber_)
        {
          this->serialnumber_.set (::std::move (r));
          continue;
        }
      }

      // purchase
      //
      if (n.name () == "purchase" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< purchase_type > r (
          purchase_traits::create (i, f, this));

        if (!this->purchase_)
        {
          this->purchase_.set (::std::move (r));
          continue;
        }
      }

      // serviceinterval
      //
      if (n.name () == "serviceinterval" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->serviceinterval_)
        {
          this->serviceinterval_.set (serviceinterval_traits::create (i, f, this));
          continue;
        }
      }

      // nextservicedate
      //
      if (n.name () == "nextservicedate" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< nextservicedate_type > r (
          nextservicedate_traits::create (i, f, this));

        if (!this->nextservicedate_)
        {
          this->nextservicedate_.set (::std::move (r));
          continue;
        }
      }

      // notes
      //
      if (n.name () == "notes" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< notes_type > r (
          notes_traits::create (i, f, this));

        if (!this->notes_)
        {
          this->notes_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  equipmentPieceType* equipmentPieceType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class equipmentPieceType (*this, f, c);
  }

  equipmentPieceType& equipmentPieceType::
  operator= (const equipmentPieceType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::namedType& > (*this) = x;
      this->link_ = x.link_;
      this->manufacturer_ = x.manufacturer_;
      this->model_ = x.model_;
      this->serialnumber_ = x.serialnumber_;
      this->purchase_ = x.purchase_;
      this->serviceinterval_ = x.serviceinterval_;
      this->nextservicedate_ = x.nextservicedate_;
      this->notes_ = x.notes_;
    }

    return *this;
  }

  equipmentPieceType::
  ~equipmentPieceType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const equipmentPieceType& i)
  {
    o << static_cast< const ::streit::namedType& > (i);

    if (i.link ())
    {
      o << ::std::endl << "link: " << *i.link ();
    }

    if (i.manufacturer ())
    {
      o << ::std::endl << "manufacturer: " << *i.manufacturer ();
    }

    if (i.model ())
    {
      o << ::std::endl << "model: " << *i.model ();
    }

    if (i.serialnumber ())
    {
      o << ::std::endl << "serialnumber: " << *i.serialnumber ();
    }

    if (i.purchase ())
    {
      o << ::std::endl << "purchase: " << *i.purchase ();
    }

    if (i.serviceinterval ())
    {
      o << ::std::endl << "serviceinterval: " << *i.serviceinterval ();
    }

    if (i.nextservicedate ())
    {
      o << ::std::endl << "nextservicedate: " << *i.nextservicedate ();
    }

    if (i.notes ())
    {
      o << ::std::endl << "notes: " << *i.notes ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

