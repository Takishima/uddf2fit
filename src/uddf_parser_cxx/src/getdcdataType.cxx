// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "getdcdataType.hxx"

#include "markerType.hxx"

namespace streit
{
  // getdcdataType
  //

  const getdcdataType::getdcalldata_optional& getdcdataType::
  getdcalldata () const
  {
    return this->getdcalldata_;
  }

  getdcdataType::getdcalldata_optional& getdcdataType::
  getdcalldata ()
  {
    return this->getdcalldata_;
  }

  void getdcdataType::
  getdcalldata (const getdcalldata_type& x)
  {
    this->getdcalldata_.set (x);
  }

  void getdcdataType::
  getdcalldata (const getdcalldata_optional& x)
  {
    this->getdcalldata_ = x;
  }

  void getdcdataType::
  getdcalldata (::std::unique_ptr< getdcalldata_type > x)
  {
    this->getdcalldata_.set (std::move (x));
  }

  const getdcdataType::getdcgeneratordata_optional& getdcdataType::
  getdcgeneratordata () const
  {
    return this->getdcgeneratordata_;
  }

  getdcdataType::getdcgeneratordata_optional& getdcdataType::
  getdcgeneratordata ()
  {
    return this->getdcgeneratordata_;
  }

  void getdcdataType::
  getdcgeneratordata (const getdcgeneratordata_type& x)
  {
    this->getdcgeneratordata_.set (x);
  }

  void getdcdataType::
  getdcgeneratordata (const getdcgeneratordata_optional& x)
  {
    this->getdcgeneratordata_ = x;
  }

  void getdcdataType::
  getdcgeneratordata (::std::unique_ptr< getdcgeneratordata_type > x)
  {
    this->getdcgeneratordata_.set (std::move (x));
  }

  const getdcdataType::getdcownerdata_optional& getdcdataType::
  getdcownerdata () const
  {
    return this->getdcownerdata_;
  }

  getdcdataType::getdcownerdata_optional& getdcdataType::
  getdcownerdata ()
  {
    return this->getdcownerdata_;
  }

  void getdcdataType::
  getdcownerdata (const getdcownerdata_type& x)
  {
    this->getdcownerdata_.set (x);
  }

  void getdcdataType::
  getdcownerdata (const getdcownerdata_optional& x)
  {
    this->getdcownerdata_ = x;
  }

  void getdcdataType::
  getdcownerdata (::std::unique_ptr< getdcownerdata_type > x)
  {
    this->getdcownerdata_.set (std::move (x));
  }

  const getdcdataType::getdcbuddydata_optional& getdcdataType::
  getdcbuddydata () const
  {
    return this->getdcbuddydata_;
  }

  getdcdataType::getdcbuddydata_optional& getdcdataType::
  getdcbuddydata ()
  {
    return this->getdcbuddydata_;
  }

  void getdcdataType::
  getdcbuddydata (const getdcbuddydata_type& x)
  {
    this->getdcbuddydata_.set (x);
  }

  void getdcdataType::
  getdcbuddydata (const getdcbuddydata_optional& x)
  {
    this->getdcbuddydata_ = x;
  }

  void getdcdataType::
  getdcbuddydata (::std::unique_ptr< getdcbuddydata_type > x)
  {
    this->getdcbuddydata_.set (std::move (x));
  }

  const getdcdataType::getdcgasdefinitionsdata_optional& getdcdataType::
  getdcgasdefinitionsdata () const
  {
    return this->getdcgasdefinitionsdata_;
  }

  getdcdataType::getdcgasdefinitionsdata_optional& getdcdataType::
  getdcgasdefinitionsdata ()
  {
    return this->getdcgasdefinitionsdata_;
  }

  void getdcdataType::
  getdcgasdefinitionsdata (const getdcgasdefinitionsdata_type& x)
  {
    this->getdcgasdefinitionsdata_.set (x);
  }

  void getdcdataType::
  getdcgasdefinitionsdata (const getdcgasdefinitionsdata_optional& x)
  {
    this->getdcgasdefinitionsdata_ = x;
  }

  void getdcdataType::
  getdcgasdefinitionsdata (::std::unique_ptr< getdcgasdefinitionsdata_type > x)
  {
    this->getdcgasdefinitionsdata_.set (std::move (x));
  }

  const getdcdataType::getdcdivesitedata_optional& getdcdataType::
  getdcdivesitedata () const
  {
    return this->getdcdivesitedata_;
  }

  getdcdataType::getdcdivesitedata_optional& getdcdataType::
  getdcdivesitedata ()
  {
    return this->getdcdivesitedata_;
  }

  void getdcdataType::
  getdcdivesitedata (const getdcdivesitedata_type& x)
  {
    this->getdcdivesitedata_.set (x);
  }

  void getdcdataType::
  getdcdivesitedata (const getdcdivesitedata_optional& x)
  {
    this->getdcdivesitedata_ = x;
  }

  void getdcdataType::
  getdcdivesitedata (::std::unique_ptr< getdcdivesitedata_type > x)
  {
    this->getdcdivesitedata_.set (std::move (x));
  }

  const getdcdataType::getdcdivetripdata_optional& getdcdataType::
  getdcdivetripdata () const
  {
    return this->getdcdivetripdata_;
  }

  getdcdataType::getdcdivetripdata_optional& getdcdataType::
  getdcdivetripdata ()
  {
    return this->getdcdivetripdata_;
  }

  void getdcdataType::
  getdcdivetripdata (const getdcdivetripdata_type& x)
  {
    this->getdcdivetripdata_.set (x);
  }

  void getdcdataType::
  getdcdivetripdata (const getdcdivetripdata_optional& x)
  {
    this->getdcdivetripdata_ = x;
  }

  void getdcdataType::
  getdcdivetripdata (::std::unique_ptr< getdcdivetripdata_type > x)
  {
    this->getdcdivetripdata_.set (std::move (x));
  }

  const getdcdataType::getdcprofiledata_optional& getdcdataType::
  getdcprofiledata () const
  {
    return this->getdcprofiledata_;
  }

  getdcdataType::getdcprofiledata_optional& getdcdataType::
  getdcprofiledata ()
  {
    return this->getdcprofiledata_;
  }

  void getdcdataType::
  getdcprofiledata (const getdcprofiledata_type& x)
  {
    this->getdcprofiledata_.set (x);
  }

  void getdcdataType::
  getdcprofiledata (const getdcprofiledata_optional& x)
  {
    this->getdcprofiledata_ = x;
  }

  void getdcdataType::
  getdcprofiledata (::std::unique_ptr< getdcprofiledata_type > x)
  {
    this->getdcprofiledata_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // getdcdataType
  //

  getdcdataType::
  getdcdataType ()
  : ::xml_schema::type (),
    getdcalldata_ (this),
    getdcgeneratordata_ (this),
    getdcownerdata_ (this),
    getdcbuddydata_ (this),
    getdcgasdefinitionsdata_ (this),
    getdcdivesitedata_ (this),
    getdcdivetripdata_ (this),
    getdcprofiledata_ (this)
  {
  }

  getdcdataType::
  getdcdataType (const getdcdataType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    getdcalldata_ (x.getdcalldata_, f, this),
    getdcgeneratordata_ (x.getdcgeneratordata_, f, this),
    getdcownerdata_ (x.getdcownerdata_, f, this),
    getdcbuddydata_ (x.getdcbuddydata_, f, this),
    getdcgasdefinitionsdata_ (x.getdcgasdefinitionsdata_, f, this),
    getdcdivesitedata_ (x.getdcdivesitedata_, f, this),
    getdcdivetripdata_ (x.getdcdivetripdata_, f, this),
    getdcprofiledata_ (x.getdcprofiledata_, f, this)
  {
  }

  getdcdataType::
  getdcdataType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    getdcalldata_ (this),
    getdcgeneratordata_ (this),
    getdcownerdata_ (this),
    getdcbuddydata_ (this),
    getdcgasdefinitionsdata_ (this),
    getdcdivesitedata_ (this),
    getdcdivetripdata_ (this),
    getdcprofiledata_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void getdcdataType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // getdcalldata
      //
      if (n.name () == "getdcalldata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< getdcalldata_type > r (
          getdcalldata_traits::create (i, f, this));

        if (!this->getdcalldata_)
        {
          this->getdcalldata_.set (::std::move (r));
          continue;
        }
      }

      // getdcgeneratordata
      //
      if (n.name () == "getdcgeneratordata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< getdcgeneratordata_type > r (
          getdcgeneratordata_traits::create (i, f, this));

        if (!this->getdcgeneratordata_)
        {
          this->getdcgeneratordata_.set (::std::move (r));
          continue;
        }
      }

      // getdcownerdata
      //
      if (n.name () == "getdcownerdata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< getdcownerdata_type > r (
          getdcownerdata_traits::create (i, f, this));

        if (!this->getdcownerdata_)
        {
          this->getdcownerdata_.set (::std::move (r));
          continue;
        }
      }

      // getdcbuddydata
      //
      if (n.name () == "getdcbuddydata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< getdcbuddydata_type > r (
          getdcbuddydata_traits::create (i, f, this));

        if (!this->getdcbuddydata_)
        {
          this->getdcbuddydata_.set (::std::move (r));
          continue;
        }
      }

      // getdcgasdefinitionsdata
      //
      if (n.name () == "getdcgasdefinitionsdata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< getdcgasdefinitionsdata_type > r (
          getdcgasdefinitionsdata_traits::create (i, f, this));

        if (!this->getdcgasdefinitionsdata_)
        {
          this->getdcgasdefinitionsdata_.set (::std::move (r));
          continue;
        }
      }

      // getdcdivesitedata
      //
      if (n.name () == "getdcdivesitedata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< getdcdivesitedata_type > r (
          getdcdivesitedata_traits::create (i, f, this));

        if (!this->getdcdivesitedata_)
        {
          this->getdcdivesitedata_.set (::std::move (r));
          continue;
        }
      }

      // getdcdivetripdata
      //
      if (n.name () == "getdcdivetripdata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< getdcdivetripdata_type > r (
          getdcdivetripdata_traits::create (i, f, this));

        if (!this->getdcdivetripdata_)
        {
          this->getdcdivetripdata_.set (::std::move (r));
          continue;
        }
      }

      // getdcprofiledata
      //
      if (n.name () == "getdcprofiledata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< getdcprofiledata_type > r (
          getdcprofiledata_traits::create (i, f, this));

        if (!this->getdcprofiledata_)
        {
          this->getdcprofiledata_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  getdcdataType* getdcdataType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class getdcdataType (*this, f, c);
  }

  getdcdataType& getdcdataType::
  operator= (const getdcdataType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->getdcalldata_ = x.getdcalldata_;
      this->getdcgeneratordata_ = x.getdcgeneratordata_;
      this->getdcownerdata_ = x.getdcownerdata_;
      this->getdcbuddydata_ = x.getdcbuddydata_;
      this->getdcgasdefinitionsdata_ = x.getdcgasdefinitionsdata_;
      this->getdcdivesitedata_ = x.getdcdivesitedata_;
      this->getdcdivetripdata_ = x.getdcdivetripdata_;
      this->getdcprofiledata_ = x.getdcprofiledata_;
    }

    return *this;
  }

  getdcdataType::
  ~getdcdataType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const getdcdataType& i)
  {
    if (i.getdcalldata ())
    {
      o << ::std::endl << "getdcalldata: " << *i.getdcalldata ();
    }

    if (i.getdcgeneratordata ())
    {
      o << ::std::endl << "getdcgeneratordata: " << *i.getdcgeneratordata ();
    }

    if (i.getdcownerdata ())
    {
      o << ::std::endl << "getdcownerdata: " << *i.getdcownerdata ();
    }

    if (i.getdcbuddydata ())
    {
      o << ::std::endl << "getdcbuddydata: " << *i.getdcbuddydata ();
    }

    if (i.getdcgasdefinitionsdata ())
    {
      o << ::std::endl << "getdcgasdefinitionsdata: " << *i.getdcgasdefinitionsdata ();
    }

    if (i.getdcdivesitedata ())
    {
      o << ::std::endl << "getdcdivesitedata: " << *i.getdcdivesitedata ();
    }

    if (i.getdcdivetripdata ())
    {
      o << ::std::endl << "getdcdivetripdata: " << *i.getdcdivetripdata ();
    }

    if (i.getdcprofiledata ())
    {
      o << ::std::endl << "getdcprofiledata: " << *i.getdcprofiledata ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

