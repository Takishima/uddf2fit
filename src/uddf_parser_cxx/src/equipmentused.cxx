// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "equipmentused.hxx"

#include "linkType.hxx"

namespace streit
{
  // equipmentused
  //

  const equipmentused::leadquantity_optional& equipmentused::
  leadquantity () const
  {
    return this->leadquantity_;
  }

  equipmentused::leadquantity_optional& equipmentused::
  leadquantity ()
  {
    return this->leadquantity_;
  }

  void equipmentused::
  leadquantity (const leadquantity_type& x)
  {
    this->leadquantity_.set (x);
  }

  void equipmentused::
  leadquantity (const leadquantity_optional& x)
  {
    this->leadquantity_ = x;
  }

  const equipmentused::link_sequence& equipmentused::
  link () const
  {
    return this->link_;
  }

  equipmentused::link_sequence& equipmentused::
  link ()
  {
    return this->link_;
  }

  void equipmentused::
  link (const link_sequence& s)
  {
    this->link_ = s;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // equipmentused
  //

  equipmentused::
  equipmentused ()
  : ::xml_schema::type (),
    leadquantity_ (this),
    link_ (this)
  {
  }

  equipmentused::
  equipmentused (const equipmentused& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    leadquantity_ (x.leadquantity_, f, this),
    link_ (x.link_, f, this)
  {
  }

  equipmentused::
  equipmentused (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    leadquantity_ (this),
    link_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void equipmentused::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // leadquantity
      //
      if (n.name () == "leadquantity" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->leadquantity_)
        {
          this->leadquantity_.set (leadquantity_traits::create (i, f, this));
          continue;
        }
      }

      // link
      //
      if (n.name () == "link" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< link_type > r (
          link_traits::create (i, f, this));

        this->link_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  equipmentused* equipmentused::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class equipmentused (*this, f, c);
  }

  equipmentused& equipmentused::
  operator= (const equipmentused& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->leadquantity_ = x.leadquantity_;
      this->link_ = x.link_;
    }

    return *this;
  }

  equipmentused::
  ~equipmentused ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const equipmentused& i)
  {
    if (i.leadquantity ())
    {
      o << ::std::endl << "leadquantity: " << *i.leadquantity ();
    }

    for (equipmentused::link_const_iterator
         b (i.link ().begin ()), e (i.link ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "link: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

