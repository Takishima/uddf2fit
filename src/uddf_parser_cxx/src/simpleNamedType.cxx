// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simpleNamedType.hxx"

namespace streit
{
  // simpleNamedType
  //

  const simpleNamedType::name_type& simpleNamedType::
  name () const
  {
    return this->name_.get ();
  }

  simpleNamedType::name_type& simpleNamedType::
  name ()
  {
    return this->name_.get ();
  }

  void simpleNamedType::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void simpleNamedType::
  name (::std::unique_ptr< name_type > x)
  {
    this->name_.set (std::move (x));
  }

  const simpleNamedType::aliasname_sequence& simpleNamedType::
  aliasname () const
  {
    return this->aliasname_;
  }

  simpleNamedType::aliasname_sequence& simpleNamedType::
  aliasname ()
  {
    return this->aliasname_;
  }

  void simpleNamedType::
  aliasname (const aliasname_sequence& s)
  {
    this->aliasname_ = s;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // simpleNamedType
  //

  simpleNamedType::
  simpleNamedType (const name_type& name)
  : ::xml_schema::type (),
    name_ (name, this),
    aliasname_ (this)
  {
  }

  simpleNamedType::
  simpleNamedType (const simpleNamedType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    aliasname_ (x.aliasname_, f, this)
  {
  }

  simpleNamedType::
  simpleNamedType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (this),
    aliasname_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void simpleNamedType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (::std::move (r));
          continue;
        }
      }

      // aliasname
      //
      if (n.name () == "aliasname" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< aliasname_type > r (
          aliasname_traits::create (i, f, this));

        this->aliasname_.push_back (::std::move (r));
        continue;
      }

      break;
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "http://www.streit.cc/uddf/3.2/");
    }
  }

  simpleNamedType* simpleNamedType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class simpleNamedType (*this, f, c);
  }

  simpleNamedType& simpleNamedType::
  operator= (const simpleNamedType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->name_ = x.name_;
      this->aliasname_ = x.aliasname_;
    }

    return *this;
  }

  simpleNamedType::
  ~simpleNamedType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const simpleNamedType& i)
  {
    o << ::std::endl << "name: " << i.name ();
    for (simpleNamedType::aliasname_const_iterator
         b (i.aliasname ().begin ()), e (i.aliasname ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "aliasname: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

