// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "uddf.hxx"

#include "generator.hxx"

#include "mediadata.hxx"

#include "maker.hxx"

#include "business.hxx"

#include "diver.hxx"

#include "divesite.hxx"

#include "divetrip.hxx"

#include "gasdefinitions.hxx"

#include "decomodel.hxx"

#include "profiledata.hxx"

#include "tablegeneration.hxx"

#include "divecomputercontrol.hxx"

namespace streit
{
  // uddf
  //

  const uddf::generator_type& uddf::
  generator () const
  {
    return this->generator_.get ();
  }

  uddf::generator_type& uddf::
  generator ()
  {
    return this->generator_.get ();
  }

  void uddf::
  generator (const generator_type& x)
  {
    this->generator_.set (x);
  }

  void uddf::
  generator (::std::unique_ptr< generator_type > x)
  {
    this->generator_.set (std::move (x));
  }

  const uddf::mediadata_optional& uddf::
  mediadata () const
  {
    return this->mediadata_;
  }

  uddf::mediadata_optional& uddf::
  mediadata ()
  {
    return this->mediadata_;
  }

  void uddf::
  mediadata (const mediadata_type& x)
  {
    this->mediadata_.set (x);
  }

  void uddf::
  mediadata (const mediadata_optional& x)
  {
    this->mediadata_ = x;
  }

  void uddf::
  mediadata (::std::unique_ptr< mediadata_type > x)
  {
    this->mediadata_.set (std::move (x));
  }

  const uddf::maker_optional& uddf::
  maker () const
  {
    return this->maker_;
  }

  uddf::maker_optional& uddf::
  maker ()
  {
    return this->maker_;
  }

  void uddf::
  maker (const maker_type& x)
  {
    this->maker_.set (x);
  }

  void uddf::
  maker (const maker_optional& x)
  {
    this->maker_ = x;
  }

  void uddf::
  maker (::std::unique_ptr< maker_type > x)
  {
    this->maker_.set (std::move (x));
  }

  const uddf::business_optional& uddf::
  business () const
  {
    return this->business_;
  }

  uddf::business_optional& uddf::
  business ()
  {
    return this->business_;
  }

  void uddf::
  business (const business_type& x)
  {
    this->business_.set (x);
  }

  void uddf::
  business (const business_optional& x)
  {
    this->business_ = x;
  }

  void uddf::
  business (::std::unique_ptr< business_type > x)
  {
    this->business_.set (std::move (x));
  }

  const uddf::diver_optional& uddf::
  diver () const
  {
    return this->diver_;
  }

  uddf::diver_optional& uddf::
  diver ()
  {
    return this->diver_;
  }

  void uddf::
  diver (const diver_type& x)
  {
    this->diver_.set (x);
  }

  void uddf::
  diver (const diver_optional& x)
  {
    this->diver_ = x;
  }

  void uddf::
  diver (::std::unique_ptr< diver_type > x)
  {
    this->diver_.set (std::move (x));
  }

  const uddf::divesite_optional& uddf::
  divesite () const
  {
    return this->divesite_;
  }

  uddf::divesite_optional& uddf::
  divesite ()
  {
    return this->divesite_;
  }

  void uddf::
  divesite (const divesite_type& x)
  {
    this->divesite_.set (x);
  }

  void uddf::
  divesite (const divesite_optional& x)
  {
    this->divesite_ = x;
  }

  void uddf::
  divesite (::std::unique_ptr< divesite_type > x)
  {
    this->divesite_.set (std::move (x));
  }

  const uddf::divetrip_optional& uddf::
  divetrip () const
  {
    return this->divetrip_;
  }

  uddf::divetrip_optional& uddf::
  divetrip ()
  {
    return this->divetrip_;
  }

  void uddf::
  divetrip (const divetrip_type& x)
  {
    this->divetrip_.set (x);
  }

  void uddf::
  divetrip (const divetrip_optional& x)
  {
    this->divetrip_ = x;
  }

  void uddf::
  divetrip (::std::unique_ptr< divetrip_type > x)
  {
    this->divetrip_.set (std::move (x));
  }

  const uddf::gasdefinitions_optional& uddf::
  gasdefinitions () const
  {
    return this->gasdefinitions_;
  }

  uddf::gasdefinitions_optional& uddf::
  gasdefinitions ()
  {
    return this->gasdefinitions_;
  }

  void uddf::
  gasdefinitions (const gasdefinitions_type& x)
  {
    this->gasdefinitions_.set (x);
  }

  void uddf::
  gasdefinitions (const gasdefinitions_optional& x)
  {
    this->gasdefinitions_ = x;
  }

  void uddf::
  gasdefinitions (::std::unique_ptr< gasdefinitions_type > x)
  {
    this->gasdefinitions_.set (std::move (x));
  }

  const uddf::decomodel_optional& uddf::
  decomodel () const
  {
    return this->decomodel_;
  }

  uddf::decomodel_optional& uddf::
  decomodel ()
  {
    return this->decomodel_;
  }

  void uddf::
  decomodel (const decomodel_type& x)
  {
    this->decomodel_.set (x);
  }

  void uddf::
  decomodel (const decomodel_optional& x)
  {
    this->decomodel_ = x;
  }

  void uddf::
  decomodel (::std::unique_ptr< decomodel_type > x)
  {
    this->decomodel_.set (std::move (x));
  }

  const uddf::profiledata_optional& uddf::
  profiledata () const
  {
    return this->profiledata_;
  }

  uddf::profiledata_optional& uddf::
  profiledata ()
  {
    return this->profiledata_;
  }

  void uddf::
  profiledata (const profiledata_type& x)
  {
    this->profiledata_.set (x);
  }

  void uddf::
  profiledata (const profiledata_optional& x)
  {
    this->profiledata_ = x;
  }

  void uddf::
  profiledata (::std::unique_ptr< profiledata_type > x)
  {
    this->profiledata_.set (std::move (x));
  }

  const uddf::tablegeneration_optional& uddf::
  tablegeneration () const
  {
    return this->tablegeneration_;
  }

  uddf::tablegeneration_optional& uddf::
  tablegeneration ()
  {
    return this->tablegeneration_;
  }

  void uddf::
  tablegeneration (const tablegeneration_type& x)
  {
    this->tablegeneration_.set (x);
  }

  void uddf::
  tablegeneration (const tablegeneration_optional& x)
  {
    this->tablegeneration_ = x;
  }

  void uddf::
  tablegeneration (::std::unique_ptr< tablegeneration_type > x)
  {
    this->tablegeneration_.set (std::move (x));
  }

  const uddf::divecomputercontrol_optional& uddf::
  divecomputercontrol () const
  {
    return this->divecomputercontrol_;
  }

  uddf::divecomputercontrol_optional& uddf::
  divecomputercontrol ()
  {
    return this->divecomputercontrol_;
  }

  void uddf::
  divecomputercontrol (const divecomputercontrol_type& x)
  {
    this->divecomputercontrol_.set (x);
  }

  void uddf::
  divecomputercontrol (const divecomputercontrol_optional& x)
  {
    this->divecomputercontrol_ = x;
  }

  void uddf::
  divecomputercontrol (::std::unique_ptr< divecomputercontrol_type > x)
  {
    this->divecomputercontrol_.set (std::move (x));
  }

  const uddf::version_optional& uddf::
  version () const
  {
    return this->version_;
  }

  uddf::version_optional& uddf::
  version ()
  {
    return this->version_;
  }

  void uddf::
  version (const version_type& x)
  {
    this->version_.set (x);
  }

  void uddf::
  version (const version_optional& x)
  {
    this->version_ = x;
  }

  void uddf::
  version (::std::unique_ptr< version_type > x)
  {
    this->version_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // uddf
  //

  uddf::
  uddf (const generator_type& generator)
  : ::xml_schema::type (),
    generator_ (generator, this),
    mediadata_ (this),
    maker_ (this),
    business_ (this),
    diver_ (this),
    divesite_ (this),
    divetrip_ (this),
    gasdefinitions_ (this),
    decomodel_ (this),
    profiledata_ (this),
    tablegeneration_ (this),
    divecomputercontrol_ (this),
    version_ (this)
  {
  }

  uddf::
  uddf (::std::unique_ptr< generator_type > generator)
  : ::xml_schema::type (),
    generator_ (std::move (generator), this),
    mediadata_ (this),
    maker_ (this),
    business_ (this),
    diver_ (this),
    divesite_ (this),
    divetrip_ (this),
    gasdefinitions_ (this),
    decomodel_ (this),
    profiledata_ (this),
    tablegeneration_ (this),
    divecomputercontrol_ (this),
    version_ (this)
  {
  }

  uddf::
  uddf (const uddf& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    generator_ (x.generator_, f, this),
    mediadata_ (x.mediadata_, f, this),
    maker_ (x.maker_, f, this),
    business_ (x.business_, f, this),
    diver_ (x.diver_, f, this),
    divesite_ (x.divesite_, f, this),
    divetrip_ (x.divetrip_, f, this),
    gasdefinitions_ (x.gasdefinitions_, f, this),
    decomodel_ (x.decomodel_, f, this),
    profiledata_ (x.profiledata_, f, this),
    tablegeneration_ (x.tablegeneration_, f, this),
    divecomputercontrol_ (x.divecomputercontrol_, f, this),
    version_ (x.version_, f, this)
  {
  }

  uddf::
  uddf (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    generator_ (this),
    mediadata_ (this),
    maker_ (this),
    business_ (this),
    diver_ (this),
    divesite_ (this),
    divetrip_ (this),
    gasdefinitions_ (this),
    decomodel_ (this),
    profiledata_ (this),
    tablegeneration_ (this),
    divecomputercontrol_ (this),
    version_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void uddf::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // generator
      //
      if (n.name () == "generator" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< generator_type > r (
          generator_traits::create (i, f, this));

        if (!generator_.present ())
        {
          this->generator_.set (::std::move (r));
          continue;
        }
      }

      // mediadata
      //
      if (n.name () == "mediadata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< mediadata_type > r (
          mediadata_traits::create (i, f, this));

        if (!this->mediadata_)
        {
          this->mediadata_.set (::std::move (r));
          continue;
        }
      }

      // maker
      //
      if (n.name () == "maker" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< maker_type > r (
          maker_traits::create (i, f, this));

        if (!this->maker_)
        {
          this->maker_.set (::std::move (r));
          continue;
        }
      }

      // business
      //
      if (n.name () == "business" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< business_type > r (
          business_traits::create (i, f, this));

        if (!this->business_)
        {
          this->business_.set (::std::move (r));
          continue;
        }
      }

      // diver
      //
      if (n.name () == "diver" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< diver_type > r (
          diver_traits::create (i, f, this));

        if (!this->diver_)
        {
          this->diver_.set (::std::move (r));
          continue;
        }
      }

      // divesite
      //
      if (n.name () == "divesite" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< divesite_type > r (
          divesite_traits::create (i, f, this));

        if (!this->divesite_)
        {
          this->divesite_.set (::std::move (r));
          continue;
        }
      }

      // divetrip
      //
      if (n.name () == "divetrip" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< divetrip_type > r (
          divetrip_traits::create (i, f, this));

        if (!this->divetrip_)
        {
          this->divetrip_.set (::std::move (r));
          continue;
        }
      }

      // gasdefinitions
      //
      if (n.name () == "gasdefinitions" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< gasdefinitions_type > r (
          gasdefinitions_traits::create (i, f, this));

        if (!this->gasdefinitions_)
        {
          this->gasdefinitions_.set (::std::move (r));
          continue;
        }
      }

      // decomodel
      //
      if (n.name () == "decomodel" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< decomodel_type > r (
          decomodel_traits::create (i, f, this));

        if (!this->decomodel_)
        {
          this->decomodel_.set (::std::move (r));
          continue;
        }
      }

      // profiledata
      //
      if (n.name () == "profiledata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< profiledata_type > r (
          profiledata_traits::create (i, f, this));

        if (!this->profiledata_)
        {
          this->profiledata_.set (::std::move (r));
          continue;
        }
      }

      // tablegeneration
      //
      if (n.name () == "tablegeneration" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< tablegeneration_type > r (
          tablegeneration_traits::create (i, f, this));

        if (!this->tablegeneration_)
        {
          this->tablegeneration_.set (::std::move (r));
          continue;
        }
      }

      // divecomputercontrol
      //
      if (n.name () == "divecomputercontrol" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< divecomputercontrol_type > r (
          divecomputercontrol_traits::create (i, f, this));

        if (!this->divecomputercontrol_)
        {
          this->divecomputercontrol_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!generator_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "generator",
        "http://www.streit.cc/uddf/3.2/");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "version" && n.namespace_ ().empty ())
      {
        this->version_.set (version_traits::create (i, f, this));
        continue;
      }
    }
  }

  uddf* uddf::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class uddf (*this, f, c);
  }

  uddf& uddf::
  operator= (const uddf& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->generator_ = x.generator_;
      this->mediadata_ = x.mediadata_;
      this->maker_ = x.maker_;
      this->business_ = x.business_;
      this->diver_ = x.diver_;
      this->divesite_ = x.divesite_;
      this->divetrip_ = x.divetrip_;
      this->gasdefinitions_ = x.gasdefinitions_;
      this->decomodel_ = x.decomodel_;
      this->profiledata_ = x.profiledata_;
      this->tablegeneration_ = x.tablegeneration_;
      this->divecomputercontrol_ = x.divecomputercontrol_;
      this->version_ = x.version_;
    }

    return *this;
  }

  uddf::
  ~uddf ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const uddf& i)
  {
    o << ::std::endl << "generator: " << i.generator ();
    if (i.mediadata ())
    {
      o << ::std::endl << "mediadata: " << *i.mediadata ();
    }

    if (i.maker ())
    {
      o << ::std::endl << "maker: " << *i.maker ();
    }

    if (i.business ())
    {
      o << ::std::endl << "business: " << *i.business ();
    }

    if (i.diver ())
    {
      o << ::std::endl << "diver: " << *i.diver ();
    }

    if (i.divesite ())
    {
      o << ::std::endl << "divesite: " << *i.divesite ();
    }

    if (i.divetrip ())
    {
      o << ::std::endl << "divetrip: " << *i.divetrip ();
    }

    if (i.gasdefinitions ())
    {
      o << ::std::endl << "gasdefinitions: " << *i.gasdefinitions ();
    }

    if (i.decomodel ())
    {
      o << ::std::endl << "decomodel: " << *i.decomodel ();
    }

    if (i.profiledata ())
    {
      o << ::std::endl << "profiledata: " << *i.profiledata ();
    }

    if (i.tablegeneration ())
    {
      o << ::std::endl << "tablegeneration: " << *i.tablegeneration ();
    }

    if (i.divecomputercontrol ())
    {
      o << ::std::endl << "divecomputercontrol: " << *i.divecomputercontrol ();
    }

    if (i.version ())
    {
      o << ::std::endl << "version: " << *i.version ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

