// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "bottomtimetablescopeType.hxx"

namespace streit
{
  // bottomtimetablescopeType
  //

  const bottomtimetablescopeType::divedepthbegin_type& bottomtimetablescopeType::
  divedepthbegin () const
  {
    return this->divedepthbegin_.get ();
  }

  bottomtimetablescopeType::divedepthbegin_type& bottomtimetablescopeType::
  divedepthbegin ()
  {
    return this->divedepthbegin_.get ();
  }

  void bottomtimetablescopeType::
  divedepthbegin (const divedepthbegin_type& x)
  {
    this->divedepthbegin_.set (x);
  }

  const bottomtimetablescopeType::divedepthend_type& bottomtimetablescopeType::
  divedepthend () const
  {
    return this->divedepthend_.get ();
  }

  bottomtimetablescopeType::divedepthend_type& bottomtimetablescopeType::
  divedepthend ()
  {
    return this->divedepthend_.get ();
  }

  void bottomtimetablescopeType::
  divedepthend (const divedepthend_type& x)
  {
    this->divedepthend_.set (x);
  }

  const bottomtimetablescopeType::divedepthstep_type& bottomtimetablescopeType::
  divedepthstep () const
  {
    return this->divedepthstep_.get ();
  }

  bottomtimetablescopeType::divedepthstep_type& bottomtimetablescopeType::
  divedepthstep ()
  {
    return this->divedepthstep_.get ();
  }

  void bottomtimetablescopeType::
  divedepthstep (const divedepthstep_type& x)
  {
    this->divedepthstep_.set (x);
  }

  const bottomtimetablescopeType::breathingconsumptionvolumebegin_type& bottomtimetablescopeType::
  breathingconsumptionvolumebegin () const
  {
    return this->breathingconsumptionvolumebegin_.get ();
  }

  bottomtimetablescopeType::breathingconsumptionvolumebegin_type& bottomtimetablescopeType::
  breathingconsumptionvolumebegin ()
  {
    return this->breathingconsumptionvolumebegin_.get ();
  }

  void bottomtimetablescopeType::
  breathingconsumptionvolumebegin (const breathingconsumptionvolumebegin_type& x)
  {
    this->breathingconsumptionvolumebegin_.set (x);
  }

  const bottomtimetablescopeType::breathingconsumptionvolumeend_type& bottomtimetablescopeType::
  breathingconsumptionvolumeend () const
  {
    return this->breathingconsumptionvolumeend_.get ();
  }

  bottomtimetablescopeType::breathingconsumptionvolumeend_type& bottomtimetablescopeType::
  breathingconsumptionvolumeend ()
  {
    return this->breathingconsumptionvolumeend_.get ();
  }

  void bottomtimetablescopeType::
  breathingconsumptionvolumeend (const breathingconsumptionvolumeend_type& x)
  {
    this->breathingconsumptionvolumeend_.set (x);
  }

  const bottomtimetablescopeType::breathingconsumptionvolumestep_type& bottomtimetablescopeType::
  breathingconsumptionvolumestep () const
  {
    return this->breathingconsumptionvolumestep_.get ();
  }

  bottomtimetablescopeType::breathingconsumptionvolumestep_type& bottomtimetablescopeType::
  breathingconsumptionvolumestep ()
  {
    return this->breathingconsumptionvolumestep_.get ();
  }

  void bottomtimetablescopeType::
  breathingconsumptionvolumestep (const breathingconsumptionvolumestep_type& x)
  {
    this->breathingconsumptionvolumestep_.set (x);
  }

  const bottomtimetablescopeType::tankvolumebegin_type& bottomtimetablescopeType::
  tankvolumebegin () const
  {
    return this->tankvolumebegin_.get ();
  }

  bottomtimetablescopeType::tankvolumebegin_type& bottomtimetablescopeType::
  tankvolumebegin ()
  {
    return this->tankvolumebegin_.get ();
  }

  void bottomtimetablescopeType::
  tankvolumebegin (const tankvolumebegin_type& x)
  {
    this->tankvolumebegin_.set (x);
  }

  const bottomtimetablescopeType::tankvolumeend_type& bottomtimetablescopeType::
  tankvolumeend () const
  {
    return this->tankvolumeend_.get ();
  }

  bottomtimetablescopeType::tankvolumeend_type& bottomtimetablescopeType::
  tankvolumeend ()
  {
    return this->tankvolumeend_.get ();
  }

  void bottomtimetablescopeType::
  tankvolumeend (const tankvolumeend_type& x)
  {
    this->tankvolumeend_.set (x);
  }

  const bottomtimetablescopeType::tankvolumestep_type& bottomtimetablescopeType::
  tankvolumestep () const
  {
    return this->tankvolumestep_.get ();
  }

  bottomtimetablescopeType::tankvolumestep_type& bottomtimetablescopeType::
  tankvolumestep ()
  {
    return this->tankvolumestep_.get ();
  }

  void bottomtimetablescopeType::
  tankvolumestep (const tankvolumestep_type& x)
  {
    this->tankvolumestep_.set (x);
  }

  const bottomtimetablescopeType::tankpressurebegin_type& bottomtimetablescopeType::
  tankpressurebegin () const
  {
    return this->tankpressurebegin_.get ();
  }

  bottomtimetablescopeType::tankpressurebegin_type& bottomtimetablescopeType::
  tankpressurebegin ()
  {
    return this->tankpressurebegin_.get ();
  }

  void bottomtimetablescopeType::
  tankpressurebegin (const tankpressurebegin_type& x)
  {
    this->tankpressurebegin_.set (x);
  }

  const bottomtimetablescopeType::tankpressurereserve_type& bottomtimetablescopeType::
  tankpressurereserve () const
  {
    return this->tankpressurereserve_.get ();
  }

  bottomtimetablescopeType::tankpressurereserve_type& bottomtimetablescopeType::
  tankpressurereserve ()
  {
    return this->tankpressurereserve_.get ();
  }

  void bottomtimetablescopeType::
  tankpressurereserve (const tankpressurereserve_type& x)
  {
    this->tankpressurereserve_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // bottomtimetablescopeType
  //

  bottomtimetablescopeType::
  bottomtimetablescopeType (const divedepthbegin_type& divedepthbegin,
                            const divedepthend_type& divedepthend,
                            const divedepthstep_type& divedepthstep,
                            const breathingconsumptionvolumebegin_type& breathingconsumptionvolumebegin,
                            const breathingconsumptionvolumeend_type& breathingconsumptionvolumeend,
                            const breathingconsumptionvolumestep_type& breathingconsumptionvolumestep,
                            const tankvolumebegin_type& tankvolumebegin,
                            const tankvolumeend_type& tankvolumeend,
                            const tankvolumestep_type& tankvolumestep,
                            const tankpressurebegin_type& tankpressurebegin,
                            const tankpressurereserve_type& tankpressurereserve)
  : ::xml_schema::type (),
    divedepthbegin_ (divedepthbegin, this),
    divedepthend_ (divedepthend, this),
    divedepthstep_ (divedepthstep, this),
    breathingconsumptionvolumebegin_ (breathingconsumptionvolumebegin, this),
    breathingconsumptionvolumeend_ (breathingconsumptionvolumeend, this),
    breathingconsumptionvolumestep_ (breathingconsumptionvolumestep, this),
    tankvolumebegin_ (tankvolumebegin, this),
    tankvolumeend_ (tankvolumeend, this),
    tankvolumestep_ (tankvolumestep, this),
    tankpressurebegin_ (tankpressurebegin, this),
    tankpressurereserve_ (tankpressurereserve, this)
  {
  }

  bottomtimetablescopeType::
  bottomtimetablescopeType (const bottomtimetablescopeType& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    divedepthbegin_ (x.divedepthbegin_, f, this),
    divedepthend_ (x.divedepthend_, f, this),
    divedepthstep_ (x.divedepthstep_, f, this),
    breathingconsumptionvolumebegin_ (x.breathingconsumptionvolumebegin_, f, this),
    breathingconsumptionvolumeend_ (x.breathingconsumptionvolumeend_, f, this),
    breathingconsumptionvolumestep_ (x.breathingconsumptionvolumestep_, f, this),
    tankvolumebegin_ (x.tankvolumebegin_, f, this),
    tankvolumeend_ (x.tankvolumeend_, f, this),
    tankvolumestep_ (x.tankvolumestep_, f, this),
    tankpressurebegin_ (x.tankpressurebegin_, f, this),
    tankpressurereserve_ (x.tankpressurereserve_, f, this)
  {
  }

  bottomtimetablescopeType::
  bottomtimetablescopeType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    divedepthbegin_ (this),
    divedepthend_ (this),
    divedepthstep_ (this),
    breathingconsumptionvolumebegin_ (this),
    breathingconsumptionvolumeend_ (this),
    breathingconsumptionvolumestep_ (this),
    tankvolumebegin_ (this),
    tankvolumeend_ (this),
    tankvolumestep_ (this),
    tankpressurebegin_ (this),
    tankpressurereserve_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void bottomtimetablescopeType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // divedepthbegin
      //
      if (n.name () == "divedepthbegin" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!divedepthbegin_.present ())
        {
          this->divedepthbegin_.set (divedepthbegin_traits::create (i, f, this));
          continue;
        }
      }

      // divedepthend
      //
      if (n.name () == "divedepthend" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!divedepthend_.present ())
        {
          this->divedepthend_.set (divedepthend_traits::create (i, f, this));
          continue;
        }
      }

      // divedepthstep
      //
      if (n.name () == "divedepthstep" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!divedepthstep_.present ())
        {
          this->divedepthstep_.set (divedepthstep_traits::create (i, f, this));
          continue;
        }
      }

      // breathingconsumptionvolumebegin
      //
      if (n.name () == "breathingconsumptionvolumebegin" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!breathingconsumptionvolumebegin_.present ())
        {
          this->breathingconsumptionvolumebegin_.set (breathingconsumptionvolumebegin_traits::create (i, f, this));
          continue;
        }
      }

      // breathingconsumptionvolumeend
      //
      if (n.name () == "breathingconsumptionvolumeend" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!breathingconsumptionvolumeend_.present ())
        {
          this->breathingconsumptionvolumeend_.set (breathingconsumptionvolumeend_traits::create (i, f, this));
          continue;
        }
      }

      // breathingconsumptionvolumestep
      //
      if (n.name () == "breathingconsumptionvolumestep" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!breathingconsumptionvolumestep_.present ())
        {
          this->breathingconsumptionvolumestep_.set (breathingconsumptionvolumestep_traits::create (i, f, this));
          continue;
        }
      }

      // tankvolumebegin
      //
      if (n.name () == "tankvolumebegin" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!tankvolumebegin_.present ())
        {
          this->tankvolumebegin_.set (tankvolumebegin_traits::create (i, f, this));
          continue;
        }
      }

      // tankvolumeend
      //
      if (n.name () == "tankvolumeend" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!tankvolumeend_.present ())
        {
          this->tankvolumeend_.set (tankvolumeend_traits::create (i, f, this));
          continue;
        }
      }

      // tankvolumestep
      //
      if (n.name () == "tankvolumestep" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!tankvolumestep_.present ())
        {
          this->tankvolumestep_.set (tankvolumestep_traits::create (i, f, this));
          continue;
        }
      }

      // tankpressurebegin
      //
      if (n.name () == "tankpressurebegin" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!tankpressurebegin_.present ())
        {
          this->tankpressurebegin_.set (tankpressurebegin_traits::create (i, f, this));
          continue;
        }
      }

      // tankpressurereserve
      //
      if (n.name () == "tankpressurereserve" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!tankpressurereserve_.present ())
        {
          this->tankpressurereserve_.set (tankpressurereserve_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!divedepthbegin_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "divedepthbegin",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!divedepthend_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "divedepthend",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!divedepthstep_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "divedepthstep",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!breathingconsumptionvolumebegin_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "breathingconsumptionvolumebegin",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!breathingconsumptionvolumeend_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "breathingconsumptionvolumeend",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!breathingconsumptionvolumestep_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "breathingconsumptionvolumestep",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!tankvolumebegin_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "tankvolumebegin",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!tankvolumeend_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "tankvolumeend",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!tankvolumestep_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "tankvolumestep",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!tankpressurebegin_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "tankpressurebegin",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!tankpressurereserve_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "tankpressurereserve",
        "http://www.streit.cc/uddf/3.2/");
    }
  }

  bottomtimetablescopeType* bottomtimetablescopeType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class bottomtimetablescopeType (*this, f, c);
  }

  bottomtimetablescopeType& bottomtimetablescopeType::
  operator= (const bottomtimetablescopeType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->divedepthbegin_ = x.divedepthbegin_;
      this->divedepthend_ = x.divedepthend_;
      this->divedepthstep_ = x.divedepthstep_;
      this->breathingconsumptionvolumebegin_ = x.breathingconsumptionvolumebegin_;
      this->breathingconsumptionvolumeend_ = x.breathingconsumptionvolumeend_;
      this->breathingconsumptionvolumestep_ = x.breathingconsumptionvolumestep_;
      this->tankvolumebegin_ = x.tankvolumebegin_;
      this->tankvolumeend_ = x.tankvolumeend_;
      this->tankvolumestep_ = x.tankvolumestep_;
      this->tankpressurebegin_ = x.tankpressurebegin_;
      this->tankpressurereserve_ = x.tankpressurereserve_;
    }

    return *this;
  }

  bottomtimetablescopeType::
  ~bottomtimetablescopeType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const bottomtimetablescopeType& i)
  {
    o << ::std::endl << "divedepthbegin: " << i.divedepthbegin ();
    o << ::std::endl << "divedepthend: " << i.divedepthend ();
    o << ::std::endl << "divedepthstep: " << i.divedepthstep ();
    o << ::std::endl << "breathingconsumptionvolumebegin: " << i.breathingconsumptionvolumebegin ();
    o << ::std::endl << "breathingconsumptionvolumeend: " << i.breathingconsumptionvolumeend ();
    o << ::std::endl << "breathingconsumptionvolumestep: " << i.breathingconsumptionvolumestep ();
    o << ::std::endl << "tankvolumebegin: " << i.tankvolumebegin ();
    o << ::std::endl << "tankvolumeend: " << i.tankvolumeend ();
    o << ::std::endl << "tankvolumestep: " << i.tankvolumestep ();
    o << ::std::endl << "tankpressurebegin: " << i.tankpressurebegin ();
    o << ::std::endl << "tankpressurereserve: " << i.tankpressurereserve ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

