// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "addressType.hxx"

namespace streit
{
  // addressType
  //

  const addressType::street_optional& addressType::
  street () const
  {
    return this->street_;
  }

  addressType::street_optional& addressType::
  street ()
  {
    return this->street_;
  }

  void addressType::
  street (const street_type& x)
  {
    this->street_.set (x);
  }

  void addressType::
  street (const street_optional& x)
  {
    this->street_ = x;
  }

  void addressType::
  street (::std::unique_ptr< street_type > x)
  {
    this->street_.set (std::move (x));
  }

  const addressType::city_optional& addressType::
  city () const
  {
    return this->city_;
  }

  addressType::city_optional& addressType::
  city ()
  {
    return this->city_;
  }

  void addressType::
  city (const city_type& x)
  {
    this->city_.set (x);
  }

  void addressType::
  city (const city_optional& x)
  {
    this->city_ = x;
  }

  void addressType::
  city (::std::unique_ptr< city_type > x)
  {
    this->city_.set (std::move (x));
  }

  const addressType::postcode_optional& addressType::
  postcode () const
  {
    return this->postcode_;
  }

  addressType::postcode_optional& addressType::
  postcode ()
  {
    return this->postcode_;
  }

  void addressType::
  postcode (const postcode_type& x)
  {
    this->postcode_.set (x);
  }

  void addressType::
  postcode (const postcode_optional& x)
  {
    this->postcode_ = x;
  }

  void addressType::
  postcode (::std::unique_ptr< postcode_type > x)
  {
    this->postcode_.set (std::move (x));
  }

  const addressType::country_type& addressType::
  country () const
  {
    return this->country_.get ();
  }

  addressType::country_type& addressType::
  country ()
  {
    return this->country_.get ();
  }

  void addressType::
  country (const country_type& x)
  {
    this->country_.set (x);
  }

  void addressType::
  country (::std::unique_ptr< country_type > x)
  {
    this->country_.set (std::move (x));
  }

  const addressType::province_optional& addressType::
  province () const
  {
    return this->province_;
  }

  addressType::province_optional& addressType::
  province ()
  {
    return this->province_;
  }

  void addressType::
  province (const province_type& x)
  {
    this->province_.set (x);
  }

  void addressType::
  province (const province_optional& x)
  {
    this->province_ = x;
  }

  void addressType::
  province (::std::unique_ptr< province_type > x)
  {
    this->province_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // addressType
  //

  addressType::
  addressType (const country_type& country)
  : ::xml_schema::type (),
    street_ (this),
    city_ (this),
    postcode_ (this),
    country_ (country, this),
    province_ (this)
  {
  }

  addressType::
  addressType (const addressType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    street_ (x.street_, f, this),
    city_ (x.city_, f, this),
    postcode_ (x.postcode_, f, this),
    country_ (x.country_, f, this),
    province_ (x.province_, f, this)
  {
  }

  addressType::
  addressType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    street_ (this),
    city_ (this),
    postcode_ (this),
    country_ (this),
    province_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void addressType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // street
      //
      if (n.name () == "street" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< street_type > r (
          street_traits::create (i, f, this));

        if (!this->street_)
        {
          this->street_.set (::std::move (r));
          continue;
        }
      }

      // city
      //
      if (n.name () == "city" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< city_type > r (
          city_traits::create (i, f, this));

        if (!this->city_)
        {
          this->city_.set (::std::move (r));
          continue;
        }
      }

      // postcode
      //
      if (n.name () == "postcode" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< postcode_type > r (
          postcode_traits::create (i, f, this));

        if (!this->postcode_)
        {
          this->postcode_.set (::std::move (r));
          continue;
        }
      }

      // country
      //
      if (n.name () == "country" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< country_type > r (
          country_traits::create (i, f, this));

        if (!country_.present ())
        {
          this->country_.set (::std::move (r));
          continue;
        }
      }

      // province
      //
      if (n.name () == "province" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< province_type > r (
          province_traits::create (i, f, this));

        if (!this->province_)
        {
          this->province_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!country_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "country",
        "http://www.streit.cc/uddf/3.2/");
    }
  }

  addressType* addressType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class addressType (*this, f, c);
  }

  addressType& addressType::
  operator= (const addressType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->street_ = x.street_;
      this->city_ = x.city_;
      this->postcode_ = x.postcode_;
      this->country_ = x.country_;
      this->province_ = x.province_;
    }

    return *this;
  }

  addressType::
  ~addressType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const addressType& i)
  {
    if (i.street ())
    {
      o << ::std::endl << "street: " << *i.street ();
    }

    if (i.city ())
    {
      o << ::std::endl << "city: " << *i.city ();
    }

    if (i.postcode ())
    {
      o << ::std::endl << "postcode: " << *i.postcode ();
    }

    o << ::std::endl << "country: " << i.country ();
    if (i.province ())
    {
      o << ::std::endl << "province: " << *i.province ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

