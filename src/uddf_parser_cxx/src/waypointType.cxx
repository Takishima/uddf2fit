// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "waypointType.hxx"

#include "alarm.hxx"

#include "batterychargecondition.hxx"

#include "decostop.hxx"

#include "setpo2.hxx"

#include "linkType.hxx"

#include "tankpressure.hxx"

#include "divemode.hxx"

#include "gradientfactor.hxx"

#include "measuredpo2.hxx"

namespace streit
{
  // waypointType
  //

  const waypointType::alarm_sequence& waypointType::
  alarm () const
  {
    return this->alarm_;
  }

  waypointType::alarm_sequence& waypointType::
  alarm ()
  {
    return this->alarm_;
  }

  void waypointType::
  alarm (const alarm_sequence& s)
  {
    this->alarm_ = s;
  }

  const waypointType::batterychargecondition_sequence& waypointType::
  batterychargecondition () const
  {
    return this->batterychargecondition_;
  }

  waypointType::batterychargecondition_sequence& waypointType::
  batterychargecondition ()
  {
    return this->batterychargecondition_;
  }

  void waypointType::
  batterychargecondition (const batterychargecondition_sequence& s)
  {
    this->batterychargecondition_ = s;
  }

  const waypointType::cns_optional& waypointType::
  cns () const
  {
    return this->cns_;
  }

  waypointType::cns_optional& waypointType::
  cns ()
  {
    return this->cns_;
  }

  void waypointType::
  cns (const cns_type& x)
  {
    this->cns_.set (x);
  }

  void waypointType::
  cns (const cns_optional& x)
  {
    this->cns_ = x;
  }

  const waypointType::decostop_sequence& waypointType::
  decostop () const
  {
    return this->decostop_;
  }

  waypointType::decostop_sequence& waypointType::
  decostop ()
  {
    return this->decostop_;
  }

  void waypointType::
  decostop (const decostop_sequence& s)
  {
    this->decostop_ = s;
  }

  const waypointType::bodytemperature_optional& waypointType::
  bodytemperature () const
  {
    return this->bodytemperature_;
  }

  waypointType::bodytemperature_optional& waypointType::
  bodytemperature ()
  {
    return this->bodytemperature_;
  }

  void waypointType::
  bodytemperature (const bodytemperature_type& x)
  {
    this->bodytemperature_.set (x);
  }

  void waypointType::
  bodytemperature (const bodytemperature_optional& x)
  {
    this->bodytemperature_ = x;
  }

  const waypointType::calculatedpo2_optional& waypointType::
  calculatedpo2 () const
  {
    return this->calculatedpo2_;
  }

  waypointType::calculatedpo2_optional& waypointType::
  calculatedpo2 ()
  {
    return this->calculatedpo2_;
  }

  void waypointType::
  calculatedpo2 (const calculatedpo2_type& x)
  {
    this->calculatedpo2_.set (x);
  }

  void waypointType::
  calculatedpo2 (const calculatedpo2_optional& x)
  {
    this->calculatedpo2_ = x;
  }

  const waypointType::depth_optional& waypointType::
  depth () const
  {
    return this->depth_;
  }

  waypointType::depth_optional& waypointType::
  depth ()
  {
    return this->depth_;
  }

  void waypointType::
  depth (const depth_type& x)
  {
    this->depth_.set (x);
  }

  void waypointType::
  depth (const depth_optional& x)
  {
    this->depth_ = x;
  }

  const waypointType::divetime_optional& waypointType::
  divetime () const
  {
    return this->divetime_;
  }

  waypointType::divetime_optional& waypointType::
  divetime ()
  {
    return this->divetime_;
  }

  void waypointType::
  divetime (const divetime_type& x)
  {
    this->divetime_.set (x);
  }

  void waypointType::
  divetime (const divetime_optional& x)
  {
    this->divetime_ = x;
  }

  const waypointType::heading_optional& waypointType::
  heading () const
  {
    return this->heading_;
  }

  waypointType::heading_optional& waypointType::
  heading ()
  {
    return this->heading_;
  }

  void waypointType::
  heading (const heading_type& x)
  {
    this->heading_.set (x);
  }

  void waypointType::
  heading (const heading_optional& x)
  {
    this->heading_ = x;
  }

  const waypointType::heartrate_optional& waypointType::
  heartrate () const
  {
    return this->heartrate_;
  }

  waypointType::heartrate_optional& waypointType::
  heartrate ()
  {
    return this->heartrate_;
  }

  void waypointType::
  heartrate (const heartrate_type& x)
  {
    this->heartrate_.set (x);
  }

  void waypointType::
  heartrate (const heartrate_optional& x)
  {
    this->heartrate_ = x;
  }

  const waypointType::otu_optional& waypointType::
  otu () const
  {
    return this->otu_;
  }

  waypointType::otu_optional& waypointType::
  otu ()
  {
    return this->otu_;
  }

  void waypointType::
  otu (const otu_type& x)
  {
    this->otu_.set (x);
  }

  void waypointType::
  otu (const otu_optional& x)
  {
    this->otu_ = x;
  }

  const waypointType::pulserate_optional& waypointType::
  pulserate () const
  {
    return this->pulserate_;
  }

  waypointType::pulserate_optional& waypointType::
  pulserate ()
  {
    return this->pulserate_;
  }

  void waypointType::
  pulserate (const pulserate_type& x)
  {
    this->pulserate_.set (x);
  }

  void waypointType::
  pulserate (const pulserate_optional& x)
  {
    this->pulserate_ = x;
  }

  const waypointType::remainingbottomtime_optional& waypointType::
  remainingbottomtime () const
  {
    return this->remainingbottomtime_;
  }

  waypointType::remainingbottomtime_optional& waypointType::
  remainingbottomtime ()
  {
    return this->remainingbottomtime_;
  }

  void waypointType::
  remainingbottomtime (const remainingbottomtime_type& x)
  {
    this->remainingbottomtime_.set (x);
  }

  void waypointType::
  remainingbottomtime (const remainingbottomtime_optional& x)
  {
    this->remainingbottomtime_ = x;
  }

  const waypointType::remainingo2time_optional& waypointType::
  remainingo2time () const
  {
    return this->remainingo2time_;
  }

  waypointType::remainingo2time_optional& waypointType::
  remainingo2time ()
  {
    return this->remainingo2time_;
  }

  void waypointType::
  remainingo2time (const remainingo2time_type& x)
  {
    this->remainingo2time_.set (x);
  }

  void waypointType::
  remainingo2time (const remainingo2time_optional& x)
  {
    this->remainingo2time_ = x;
  }

  const waypointType::setmarker_optional& waypointType::
  setmarker () const
  {
    return this->setmarker_;
  }

  waypointType::setmarker_optional& waypointType::
  setmarker ()
  {
    return this->setmarker_;
  }

  void waypointType::
  setmarker (const setmarker_type& x)
  {
    this->setmarker_.set (x);
  }

  void waypointType::
  setmarker (const setmarker_optional& x)
  {
    this->setmarker_ = x;
  }

  void waypointType::
  setmarker (::std::unique_ptr< setmarker_type > x)
  {
    this->setmarker_.set (std::move (x));
  }

  const waypointType::setpo2_optional& waypointType::
  setpo2 () const
  {
    return this->setpo2_;
  }

  waypointType::setpo2_optional& waypointType::
  setpo2 ()
  {
    return this->setpo2_;
  }

  void waypointType::
  setpo2 (const setpo2_type& x)
  {
    this->setpo2_.set (x);
  }

  void waypointType::
  setpo2 (const setpo2_optional& x)
  {
    this->setpo2_ = x;
  }

  void waypointType::
  setpo2 (::std::unique_ptr< setpo2_type > x)
  {
    this->setpo2_.set (std::move (x));
  }

  const waypointType::switchmix_optional& waypointType::
  switchmix () const
  {
    return this->switchmix_;
  }

  waypointType::switchmix_optional& waypointType::
  switchmix ()
  {
    return this->switchmix_;
  }

  void waypointType::
  switchmix (const switchmix_type& x)
  {
    this->switchmix_.set (x);
  }

  void waypointType::
  switchmix (const switchmix_optional& x)
  {
    this->switchmix_ = x;
  }

  void waypointType::
  switchmix (::std::unique_ptr< switchmix_type > x)
  {
    this->switchmix_.set (std::move (x));
  }

  const waypointType::tankpressure_sequence& waypointType::
  tankpressure () const
  {
    return this->tankpressure_;
  }

  waypointType::tankpressure_sequence& waypointType::
  tankpressure ()
  {
    return this->tankpressure_;
  }

  void waypointType::
  tankpressure (const tankpressure_sequence& s)
  {
    this->tankpressure_ = s;
  }

  const waypointType::temperature_optional& waypointType::
  temperature () const
  {
    return this->temperature_;
  }

  waypointType::temperature_optional& waypointType::
  temperature ()
  {
    return this->temperature_;
  }

  void waypointType::
  temperature (const temperature_type& x)
  {
    this->temperature_.set (x);
  }

  void waypointType::
  temperature (const temperature_optional& x)
  {
    this->temperature_ = x;
  }

  const waypointType::divemode_optional& waypointType::
  divemode () const
  {
    return this->divemode_;
  }

  waypointType::divemode_optional& waypointType::
  divemode ()
  {
    return this->divemode_;
  }

  void waypointType::
  divemode (const divemode_type& x)
  {
    this->divemode_.set (x);
  }

  void waypointType::
  divemode (const divemode_optional& x)
  {
    this->divemode_ = x;
  }

  void waypointType::
  divemode (::std::unique_ptr< divemode_type > x)
  {
    this->divemode_.set (std::move (x));
  }

  const waypointType::gradientfactor_optional& waypointType::
  gradientfactor () const
  {
    return this->gradientfactor_;
  }

  waypointType::gradientfactor_optional& waypointType::
  gradientfactor ()
  {
    return this->gradientfactor_;
  }

  void waypointType::
  gradientfactor (const gradientfactor_type& x)
  {
    this->gradientfactor_.set (x);
  }

  void waypointType::
  gradientfactor (const gradientfactor_optional& x)
  {
    this->gradientfactor_ = x;
  }

  void waypointType::
  gradientfactor (::std::unique_ptr< gradientfactor_type > x)
  {
    this->gradientfactor_.set (std::move (x));
  }

  const waypointType::measuredpo2_sequence& waypointType::
  measuredpo2 () const
  {
    return this->measuredpo2_;
  }

  waypointType::measuredpo2_sequence& waypointType::
  measuredpo2 ()
  {
    return this->measuredpo2_;
  }

  void waypointType::
  measuredpo2 (const measuredpo2_sequence& s)
  {
    this->measuredpo2_ = s;
  }

  const waypointType::nodecotime_optional& waypointType::
  nodecotime () const
  {
    return this->nodecotime_;
  }

  waypointType::nodecotime_optional& waypointType::
  nodecotime ()
  {
    return this->nodecotime_;
  }

  void waypointType::
  nodecotime (const nodecotime_type& x)
  {
    this->nodecotime_.set (x);
  }

  void waypointType::
  nodecotime (const nodecotime_optional& x)
  {
    this->nodecotime_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // waypointType
  //

  waypointType::
  waypointType ()
  : ::xml_schema::type (),
    alarm_ (this),
    batterychargecondition_ (this),
    cns_ (this),
    decostop_ (this),
    bodytemperature_ (this),
    calculatedpo2_ (this),
    depth_ (this),
    divetime_ (this),
    heading_ (this),
    heartrate_ (this),
    otu_ (this),
    pulserate_ (this),
    remainingbottomtime_ (this),
    remainingo2time_ (this),
    setmarker_ (this),
    setpo2_ (this),
    switchmix_ (this),
    tankpressure_ (this),
    temperature_ (this),
    divemode_ (this),
    gradientfactor_ (this),
    measuredpo2_ (this),
    nodecotime_ (this)
  {
  }

  waypointType::
  waypointType (const waypointType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    alarm_ (x.alarm_, f, this),
    batterychargecondition_ (x.batterychargecondition_, f, this),
    cns_ (x.cns_, f, this),
    decostop_ (x.decostop_, f, this),
    bodytemperature_ (x.bodytemperature_, f, this),
    calculatedpo2_ (x.calculatedpo2_, f, this),
    depth_ (x.depth_, f, this),
    divetime_ (x.divetime_, f, this),
    heading_ (x.heading_, f, this),
    heartrate_ (x.heartrate_, f, this),
    otu_ (x.otu_, f, this),
    pulserate_ (x.pulserate_, f, this),
    remainingbottomtime_ (x.remainingbottomtime_, f, this),
    remainingo2time_ (x.remainingo2time_, f, this),
    setmarker_ (x.setmarker_, f, this),
    setpo2_ (x.setpo2_, f, this),
    switchmix_ (x.switchmix_, f, this),
    tankpressure_ (x.tankpressure_, f, this),
    temperature_ (x.temperature_, f, this),
    divemode_ (x.divemode_, f, this),
    gradientfactor_ (x.gradientfactor_, f, this),
    measuredpo2_ (x.measuredpo2_, f, this),
    nodecotime_ (x.nodecotime_, f, this)
  {
  }

  waypointType::
  waypointType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    alarm_ (this),
    batterychargecondition_ (this),
    cns_ (this),
    decostop_ (this),
    bodytemperature_ (this),
    calculatedpo2_ (this),
    depth_ (this),
    divetime_ (this),
    heading_ (this),
    heartrate_ (this),
    otu_ (this),
    pulserate_ (this),
    remainingbottomtime_ (this),
    remainingo2time_ (this),
    setmarker_ (this),
    setpo2_ (this),
    switchmix_ (this),
    tankpressure_ (this),
    temperature_ (this),
    divemode_ (this),
    gradientfactor_ (this),
    measuredpo2_ (this),
    nodecotime_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void waypointType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // alarm
      //
      if (n.name () == "alarm" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< alarm_type > r (
          alarm_traits::create (i, f, this));

        this->alarm_.push_back (::std::move (r));
        continue;
      }

      // batterychargecondition
      //
      if (n.name () == "batterychargecondition" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< batterychargecondition_type > r (
          batterychargecondition_traits::create (i, f, this));

        this->batterychargecondition_.push_back (::std::move (r));
        continue;
      }

      // cns
      //
      if (n.name () == "cns" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->cns_)
        {
          this->cns_.set (cns_traits::create (i, f, this));
          continue;
        }
      }

      // decostop
      //
      if (n.name () == "decostop" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< decostop_type > r (
          decostop_traits::create (i, f, this));

        this->decostop_.push_back (::std::move (r));
        continue;
      }

      // bodytemperature
      //
      if (n.name () == "bodytemperature" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->bodytemperature_)
        {
          this->bodytemperature_.set (bodytemperature_traits::create (i, f, this));
          continue;
        }
      }

      // calculatedpo2
      //
      if (n.name () == "calculatedpo2" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->calculatedpo2_)
        {
          this->calculatedpo2_.set (calculatedpo2_traits::create (i, f, this));
          continue;
        }
      }

      // depth
      //
      if (n.name () == "depth" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->depth_)
        {
          this->depth_.set (depth_traits::create (i, f, this));
          continue;
        }
      }

      // divetime
      //
      if (n.name () == "divetime" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->divetime_)
        {
          this->divetime_.set (divetime_traits::create (i, f, this));
          continue;
        }
      }

      // heading
      //
      if (n.name () == "heading" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->heading_)
        {
          this->heading_.set (heading_traits::create (i, f, this));
          continue;
        }
      }

      // heartrate
      //
      if (n.name () == "heartrate" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->heartrate_)
        {
          this->heartrate_.set (heartrate_traits::create (i, f, this));
          continue;
        }
      }

      // otu
      //
      if (n.name () == "otu" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->otu_)
        {
          this->otu_.set (otu_traits::create (i, f, this));
          continue;
        }
      }

      // pulserate
      //
      if (n.name () == "pulserate" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->pulserate_)
        {
          this->pulserate_.set (pulserate_traits::create (i, f, this));
          continue;
        }
      }

      // remainingbottomtime
      //
      if (n.name () == "remainingbottomtime" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->remainingbottomtime_)
        {
          this->remainingbottomtime_.set (remainingbottomtime_traits::create (i, f, this));
          continue;
        }
      }

      // remainingo2time
      //
      if (n.name () == "remainingo2time" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->remainingo2time_)
        {
          this->remainingo2time_.set (remainingo2time_traits::create (i, f, this));
          continue;
        }
      }

      // setmarker
      //
      if (n.name () == "setmarker" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setmarker_type > r (
          setmarker_traits::create (i, f, this));

        if (!this->setmarker_)
        {
          this->setmarker_.set (::std::move (r));
          continue;
        }
      }

      // setpo2
      //
      if (n.name () == "setpo2" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< setpo2_type > r (
          setpo2_traits::create (i, f, this));

        if (!this->setpo2_)
        {
          this->setpo2_.set (::std::move (r));
          continue;
        }
      }

      // switchmix
      //
      if (n.name () == "switchmix" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< switchmix_type > r (
          switchmix_traits::create (i, f, this));

        if (!this->switchmix_)
        {
          this->switchmix_.set (::std::move (r));
          continue;
        }
      }

      // tankpressure
      //
      if (n.name () == "tankpressure" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< tankpressure_type > r (
          tankpressure_traits::create (i, f, this));

        this->tankpressure_.push_back (::std::move (r));
        continue;
      }

      // temperature
      //
      if (n.name () == "temperature" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->temperature_)
        {
          this->temperature_.set (temperature_traits::create (i, f, this));
          continue;
        }
      }

      // divemode
      //
      if (n.name () == "divemode" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< divemode_type > r (
          divemode_traits::create (i, f, this));

        if (!this->divemode_)
        {
          this->divemode_.set (::std::move (r));
          continue;
        }
      }

      // gradientfactor
      //
      if (n.name () == "gradientfactor" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< gradientfactor_type > r (
          gradientfactor_traits::create (i, f, this));

        if (!this->gradientfactor_)
        {
          this->gradientfactor_.set (::std::move (r));
          continue;
        }
      }

      // measuredpo2
      //
      if (n.name () == "measuredpo2" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< measuredpo2_type > r (
          measuredpo2_traits::create (i, f, this));

        this->measuredpo2_.push_back (::std::move (r));
        continue;
      }

      // nodecotime
      //
      if (n.name () == "nodecotime" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->nodecotime_)
        {
          this->nodecotime_.set (nodecotime_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }
  }

  waypointType* waypointType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class waypointType (*this, f, c);
  }

  waypointType& waypointType::
  operator= (const waypointType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->alarm_ = x.alarm_;
      this->batterychargecondition_ = x.batterychargecondition_;
      this->cns_ = x.cns_;
      this->decostop_ = x.decostop_;
      this->bodytemperature_ = x.bodytemperature_;
      this->calculatedpo2_ = x.calculatedpo2_;
      this->depth_ = x.depth_;
      this->divetime_ = x.divetime_;
      this->heading_ = x.heading_;
      this->heartrate_ = x.heartrate_;
      this->otu_ = x.otu_;
      this->pulserate_ = x.pulserate_;
      this->remainingbottomtime_ = x.remainingbottomtime_;
      this->remainingo2time_ = x.remainingo2time_;
      this->setmarker_ = x.setmarker_;
      this->setpo2_ = x.setpo2_;
      this->switchmix_ = x.switchmix_;
      this->tankpressure_ = x.tankpressure_;
      this->temperature_ = x.temperature_;
      this->divemode_ = x.divemode_;
      this->gradientfactor_ = x.gradientfactor_;
      this->measuredpo2_ = x.measuredpo2_;
      this->nodecotime_ = x.nodecotime_;
    }

    return *this;
  }

  waypointType::
  ~waypointType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const waypointType& i)
  {
    for (waypointType::alarm_const_iterator
         b (i.alarm ().begin ()), e (i.alarm ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "alarm: " << *b;
    }

    for (waypointType::batterychargecondition_const_iterator
         b (i.batterychargecondition ().begin ()), e (i.batterychargecondition ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "batterychargecondition: " << *b;
    }

    if (i.cns ())
    {
      o << ::std::endl << "cns: " << *i.cns ();
    }

    for (waypointType::decostop_const_iterator
         b (i.decostop ().begin ()), e (i.decostop ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "decostop: " << *b;
    }

    if (i.bodytemperature ())
    {
      o << ::std::endl << "bodytemperature: " << *i.bodytemperature ();
    }

    if (i.calculatedpo2 ())
    {
      o << ::std::endl << "calculatedpo2: " << *i.calculatedpo2 ();
    }

    if (i.depth ())
    {
      o << ::std::endl << "depth: " << *i.depth ();
    }

    if (i.divetime ())
    {
      o << ::std::endl << "divetime: " << *i.divetime ();
    }

    if (i.heading ())
    {
      o << ::std::endl << "heading: " << *i.heading ();
    }

    if (i.heartrate ())
    {
      o << ::std::endl << "heartrate: " << *i.heartrate ();
    }

    if (i.otu ())
    {
      o << ::std::endl << "otu: " << *i.otu ();
    }

    if (i.pulserate ())
    {
      o << ::std::endl << "pulserate: " << *i.pulserate ();
    }

    if (i.remainingbottomtime ())
    {
      o << ::std::endl << "remainingbottomtime: " << *i.remainingbottomtime ();
    }

    if (i.remainingo2time ())
    {
      o << ::std::endl << "remainingo2time: " << *i.remainingo2time ();
    }

    if (i.setmarker ())
    {
      o << ::std::endl << "setmarker: " << *i.setmarker ();
    }

    if (i.setpo2 ())
    {
      o << ::std::endl << "setpo2: " << *i.setpo2 ();
    }

    if (i.switchmix ())
    {
      o << ::std::endl << "switchmix: " << *i.switchmix ();
    }

    for (waypointType::tankpressure_const_iterator
         b (i.tankpressure ().begin ()), e (i.tankpressure ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "tankpressure: " << *b;
    }

    if (i.temperature ())
    {
      o << ::std::endl << "temperature: " << *i.temperature ();
    }

    if (i.divemode ())
    {
      o << ::std::endl << "divemode: " << *i.divemode ();
    }

    if (i.gradientfactor ())
    {
      o << ::std::endl << "gradientfactor: " << *i.gradientfactor ();
    }

    for (waypointType::measuredpo2_const_iterator
         b (i.measuredpo2 ().begin ()), e (i.measuredpo2 ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "measuredpo2: " << *b;
    }

    if (i.nodecotime ())
    {
      o << ::std::endl << "nodecotime: " << *i.nodecotime ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

