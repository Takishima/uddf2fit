// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "siteType.hxx"

#include "ID.hxx"

#include "environment.hxx"

#include "geographyType.hxx"

#include "ecologyType.hxx"

#include "sitedataType.hxx"

#include "ratingType.hxx"

#include "notesType.hxx"

namespace streit
{
  // siteType
  //

  const siteType::environment_optional& siteType::
  environment () const
  {
    return this->environment_;
  }

  siteType::environment_optional& siteType::
  environment ()
  {
    return this->environment_;
  }

  void siteType::
  environment (const environment_type& x)
  {
    this->environment_.set (x);
  }

  void siteType::
  environment (const environment_optional& x)
  {
    this->environment_ = x;
  }

  void siteType::
  environment (::std::unique_ptr< environment_type > x)
  {
    this->environment_.set (std::move (x));
  }

  const siteType::geography_optional& siteType::
  geography () const
  {
    return this->geography_;
  }

  siteType::geography_optional& siteType::
  geography ()
  {
    return this->geography_;
  }

  void siteType::
  geography (const geography_type& x)
  {
    this->geography_.set (x);
  }

  void siteType::
  geography (const geography_optional& x)
  {
    this->geography_ = x;
  }

  void siteType::
  geography (::std::unique_ptr< geography_type > x)
  {
    this->geography_.set (std::move (x));
  }

  const siteType::ecology_optional& siteType::
  ecology () const
  {
    return this->ecology_;
  }

  siteType::ecology_optional& siteType::
  ecology ()
  {
    return this->ecology_;
  }

  void siteType::
  ecology (const ecology_type& x)
  {
    this->ecology_.set (x);
  }

  void siteType::
  ecology (const ecology_optional& x)
  {
    this->ecology_ = x;
  }

  void siteType::
  ecology (::std::unique_ptr< ecology_type > x)
  {
    this->ecology_.set (std::move (x));
  }

  const siteType::sitedata_optional& siteType::
  sitedata () const
  {
    return this->sitedata_;
  }

  siteType::sitedata_optional& siteType::
  sitedata ()
  {
    return this->sitedata_;
  }

  void siteType::
  sitedata (const sitedata_type& x)
  {
    this->sitedata_.set (x);
  }

  void siteType::
  sitedata (const sitedata_optional& x)
  {
    this->sitedata_ = x;
  }

  void siteType::
  sitedata (::std::unique_ptr< sitedata_type > x)
  {
    this->sitedata_.set (std::move (x));
  }

  const siteType::rating_sequence& siteType::
  rating () const
  {
    return this->rating_;
  }

  siteType::rating_sequence& siteType::
  rating ()
  {
    return this->rating_;
  }

  void siteType::
  rating (const rating_sequence& s)
  {
    this->rating_ = s;
  }

  const siteType::notes_optional& siteType::
  notes () const
  {
    return this->notes_;
  }

  siteType::notes_optional& siteType::
  notes ()
  {
    return this->notes_;
  }

  void siteType::
  notes (const notes_type& x)
  {
    this->notes_.set (x);
  }

  void siteType::
  notes (const notes_optional& x)
  {
    this->notes_ = x;
  }

  void siteType::
  notes (::std::unique_ptr< notes_type > x)
  {
    this->notes_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // siteType
  //

  siteType::
  siteType (const id_type& id,
            const name_type& name)
  : ::streit::namedType (id,
                         name),
    environment_ (this),
    geography_ (this),
    ecology_ (this),
    sitedata_ (this),
    rating_ (this),
    notes_ (this)
  {
  }

  siteType::
  siteType (const siteType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::streit::namedType (x, f, c),
    environment_ (x.environment_, f, this),
    geography_ (x.geography_, f, this),
    ecology_ (x.ecology_, f, this),
    sitedata_ (x.sitedata_, f, this),
    rating_ (x.rating_, f, this),
    notes_ (x.notes_, f, this)
  {
  }

  siteType::
  siteType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::streit::namedType (e, f | ::xml_schema::flags::base, c),
    environment_ (this),
    geography_ (this),
    ecology_ (this),
    sitedata_ (this),
    rating_ (this),
    notes_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void siteType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::namedType::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // environment
      //
      if (n.name () == "environment" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< environment_type > r (
          environment_traits::create (i, f, this));

        if (!this->environment_)
        {
          this->environment_.set (::std::move (r));
          continue;
        }
      }

      // geography
      //
      if (n.name () == "geography" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< geography_type > r (
          geography_traits::create (i, f, this));

        if (!this->geography_)
        {
          this->geography_.set (::std::move (r));
          continue;
        }
      }

      // ecology
      //
      if (n.name () == "ecology" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< ecology_type > r (
          ecology_traits::create (i, f, this));

        if (!this->ecology_)
        {
          this->ecology_.set (::std::move (r));
          continue;
        }
      }

      // sitedata
      //
      if (n.name () == "sitedata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< sitedata_type > r (
          sitedata_traits::create (i, f, this));

        if (!this->sitedata_)
        {
          this->sitedata_.set (::std::move (r));
          continue;
        }
      }

      // rating
      //
      if (n.name () == "rating" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< rating_type > r (
          rating_traits::create (i, f, this));

        this->rating_.push_back (::std::move (r));
        continue;
      }

      // notes
      //
      if (n.name () == "notes" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< notes_type > r (
          notes_traits::create (i, f, this));

        if (!this->notes_)
        {
          this->notes_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  siteType* siteType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class siteType (*this, f, c);
  }

  siteType& siteType::
  operator= (const siteType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::namedType& > (*this) = x;
      this->environment_ = x.environment_;
      this->geography_ = x.geography_;
      this->ecology_ = x.ecology_;
      this->sitedata_ = x.sitedata_;
      this->rating_ = x.rating_;
      this->notes_ = x.notes_;
    }

    return *this;
  }

  siteType::
  ~siteType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const siteType& i)
  {
    o << static_cast< const ::streit::namedType& > (i);

    if (i.environment ())
    {
      o << ::std::endl << "environment: " << *i.environment ();
    }

    if (i.geography ())
    {
      o << ::std::endl << "geography: " << *i.geography ();
    }

    if (i.ecology ())
    {
      o << ::std::endl << "ecology: " << *i.ecology ();
    }

    if (i.sitedata ())
    {
      o << ::std::endl << "sitedata: " << *i.sitedata ();
    }

    for (siteType::rating_const_iterator
         b (i.rating ().begin ()), e (i.rating ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "rating: " << *b;
    }

    if (i.notes ())
    {
      o << ::std::endl << "notes: " << *i.notes ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

