// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "diveType.hxx"

#include "ID.hxx"

#include "applicationdataType.hxx"

#include "informationbeforediveType.hxx"

#include "tankdataType.hxx"

#include "samplesType.hxx"

#include "informationafterdiveType.hxx"

namespace streit
{
  // diveType
  //

  const diveType::applicationdata_optional& diveType::
  applicationdata () const
  {
    return this->applicationdata_;
  }

  diveType::applicationdata_optional& diveType::
  applicationdata ()
  {
    return this->applicationdata_;
  }

  void diveType::
  applicationdata (const applicationdata_type& x)
  {
    this->applicationdata_.set (x);
  }

  void diveType::
  applicationdata (const applicationdata_optional& x)
  {
    this->applicationdata_ = x;
  }

  void diveType::
  applicationdata (::std::unique_ptr< applicationdata_type > x)
  {
    this->applicationdata_.set (std::move (x));
  }

  const diveType::informationbeforedive_type& diveType::
  informationbeforedive () const
  {
    return this->informationbeforedive_.get ();
  }

  diveType::informationbeforedive_type& diveType::
  informationbeforedive ()
  {
    return this->informationbeforedive_.get ();
  }

  void diveType::
  informationbeforedive (const informationbeforedive_type& x)
  {
    this->informationbeforedive_.set (x);
  }

  void diveType::
  informationbeforedive (::std::unique_ptr< informationbeforedive_type > x)
  {
    this->informationbeforedive_.set (std::move (x));
  }

  const diveType::tankdata_sequence& diveType::
  tankdata () const
  {
    return this->tankdata_;
  }

  diveType::tankdata_sequence& diveType::
  tankdata ()
  {
    return this->tankdata_;
  }

  void diveType::
  tankdata (const tankdata_sequence& s)
  {
    this->tankdata_ = s;
  }

  const diveType::samples_optional& diveType::
  samples () const
  {
    return this->samples_;
  }

  diveType::samples_optional& diveType::
  samples ()
  {
    return this->samples_;
  }

  void diveType::
  samples (const samples_type& x)
  {
    this->samples_.set (x);
  }

  void diveType::
  samples (const samples_optional& x)
  {
    this->samples_ = x;
  }

  void diveType::
  samples (::std::unique_ptr< samples_type > x)
  {
    this->samples_.set (std::move (x));
  }

  const diveType::informationafterdive_type& diveType::
  informationafterdive () const
  {
    return this->informationafterdive_.get ();
  }

  diveType::informationafterdive_type& diveType::
  informationafterdive ()
  {
    return this->informationafterdive_.get ();
  }

  void diveType::
  informationafterdive (const informationafterdive_type& x)
  {
    this->informationafterdive_.set (x);
  }

  void diveType::
  informationafterdive (::std::unique_ptr< informationafterdive_type > x)
  {
    this->informationafterdive_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // diveType
  //

  diveType::
  diveType (const id_type& id,
            const informationbeforedive_type& informationbeforedive,
            const informationafterdive_type& informationafterdive)
  : ::streit::ID_TYPE (id),
    applicationdata_ (this),
    informationbeforedive_ (informationbeforedive, this),
    tankdata_ (this),
    samples_ (this),
    informationafterdive_ (informationafterdive, this)
  {
  }

  diveType::
  diveType (const id_type& id,
            ::std::unique_ptr< informationbeforedive_type > informationbeforedive,
            ::std::unique_ptr< informationafterdive_type > informationafterdive)
  : ::streit::ID_TYPE (id),
    applicationdata_ (this),
    informationbeforedive_ (std::move (informationbeforedive), this),
    tankdata_ (this),
    samples_ (this),
    informationafterdive_ (std::move (informationafterdive), this)
  {
  }

  diveType::
  diveType (const diveType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::streit::ID_TYPE (x, f, c),
    applicationdata_ (x.applicationdata_, f, this),
    informationbeforedive_ (x.informationbeforedive_, f, this),
    tankdata_ (x.tankdata_, f, this),
    samples_ (x.samples_, f, this),
    informationafterdive_ (x.informationafterdive_, f, this)
  {
  }

  diveType::
  diveType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::streit::ID_TYPE (e, f | ::xml_schema::flags::base, c),
    applicationdata_ (this),
    informationbeforedive_ (this),
    tankdata_ (this),
    samples_ (this),
    informationafterdive_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void diveType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::ID_TYPE::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // applicationdata
      //
      if (n.name () == "applicationdata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< applicationdata_type > r (
          applicationdata_traits::create (i, f, this));

        if (!this->applicationdata_)
        {
          this->applicationdata_.set (::std::move (r));
          continue;
        }
      }

      // informationbeforedive
      //
      if (n.name () == "informationbeforedive" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< informationbeforedive_type > r (
          informationbeforedive_traits::create (i, f, this));

        if (!informationbeforedive_.present ())
        {
          this->informationbeforedive_.set (::std::move (r));
          continue;
        }
      }

      // tankdata
      //
      if (n.name () == "tankdata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< tankdata_type > r (
          tankdata_traits::create (i, f, this));

        this->tankdata_.push_back (::std::move (r));
        continue;
      }

      // samples
      //
      if (n.name () == "samples" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< samples_type > r (
          samples_traits::create (i, f, this));

        if (!this->samples_)
        {
          this->samples_.set (::std::move (r));
          continue;
        }
      }

      // informationafterdive
      //
      if (n.name () == "informationafterdive" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< informationafterdive_type > r (
          informationafterdive_traits::create (i, f, this));

        if (!informationafterdive_.present ())
        {
          this->informationafterdive_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!informationbeforedive_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "informationbeforedive",
        "http://www.streit.cc/uddf/3.2/");
    }

    if (!informationafterdive_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "informationafterdive",
        "http://www.streit.cc/uddf/3.2/");
    }
  }

  diveType* diveType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class diveType (*this, f, c);
  }

  diveType& diveType::
  operator= (const diveType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::ID_TYPE& > (*this) = x;
      this->applicationdata_ = x.applicationdata_;
      this->informationbeforedive_ = x.informationbeforedive_;
      this->tankdata_ = x.tankdata_;
      this->samples_ = x.samples_;
      this->informationafterdive_ = x.informationafterdive_;
    }

    return *this;
  }

  diveType::
  ~diveType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const diveType& i)
  {
    o << static_cast< const ::streit::ID_TYPE& > (i);

    if (i.applicationdata ())
    {
      o << ::std::endl << "applicationdata: " << *i.applicationdata ();
    }

    o << ::std::endl << "informationbeforedive: " << i.informationbeforedive ();
    for (diveType::tankdata_const_iterator
         b (i.tankdata ().begin ()), e (i.tankdata ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "tankdata: " << *b;
    }

    if (i.samples ())
    {
      o << ::std::endl << "samples: " << *i.samples ();
    }

    o << ::std::endl << "informationafterdive: " << i.informationafterdive ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

