// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "imagedata.hxx"

#include "meteringmethod.hxx"

namespace streit
{
  // imagedata
  //

  const imagedata::aperture_optional& imagedata::
  aperture () const
  {
    return this->aperture_;
  }

  imagedata::aperture_optional& imagedata::
  aperture ()
  {
    return this->aperture_;
  }

  void imagedata::
  aperture (const aperture_type& x)
  {
    this->aperture_.set (x);
  }

  void imagedata::
  aperture (const aperture_optional& x)
  {
    this->aperture_ = x;
  }

  const imagedata::datetime_optional& imagedata::
  datetime () const
  {
    return this->datetime_;
  }

  imagedata::datetime_optional& imagedata::
  datetime ()
  {
    return this->datetime_;
  }

  void imagedata::
  datetime (const datetime_type& x)
  {
    this->datetime_.set (x);
  }

  void imagedata::
  datetime (const datetime_optional& x)
  {
    this->datetime_ = x;
  }

  void imagedata::
  datetime (::std::unique_ptr< datetime_type > x)
  {
    this->datetime_.set (std::move (x));
  }

  const imagedata::exposurecompensation_optional& imagedata::
  exposurecompensation () const
  {
    return this->exposurecompensation_;
  }

  imagedata::exposurecompensation_optional& imagedata::
  exposurecompensation ()
  {
    return this->exposurecompensation_;
  }

  void imagedata::
  exposurecompensation (const exposurecompensation_type& x)
  {
    this->exposurecompensation_.set (x);
  }

  void imagedata::
  exposurecompensation (const exposurecompensation_optional& x)
  {
    this->exposurecompensation_ = x;
  }

  const imagedata::filmspeed_optional& imagedata::
  filmspeed () const
  {
    return this->filmspeed_;
  }

  imagedata::filmspeed_optional& imagedata::
  filmspeed ()
  {
    return this->filmspeed_;
  }

  void imagedata::
  filmspeed (const filmspeed_type& x)
  {
    this->filmspeed_.set (x);
  }

  void imagedata::
  filmspeed (const filmspeed_optional& x)
  {
    this->filmspeed_ = x;
  }

  const imagedata::focallength_optional& imagedata::
  focallength () const
  {
    return this->focallength_;
  }

  imagedata::focallength_optional& imagedata::
  focallength ()
  {
    return this->focallength_;
  }

  void imagedata::
  focallength (const focallength_type& x)
  {
    this->focallength_.set (x);
  }

  void imagedata::
  focallength (const focallength_optional& x)
  {
    this->focallength_ = x;
  }

  const imagedata::focusingdistance_optional& imagedata::
  focusingdistance () const
  {
    return this->focusingdistance_;
  }

  imagedata::focusingdistance_optional& imagedata::
  focusingdistance ()
  {
    return this->focusingdistance_;
  }

  void imagedata::
  focusingdistance (const focusingdistance_type& x)
  {
    this->focusingdistance_.set (x);
  }

  void imagedata::
  focusingdistance (const focusingdistance_optional& x)
  {
    this->focusingdistance_ = x;
  }

  const imagedata::meteringmethod_optional& imagedata::
  meteringmethod () const
  {
    return this->meteringmethod_;
  }

  imagedata::meteringmethod_optional& imagedata::
  meteringmethod ()
  {
    return this->meteringmethod_;
  }

  void imagedata::
  meteringmethod (const meteringmethod_type& x)
  {
    this->meteringmethod_.set (x);
  }

  void imagedata::
  meteringmethod (const meteringmethod_optional& x)
  {
    this->meteringmethod_ = x;
  }

  void imagedata::
  meteringmethod (::std::unique_ptr< meteringmethod_type > x)
  {
    this->meteringmethod_.set (std::move (x));
  }

  const imagedata::shutterspeed_optional& imagedata::
  shutterspeed () const
  {
    return this->shutterspeed_;
  }

  imagedata::shutterspeed_optional& imagedata::
  shutterspeed ()
  {
    return this->shutterspeed_;
  }

  void imagedata::
  shutterspeed (const shutterspeed_type& x)
  {
    this->shutterspeed_.set (x);
  }

  void imagedata::
  shutterspeed (const shutterspeed_optional& x)
  {
    this->shutterspeed_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // imagedata
  //

  imagedata::
  imagedata ()
  : ::xml_schema::type (),
    aperture_ (this),
    datetime_ (this),
    exposurecompensation_ (this),
    filmspeed_ (this),
    focallength_ (this),
    focusingdistance_ (this),
    meteringmethod_ (this),
    shutterspeed_ (this)
  {
  }

  imagedata::
  imagedata (const imagedata& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    aperture_ (x.aperture_, f, this),
    datetime_ (x.datetime_, f, this),
    exposurecompensation_ (x.exposurecompensation_, f, this),
    filmspeed_ (x.filmspeed_, f, this),
    focallength_ (x.focallength_, f, this),
    focusingdistance_ (x.focusingdistance_, f, this),
    meteringmethod_ (x.meteringmethod_, f, this),
    shutterspeed_ (x.shutterspeed_, f, this)
  {
  }

  imagedata::
  imagedata (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    aperture_ (this),
    datetime_ (this),
    exposurecompensation_ (this),
    filmspeed_ (this),
    focallength_ (this),
    focusingdistance_ (this),
    meteringmethod_ (this),
    shutterspeed_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void imagedata::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // aperture
      //
      if (n.name () == "aperture" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->aperture_)
        {
          this->aperture_.set (aperture_traits::create (i, f, this));
          continue;
        }
      }

      // datetime
      //
      if (n.name () == "datetime" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< datetime_type > r (
          datetime_traits::create (i, f, this));

        if (!this->datetime_)
        {
          this->datetime_.set (::std::move (r));
          continue;
        }
      }

      // exposurecompensation
      //
      if (n.name () == "exposurecompensation" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->exposurecompensation_)
        {
          this->exposurecompensation_.set (exposurecompensation_traits::create (i, f, this));
          continue;
        }
      }

      // filmspeed
      //
      if (n.name () == "filmspeed" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->filmspeed_)
        {
          this->filmspeed_.set (filmspeed_traits::create (i, f, this));
          continue;
        }
      }

      // focallength
      //
      if (n.name () == "focallength" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->focallength_)
        {
          this->focallength_.set (focallength_traits::create (i, f, this));
          continue;
        }
      }

      // focusingdistance
      //
      if (n.name () == "focusingdistance" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->focusingdistance_)
        {
          this->focusingdistance_.set (focusingdistance_traits::create (i, f, this));
          continue;
        }
      }

      // meteringmethod
      //
      if (n.name () == "meteringmethod" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< meteringmethod_type > r (
          meteringmethod_traits::create (i, f, this));

        if (!this->meteringmethod_)
        {
          this->meteringmethod_.set (::std::move (r));
          continue;
        }
      }

      // shutterspeed
      //
      if (n.name () == "shutterspeed" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->shutterspeed_)
        {
          this->shutterspeed_.set (shutterspeed_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }
  }

  imagedata* imagedata::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class imagedata (*this, f, c);
  }

  imagedata& imagedata::
  operator= (const imagedata& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->aperture_ = x.aperture_;
      this->datetime_ = x.datetime_;
      this->exposurecompensation_ = x.exposurecompensation_;
      this->filmspeed_ = x.filmspeed_;
      this->focallength_ = x.focallength_;
      this->focusingdistance_ = x.focusingdistance_;
      this->meteringmethod_ = x.meteringmethod_;
      this->shutterspeed_ = x.shutterspeed_;
    }

    return *this;
  }

  imagedata::
  ~imagedata ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const imagedata& i)
  {
    if (i.aperture ())
    {
      o << ::std::endl << "aperture: " << *i.aperture ();
    }

    if (i.datetime ())
    {
      o << ::std::endl << "datetime: " << *i.datetime ();
    }

    if (i.exposurecompensation ())
    {
      o << ::std::endl << "exposurecompensation: " << *i.exposurecompensation ();
    }

    if (i.filmspeed ())
    {
      o << ::std::endl << "filmspeed: " << *i.filmspeed ();
    }

    if (i.focallength ())
    {
      o << ::std::endl << "focallength: " << *i.focallength ();
    }

    if (i.focusingdistance ())
    {
      o << ::std::endl << "focusingdistance: " << *i.focusingdistance ();
    }

    if (i.meteringmethod ())
    {
      o << ::std::endl << "meteringmethod: " << *i.meteringmethod ();
    }

    if (i.shutterspeed ())
    {
      o << ::std::endl << "shutterspeed: " << *i.shutterspeed ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

