// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "invertebrataType.hxx"

#include "singleLifeFormType.hxx"

namespace streit
{
  // invertebrataType
  //

  const invertebrataType::porifera_optional& invertebrataType::
  porifera () const
  {
    return this->porifera_;
  }

  invertebrataType::porifera_optional& invertebrataType::
  porifera ()
  {
    return this->porifera_;
  }

  void invertebrataType::
  porifera (const porifera_type& x)
  {
    this->porifera_.set (x);
  }

  void invertebrataType::
  porifera (const porifera_optional& x)
  {
    this->porifera_ = x;
  }

  void invertebrataType::
  porifera (::std::unique_ptr< porifera_type > x)
  {
    this->porifera_.set (std::move (x));
  }

  const invertebrataType::coelenterata_optional& invertebrataType::
  coelenterata () const
  {
    return this->coelenterata_;
  }

  invertebrataType::coelenterata_optional& invertebrataType::
  coelenterata ()
  {
    return this->coelenterata_;
  }

  void invertebrataType::
  coelenterata (const coelenterata_type& x)
  {
    this->coelenterata_.set (x);
  }

  void invertebrataType::
  coelenterata (const coelenterata_optional& x)
  {
    this->coelenterata_ = x;
  }

  void invertebrataType::
  coelenterata (::std::unique_ptr< coelenterata_type > x)
  {
    this->coelenterata_.set (std::move (x));
  }

  const invertebrataType::cnidaria_optional& invertebrataType::
  cnidaria () const
  {
    return this->cnidaria_;
  }

  invertebrataType::cnidaria_optional& invertebrataType::
  cnidaria ()
  {
    return this->cnidaria_;
  }

  void invertebrataType::
  cnidaria (const cnidaria_type& x)
  {
    this->cnidaria_.set (x);
  }

  void invertebrataType::
  cnidaria (const cnidaria_optional& x)
  {
    this->cnidaria_ = x;
  }

  void invertebrataType::
  cnidaria (::std::unique_ptr< cnidaria_type > x)
  {
    this->cnidaria_.set (std::move (x));
  }

  const invertebrataType::ctenophora_optional& invertebrataType::
  ctenophora () const
  {
    return this->ctenophora_;
  }

  invertebrataType::ctenophora_optional& invertebrataType::
  ctenophora ()
  {
    return this->ctenophora_;
  }

  void invertebrataType::
  ctenophora (const ctenophora_type& x)
  {
    this->ctenophora_.set (x);
  }

  void invertebrataType::
  ctenophora (const ctenophora_optional& x)
  {
    this->ctenophora_ = x;
  }

  void invertebrataType::
  ctenophora (::std::unique_ptr< ctenophora_type > x)
  {
    this->ctenophora_.set (std::move (x));
  }

  const invertebrataType::plathelminthes_optional& invertebrataType::
  plathelminthes () const
  {
    return this->plathelminthes_;
  }

  invertebrataType::plathelminthes_optional& invertebrataType::
  plathelminthes ()
  {
    return this->plathelminthes_;
  }

  void invertebrataType::
  plathelminthes (const plathelminthes_type& x)
  {
    this->plathelminthes_.set (x);
  }

  void invertebrataType::
  plathelminthes (const plathelminthes_optional& x)
  {
    this->plathelminthes_ = x;
  }

  void invertebrataType::
  plathelminthes (::std::unique_ptr< plathelminthes_type > x)
  {
    this->plathelminthes_.set (std::move (x));
  }

  const invertebrataType::bryozoa_optional& invertebrataType::
  bryozoa () const
  {
    return this->bryozoa_;
  }

  invertebrataType::bryozoa_optional& invertebrataType::
  bryozoa ()
  {
    return this->bryozoa_;
  }

  void invertebrataType::
  bryozoa (const bryozoa_type& x)
  {
    this->bryozoa_.set (x);
  }

  void invertebrataType::
  bryozoa (const bryozoa_optional& x)
  {
    this->bryozoa_ = x;
  }

  void invertebrataType::
  bryozoa (::std::unique_ptr< bryozoa_type > x)
  {
    this->bryozoa_.set (std::move (x));
  }

  const invertebrataType::phoronidea_optional& invertebrataType::
  phoronidea () const
  {
    return this->phoronidea_;
  }

  invertebrataType::phoronidea_optional& invertebrataType::
  phoronidea ()
  {
    return this->phoronidea_;
  }

  void invertebrataType::
  phoronidea (const phoronidea_type& x)
  {
    this->phoronidea_.set (x);
  }

  void invertebrataType::
  phoronidea (const phoronidea_optional& x)
  {
    this->phoronidea_ = x;
  }

  void invertebrataType::
  phoronidea (::std::unique_ptr< phoronidea_type > x)
  {
    this->phoronidea_.set (std::move (x));
  }

  const invertebrataType::ascidiacea_optional& invertebrataType::
  ascidiacea () const
  {
    return this->ascidiacea_;
  }

  invertebrataType::ascidiacea_optional& invertebrataType::
  ascidiacea ()
  {
    return this->ascidiacea_;
  }

  void invertebrataType::
  ascidiacea (const ascidiacea_type& x)
  {
    this->ascidiacea_.set (x);
  }

  void invertebrataType::
  ascidiacea (const ascidiacea_optional& x)
  {
    this->ascidiacea_ = x;
  }

  void invertebrataType::
  ascidiacea (::std::unique_ptr< ascidiacea_type > x)
  {
    this->ascidiacea_.set (std::move (x));
  }

  const invertebrataType::echinodermata_optional& invertebrataType::
  echinodermata () const
  {
    return this->echinodermata_;
  }

  invertebrataType::echinodermata_optional& invertebrataType::
  echinodermata ()
  {
    return this->echinodermata_;
  }

  void invertebrataType::
  echinodermata (const echinodermata_type& x)
  {
    this->echinodermata_.set (x);
  }

  void invertebrataType::
  echinodermata (const echinodermata_optional& x)
  {
    this->echinodermata_ = x;
  }

  void invertebrataType::
  echinodermata (::std::unique_ptr< echinodermata_type > x)
  {
    this->echinodermata_.set (std::move (x));
  }

  const invertebrataType::mollusca_optional& invertebrataType::
  mollusca () const
  {
    return this->mollusca_;
  }

  invertebrataType::mollusca_optional& invertebrataType::
  mollusca ()
  {
    return this->mollusca_;
  }

  void invertebrataType::
  mollusca (const mollusca_type& x)
  {
    this->mollusca_.set (x);
  }

  void invertebrataType::
  mollusca (const mollusca_optional& x)
  {
    this->mollusca_ = x;
  }

  void invertebrataType::
  mollusca (::std::unique_ptr< mollusca_type > x)
  {
    this->mollusca_.set (std::move (x));
  }

  const invertebrataType::crustacea_optional& invertebrataType::
  crustacea () const
  {
    return this->crustacea_;
  }

  invertebrataType::crustacea_optional& invertebrataType::
  crustacea ()
  {
    return this->crustacea_;
  }

  void invertebrataType::
  crustacea (const crustacea_type& x)
  {
    this->crustacea_.set (x);
  }

  void invertebrataType::
  crustacea (const crustacea_optional& x)
  {
    this->crustacea_ = x;
  }

  void invertebrataType::
  crustacea (::std::unique_ptr< crustacea_type > x)
  {
    this->crustacea_.set (std::move (x));
  }

  const invertebrataType::invertebratavarious_optional& invertebrataType::
  invertebratavarious () const
  {
    return this->invertebratavarious_;
  }

  invertebrataType::invertebratavarious_optional& invertebrataType::
  invertebratavarious ()
  {
    return this->invertebratavarious_;
  }

  void invertebrataType::
  invertebratavarious (const invertebratavarious_type& x)
  {
    this->invertebratavarious_.set (x);
  }

  void invertebrataType::
  invertebratavarious (const invertebratavarious_optional& x)
  {
    this->invertebratavarious_ = x;
  }

  void invertebrataType::
  invertebratavarious (::std::unique_ptr< invertebratavarious_type > x)
  {
    this->invertebratavarious_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // invertebrataType
  //

  invertebrataType::
  invertebrataType ()
  : ::xml_schema::type (),
    porifera_ (this),
    coelenterata_ (this),
    cnidaria_ (this),
    ctenophora_ (this),
    plathelminthes_ (this),
    bryozoa_ (this),
    phoronidea_ (this),
    ascidiacea_ (this),
    echinodermata_ (this),
    mollusca_ (this),
    crustacea_ (this),
    invertebratavarious_ (this)
  {
  }

  invertebrataType::
  invertebrataType (const invertebrataType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    porifera_ (x.porifera_, f, this),
    coelenterata_ (x.coelenterata_, f, this),
    cnidaria_ (x.cnidaria_, f, this),
    ctenophora_ (x.ctenophora_, f, this),
    plathelminthes_ (x.plathelminthes_, f, this),
    bryozoa_ (x.bryozoa_, f, this),
    phoronidea_ (x.phoronidea_, f, this),
    ascidiacea_ (x.ascidiacea_, f, this),
    echinodermata_ (x.echinodermata_, f, this),
    mollusca_ (x.mollusca_, f, this),
    crustacea_ (x.crustacea_, f, this),
    invertebratavarious_ (x.invertebratavarious_, f, this)
  {
  }

  invertebrataType::
  invertebrataType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    porifera_ (this),
    coelenterata_ (this),
    cnidaria_ (this),
    ctenophora_ (this),
    plathelminthes_ (this),
    bryozoa_ (this),
    phoronidea_ (this),
    ascidiacea_ (this),
    echinodermata_ (this),
    mollusca_ (this),
    crustacea_ (this),
    invertebratavarious_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void invertebrataType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // porifera
      //
      if (n.name () == "porifera" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< porifera_type > r (
          porifera_traits::create (i, f, this));

        if (!this->porifera_)
        {
          this->porifera_.set (::std::move (r));
          continue;
        }
      }

      // coelenterata
      //
      if (n.name () == "coelenterata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< coelenterata_type > r (
          coelenterata_traits::create (i, f, this));

        if (!this->coelenterata_)
        {
          this->coelenterata_.set (::std::move (r));
          continue;
        }
      }

      // cnidaria
      //
      if (n.name () == "cnidaria" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< cnidaria_type > r (
          cnidaria_traits::create (i, f, this));

        if (!this->cnidaria_)
        {
          this->cnidaria_.set (::std::move (r));
          continue;
        }
      }

      // ctenophora
      //
      if (n.name () == "ctenophora" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< ctenophora_type > r (
          ctenophora_traits::create (i, f, this));

        if (!this->ctenophora_)
        {
          this->ctenophora_.set (::std::move (r));
          continue;
        }
      }

      // plathelminthes
      //
      if (n.name () == "plathelminthes" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< plathelminthes_type > r (
          plathelminthes_traits::create (i, f, this));

        if (!this->plathelminthes_)
        {
          this->plathelminthes_.set (::std::move (r));
          continue;
        }
      }

      // bryozoa
      //
      if (n.name () == "bryozoa" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< bryozoa_type > r (
          bryozoa_traits::create (i, f, this));

        if (!this->bryozoa_)
        {
          this->bryozoa_.set (::std::move (r));
          continue;
        }
      }

      // phoronidea
      //
      if (n.name () == "phoronidea" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< phoronidea_type > r (
          phoronidea_traits::create (i, f, this));

        if (!this->phoronidea_)
        {
          this->phoronidea_.set (::std::move (r));
          continue;
        }
      }

      // ascidiacea
      //
      if (n.name () == "ascidiacea" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< ascidiacea_type > r (
          ascidiacea_traits::create (i, f, this));

        if (!this->ascidiacea_)
        {
          this->ascidiacea_.set (::std::move (r));
          continue;
        }
      }

      // echinodermata
      //
      if (n.name () == "echinodermata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< echinodermata_type > r (
          echinodermata_traits::create (i, f, this));

        if (!this->echinodermata_)
        {
          this->echinodermata_.set (::std::move (r));
          continue;
        }
      }

      // mollusca
      //
      if (n.name () == "mollusca" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< mollusca_type > r (
          mollusca_traits::create (i, f, this));

        if (!this->mollusca_)
        {
          this->mollusca_.set (::std::move (r));
          continue;
        }
      }

      // crustacea
      //
      if (n.name () == "crustacea" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< crustacea_type > r (
          crustacea_traits::create (i, f, this));

        if (!this->crustacea_)
        {
          this->crustacea_.set (::std::move (r));
          continue;
        }
      }

      // invertebratavarious
      //
      if (n.name () == "invertebratavarious" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< invertebratavarious_type > r (
          invertebratavarious_traits::create (i, f, this));

        if (!this->invertebratavarious_)
        {
          this->invertebratavarious_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  invertebrataType* invertebrataType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class invertebrataType (*this, f, c);
  }

  invertebrataType& invertebrataType::
  operator= (const invertebrataType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->porifera_ = x.porifera_;
      this->coelenterata_ = x.coelenterata_;
      this->cnidaria_ = x.cnidaria_;
      this->ctenophora_ = x.ctenophora_;
      this->plathelminthes_ = x.plathelminthes_;
      this->bryozoa_ = x.bryozoa_;
      this->phoronidea_ = x.phoronidea_;
      this->ascidiacea_ = x.ascidiacea_;
      this->echinodermata_ = x.echinodermata_;
      this->mollusca_ = x.mollusca_;
      this->crustacea_ = x.crustacea_;
      this->invertebratavarious_ = x.invertebratavarious_;
    }

    return *this;
  }

  invertebrataType::
  ~invertebrataType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const invertebrataType& i)
  {
    if (i.porifera ())
    {
      o << ::std::endl << "porifera: " << *i.porifera ();
    }

    if (i.coelenterata ())
    {
      o << ::std::endl << "coelenterata: " << *i.coelenterata ();
    }

    if (i.cnidaria ())
    {
      o << ::std::endl << "cnidaria: " << *i.cnidaria ();
    }

    if (i.ctenophora ())
    {
      o << ::std::endl << "ctenophora: " << *i.ctenophora ();
    }

    if (i.plathelminthes ())
    {
      o << ::std::endl << "plathelminthes: " << *i.plathelminthes ();
    }

    if (i.bryozoa ())
    {
      o << ::std::endl << "bryozoa: " << *i.bryozoa ();
    }

    if (i.phoronidea ())
    {
      o << ::std::endl << "phoronidea: " << *i.phoronidea ();
    }

    if (i.ascidiacea ())
    {
      o << ::std::endl << "ascidiacea: " << *i.ascidiacea ();
    }

    if (i.echinodermata ())
    {
      o << ::std::endl << "echinodermata: " << *i.echinodermata ();
    }

    if (i.mollusca ())
    {
      o << ::std::endl << "mollusca: " << *i.mollusca ();
    }

    if (i.crustacea ())
    {
      o << ::std::endl << "crustacea: " << *i.crustacea ();
    }

    if (i.invertebratavarious ())
    {
      o << ::std::endl << "invertebratavarious: " << *i.invertebratavarious ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

