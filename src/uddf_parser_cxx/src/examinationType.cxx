// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "examinationType.hxx"

#include "individualType.hxx"

#include "linkType.hxx"

#include "examinationresult.hxx"

#include "notesType.hxx"

namespace streit
{
  // examinationType
  //

  const examinationType::datetime_optional& examinationType::
  datetime () const
  {
    return this->datetime_;
  }

  examinationType::datetime_optional& examinationType::
  datetime ()
  {
    return this->datetime_;
  }

  void examinationType::
  datetime (const datetime_type& x)
  {
    this->datetime_.set (x);
  }

  void examinationType::
  datetime (const datetime_optional& x)
  {
    this->datetime_ = x;
  }

  void examinationType::
  datetime (::std::unique_ptr< datetime_type > x)
  {
    this->datetime_.set (std::move (x));
  }

  const examinationType::doctor_optional& examinationType::
  doctor () const
  {
    return this->doctor_;
  }

  examinationType::doctor_optional& examinationType::
  doctor ()
  {
    return this->doctor_;
  }

  void examinationType::
  doctor (const doctor_type& x)
  {
    this->doctor_.set (x);
  }

  void examinationType::
  doctor (const doctor_optional& x)
  {
    this->doctor_ = x;
  }

  void examinationType::
  doctor (::std::unique_ptr< doctor_type > x)
  {
    this->doctor_.set (std::move (x));
  }

  const examinationType::link_optional& examinationType::
  link () const
  {
    return this->link_;
  }

  examinationType::link_optional& examinationType::
  link ()
  {
    return this->link_;
  }

  void examinationType::
  link (const link_type& x)
  {
    this->link_.set (x);
  }

  void examinationType::
  link (const link_optional& x)
  {
    this->link_ = x;
  }

  void examinationType::
  link (::std::unique_ptr< link_type > x)
  {
    this->link_.set (std::move (x));
  }

  const examinationType::examinationresult_optional& examinationType::
  examinationresult () const
  {
    return this->examinationresult_;
  }

  examinationType::examinationresult_optional& examinationType::
  examinationresult ()
  {
    return this->examinationresult_;
  }

  void examinationType::
  examinationresult (const examinationresult_type& x)
  {
    this->examinationresult_.set (x);
  }

  void examinationType::
  examinationresult (const examinationresult_optional& x)
  {
    this->examinationresult_ = x;
  }

  void examinationType::
  examinationresult (::std::unique_ptr< examinationresult_type > x)
  {
    this->examinationresult_.set (std::move (x));
  }

  const examinationType::totallungcapacity_optional& examinationType::
  totallungcapacity () const
  {
    return this->totallungcapacity_;
  }

  examinationType::totallungcapacity_optional& examinationType::
  totallungcapacity ()
  {
    return this->totallungcapacity_;
  }

  void examinationType::
  totallungcapacity (const totallungcapacity_type& x)
  {
    this->totallungcapacity_.set (x);
  }

  void examinationType::
  totallungcapacity (const totallungcapacity_optional& x)
  {
    this->totallungcapacity_ = x;
  }

  const examinationType::vitalcapacity_optional& examinationType::
  vitalcapacity () const
  {
    return this->vitalcapacity_;
  }

  examinationType::vitalcapacity_optional& examinationType::
  vitalcapacity ()
  {
    return this->vitalcapacity_;
  }

  void examinationType::
  vitalcapacity (const vitalcapacity_type& x)
  {
    this->vitalcapacity_.set (x);
  }

  void examinationType::
  vitalcapacity (const vitalcapacity_optional& x)
  {
    this->vitalcapacity_ = x;
  }

  const examinationType::notes_optional& examinationType::
  notes () const
  {
    return this->notes_;
  }

  examinationType::notes_optional& examinationType::
  notes ()
  {
    return this->notes_;
  }

  void examinationType::
  notes (const notes_type& x)
  {
    this->notes_.set (x);
  }

  void examinationType::
  notes (const notes_optional& x)
  {
    this->notes_ = x;
  }

  void examinationType::
  notes (::std::unique_ptr< notes_type > x)
  {
    this->notes_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // examinationType
  //

  examinationType::
  examinationType ()
  : ::xml_schema::type (),
    datetime_ (this),
    doctor_ (this),
    link_ (this),
    examinationresult_ (this),
    totallungcapacity_ (this),
    vitalcapacity_ (this),
    notes_ (this)
  {
  }

  examinationType::
  examinationType (const examinationType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    datetime_ (x.datetime_, f, this),
    doctor_ (x.doctor_, f, this),
    link_ (x.link_, f, this),
    examinationresult_ (x.examinationresult_, f, this),
    totallungcapacity_ (x.totallungcapacity_, f, this),
    vitalcapacity_ (x.vitalcapacity_, f, this),
    notes_ (x.notes_, f, this)
  {
  }

  examinationType::
  examinationType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    datetime_ (this),
    doctor_ (this),
    link_ (this),
    examinationresult_ (this),
    totallungcapacity_ (this),
    vitalcapacity_ (this),
    notes_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void examinationType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // datetime
      //
      if (n.name () == "datetime" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< datetime_type > r (
          datetime_traits::create (i, f, this));

        if (!this->datetime_)
        {
          this->datetime_.set (::std::move (r));
          continue;
        }
      }

      // doctor
      //
      if (n.name () == "doctor" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< doctor_type > r (
          doctor_traits::create (i, f, this));

        if (!this->doctor_)
        {
          this->doctor_.set (::std::move (r));
          continue;
        }
      }

      // link
      //
      if (n.name () == "link" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< link_type > r (
          link_traits::create (i, f, this));

        if (!this->link_)
        {
          this->link_.set (::std::move (r));
          continue;
        }
      }

      // examinationresult
      //
      if (n.name () == "examinationresult" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< examinationresult_type > r (
          examinationresult_traits::create (i, f, this));

        if (!this->examinationresult_)
        {
          this->examinationresult_.set (::std::move (r));
          continue;
        }
      }

      // totallungcapacity
      //
      if (n.name () == "totallungcapacity" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->totallungcapacity_)
        {
          this->totallungcapacity_.set (totallungcapacity_traits::create (i, f, this));
          continue;
        }
      }

      // vitalcapacity
      //
      if (n.name () == "vitalcapacity" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->vitalcapacity_)
        {
          this->vitalcapacity_.set (vitalcapacity_traits::create (i, f, this));
          continue;
        }
      }

      // notes
      //
      if (n.name () == "notes" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< notes_type > r (
          notes_traits::create (i, f, this));

        if (!this->notes_)
        {
          this->notes_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  examinationType* examinationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class examinationType (*this, f, c);
  }

  examinationType& examinationType::
  operator= (const examinationType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->datetime_ = x.datetime_;
      this->doctor_ = x.doctor_;
      this->link_ = x.link_;
      this->examinationresult_ = x.examinationresult_;
      this->totallungcapacity_ = x.totallungcapacity_;
      this->vitalcapacity_ = x.vitalcapacity_;
      this->notes_ = x.notes_;
    }

    return *this;
  }

  examinationType::
  ~examinationType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const examinationType& i)
  {
    if (i.datetime ())
    {
      o << ::std::endl << "datetime: " << *i.datetime ();
    }

    if (i.doctor ())
    {
      o << ::std::endl << "doctor: " << *i.doctor ();
    }

    if (i.link ())
    {
      o << ::std::endl << "link: " << *i.link ();
    }

    if (i.examinationresult ())
    {
      o << ::std::endl << "examinationresult: " << *i.examinationresult ();
    }

    if (i.totallungcapacity ())
    {
      o << ::std::endl << "totallungcapacity: " << *i.totallungcapacity ();
    }

    if (i.vitalcapacity ())
    {
      o << ::std::endl << "vitalcapacity: " << *i.vitalcapacity ();
    }

    if (i.notes ())
    {
      o << ::std::endl << "notes: " << *i.notes ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

