// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "sitedataType.hxx"

#include "ratingvalueType.hxx"

#include "globallightintensityType.hxx"

#include "wreckType.hxx"

#include "caveType.hxx"

#include "indoorType.hxx"

#include "placeType.hxx"

namespace streit
{
  // sitedataType
  //

  const sitedataType::arealength_optional& sitedataType::
  arealength () const
  {
    return this->arealength_;
  }

  sitedataType::arealength_optional& sitedataType::
  arealength ()
  {
    return this->arealength_;
  }

  void sitedataType::
  arealength (const arealength_type& x)
  {
    this->arealength_.set (x);
  }

  void sitedataType::
  arealength (const arealength_optional& x)
  {
    this->arealength_ = x;
  }

  const sitedataType::areawidth_optional& sitedataType::
  areawidth () const
  {
    return this->areawidth_;
  }

  sitedataType::areawidth_optional& sitedataType::
  areawidth ()
  {
    return this->areawidth_;
  }

  void sitedataType::
  areawidth (const areawidth_type& x)
  {
    this->areawidth_.set (x);
  }

  void sitedataType::
  areawidth (const areawidth_optional& x)
  {
    this->areawidth_ = x;
  }

  const sitedataType::averagevisibility_optional& sitedataType::
  averagevisibility () const
  {
    return this->averagevisibility_;
  }

  sitedataType::averagevisibility_optional& sitedataType::
  averagevisibility ()
  {
    return this->averagevisibility_;
  }

  void sitedataType::
  averagevisibility (const averagevisibility_type& x)
  {
    this->averagevisibility_.set (x);
  }

  void sitedataType::
  averagevisibility (const averagevisibility_optional& x)
  {
    this->averagevisibility_ = x;
  }

  const sitedataType::bottom_optional& sitedataType::
  bottom () const
  {
    return this->bottom_;
  }

  sitedataType::bottom_optional& sitedataType::
  bottom ()
  {
    return this->bottom_;
  }

  void sitedataType::
  bottom (const bottom_type& x)
  {
    this->bottom_.set (x);
  }

  void sitedataType::
  bottom (const bottom_optional& x)
  {
    this->bottom_ = x;
  }

  void sitedataType::
  bottom (::std::unique_ptr< bottom_type > x)
  {
    this->bottom_.set (std::move (x));
  }

  const sitedataType::density_optional& sitedataType::
  density () const
  {
    return this->density_;
  }

  sitedataType::density_optional& sitedataType::
  density ()
  {
    return this->density_;
  }

  void sitedataType::
  density (const density_type& x)
  {
    this->density_.set (x);
  }

  void sitedataType::
  density (const density_optional& x)
  {
    this->density_ = x;
  }

  const sitedataType::difficulty_optional& sitedataType::
  difficulty () const
  {
    return this->difficulty_;
  }

  sitedataType::difficulty_optional& sitedataType::
  difficulty ()
  {
    return this->difficulty_;
  }

  void sitedataType::
  difficulty (const difficulty_type& x)
  {
    this->difficulty_.set (x);
  }

  void sitedataType::
  difficulty (const difficulty_optional& x)
  {
    this->difficulty_ = x;
  }

  void sitedataType::
  difficulty (::std::unique_ptr< difficulty_type > x)
  {
    this->difficulty_.set (std::move (x));
  }

  const sitedataType::globallightintensity_optional& sitedataType::
  globallightintensity () const
  {
    return this->globallightintensity_;
  }

  sitedataType::globallightintensity_optional& sitedataType::
  globallightintensity ()
  {
    return this->globallightintensity_;
  }

  void sitedataType::
  globallightintensity (const globallightintensity_type& x)
  {
    this->globallightintensity_.set (x);
  }

  void sitedataType::
  globallightintensity (const globallightintensity_optional& x)
  {
    this->globallightintensity_ = x;
  }

  void sitedataType::
  globallightintensity (::std::unique_ptr< globallightintensity_type > x)
  {
    this->globallightintensity_.set (std::move (x));
  }

  const sitedataType::maximumdepth_optional& sitedataType::
  maximumdepth () const
  {
    return this->maximumdepth_;
  }

  sitedataType::maximumdepth_optional& sitedataType::
  maximumdepth ()
  {
    return this->maximumdepth_;
  }

  void sitedataType::
  maximumdepth (const maximumdepth_type& x)
  {
    this->maximumdepth_.set (x);
  }

  void sitedataType::
  maximumdepth (const maximumdepth_optional& x)
  {
    this->maximumdepth_ = x;
  }

  const sitedataType::maximumvisibility_optional& sitedataType::
  maximumvisibility () const
  {
    return this->maximumvisibility_;
  }

  sitedataType::maximumvisibility_optional& sitedataType::
  maximumvisibility ()
  {
    return this->maximumvisibility_;
  }

  void sitedataType::
  maximumvisibility (const maximumvisibility_type& x)
  {
    this->maximumvisibility_.set (x);
  }

  void sitedataType::
  maximumvisibility (const maximumvisibility_optional& x)
  {
    this->maximumvisibility_ = x;
  }

  const sitedataType::minimumdepth_optional& sitedataType::
  minimumdepth () const
  {
    return this->minimumdepth_;
  }

  sitedataType::minimumdepth_optional& sitedataType::
  minimumdepth ()
  {
    return this->minimumdepth_;
  }

  void sitedataType::
  minimumdepth (const minimumdepth_type& x)
  {
    this->minimumdepth_.set (x);
  }

  void sitedataType::
  minimumdepth (const minimumdepth_optional& x)
  {
    this->minimumdepth_ = x;
  }

  const sitedataType::minimumvisibility_optional& sitedataType::
  minimumvisibility () const
  {
    return this->minimumvisibility_;
  }

  sitedataType::minimumvisibility_optional& sitedataType::
  minimumvisibility ()
  {
    return this->minimumvisibility_;
  }

  void sitedataType::
  minimumvisibility (const minimumvisibility_type& x)
  {
    this->minimumvisibility_.set (x);
  }

  void sitedataType::
  minimumvisibility (const minimumvisibility_optional& x)
  {
    this->minimumvisibility_ = x;
  }

  const sitedataType::terrain_optional& sitedataType::
  terrain () const
  {
    return this->terrain_;
  }

  sitedataType::terrain_optional& sitedataType::
  terrain ()
  {
    return this->terrain_;
  }

  void sitedataType::
  terrain (const terrain_type& x)
  {
    this->terrain_.set (x);
  }

  void sitedataType::
  terrain (const terrain_optional& x)
  {
    this->terrain_ = x;
  }

  void sitedataType::
  terrain (::std::unique_ptr< terrain_type > x)
  {
    this->terrain_.set (std::move (x));
  }

  const sitedataType::wreck_sequence& sitedataType::
  wreck () const
  {
    return this->wreck_;
  }

  sitedataType::wreck_sequence& sitedataType::
  wreck ()
  {
    return this->wreck_;
  }

  void sitedataType::
  wreck (const wreck_sequence& s)
  {
    this->wreck_ = s;
  }

  const sitedataType::cave_optional& sitedataType::
  cave () const
  {
    return this->cave_;
  }

  sitedataType::cave_optional& sitedataType::
  cave ()
  {
    return this->cave_;
  }

  void sitedataType::
  cave (const cave_type& x)
  {
    this->cave_.set (x);
  }

  void sitedataType::
  cave (const cave_optional& x)
  {
    this->cave_ = x;
  }

  void sitedataType::
  cave (::std::unique_ptr< cave_type > x)
  {
    this->cave_.set (std::move (x));
  }

  const sitedataType::indoor_optional& sitedataType::
  indoor () const
  {
    return this->indoor_;
  }

  sitedataType::indoor_optional& sitedataType::
  indoor ()
  {
    return this->indoor_;
  }

  void sitedataType::
  indoor (const indoor_type& x)
  {
    this->indoor_.set (x);
  }

  void sitedataType::
  indoor (const indoor_optional& x)
  {
    this->indoor_ = x;
  }

  void sitedataType::
  indoor (::std::unique_ptr< indoor_type > x)
  {
    this->indoor_.set (std::move (x));
  }

  const sitedataType::lake_optional& sitedataType::
  lake () const
  {
    return this->lake_;
  }

  sitedataType::lake_optional& sitedataType::
  lake ()
  {
    return this->lake_;
  }

  void sitedataType::
  lake (const lake_type& x)
  {
    this->lake_.set (x);
  }

  void sitedataType::
  lake (const lake_optional& x)
  {
    this->lake_ = x;
  }

  void sitedataType::
  lake (::std::unique_ptr< lake_type > x)
  {
    this->lake_.set (std::move (x));
  }

  const sitedataType::river_optional& sitedataType::
  river () const
  {
    return this->river_;
  }

  sitedataType::river_optional& sitedataType::
  river ()
  {
    return this->river_;
  }

  void sitedataType::
  river (const river_type& x)
  {
    this->river_.set (x);
  }

  void sitedataType::
  river (const river_optional& x)
  {
    this->river_ = x;
  }

  void sitedataType::
  river (::std::unique_ptr< river_type > x)
  {
    this->river_.set (std::move (x));
  }

  const sitedataType::shore_optional& sitedataType::
  shore () const
  {
    return this->shore_;
  }

  sitedataType::shore_optional& sitedataType::
  shore ()
  {
    return this->shore_;
  }

  void sitedataType::
  shore (const shore_type& x)
  {
    this->shore_.set (x);
  }

  void sitedataType::
  shore (const shore_optional& x)
  {
    this->shore_ = x;
  }

  void sitedataType::
  shore (::std::unique_ptr< shore_type > x)
  {
    this->shore_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // sitedataType
  //

  sitedataType::
  sitedataType ()
  : ::xml_schema::type (),
    arealength_ (this),
    areawidth_ (this),
    averagevisibility_ (this),
    bottom_ (this),
    density_ (this),
    difficulty_ (this),
    globallightintensity_ (this),
    maximumdepth_ (this),
    maximumvisibility_ (this),
    minimumdepth_ (this),
    minimumvisibility_ (this),
    terrain_ (this),
    wreck_ (this),
    cave_ (this),
    indoor_ (this),
    lake_ (this),
    river_ (this),
    shore_ (this)
  {
  }

  sitedataType::
  sitedataType (const sitedataType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    arealength_ (x.arealength_, f, this),
    areawidth_ (x.areawidth_, f, this),
    averagevisibility_ (x.averagevisibility_, f, this),
    bottom_ (x.bottom_, f, this),
    density_ (x.density_, f, this),
    difficulty_ (x.difficulty_, f, this),
    globallightintensity_ (x.globallightintensity_, f, this),
    maximumdepth_ (x.maximumdepth_, f, this),
    maximumvisibility_ (x.maximumvisibility_, f, this),
    minimumdepth_ (x.minimumdepth_, f, this),
    minimumvisibility_ (x.minimumvisibility_, f, this),
    terrain_ (x.terrain_, f, this),
    wreck_ (x.wreck_, f, this),
    cave_ (x.cave_, f, this),
    indoor_ (x.indoor_, f, this),
    lake_ (x.lake_, f, this),
    river_ (x.river_, f, this),
    shore_ (x.shore_, f, this)
  {
  }

  sitedataType::
  sitedataType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    arealength_ (this),
    areawidth_ (this),
    averagevisibility_ (this),
    bottom_ (this),
    density_ (this),
    difficulty_ (this),
    globallightintensity_ (this),
    maximumdepth_ (this),
    maximumvisibility_ (this),
    minimumdepth_ (this),
    minimumvisibility_ (this),
    terrain_ (this),
    wreck_ (this),
    cave_ (this),
    indoor_ (this),
    lake_ (this),
    river_ (this),
    shore_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void sitedataType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // arealength
      //
      if (n.name () == "arealength" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->arealength_)
        {
          this->arealength_.set (arealength_traits::create (i, f, this));
          continue;
        }
      }

      // areawidth
      //
      if (n.name () == "areawidth" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->areawidth_)
        {
          this->areawidth_.set (areawidth_traits::create (i, f, this));
          continue;
        }
      }

      // averagevisibility
      //
      if (n.name () == "averagevisibility" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->averagevisibility_)
        {
          this->averagevisibility_.set (averagevisibility_traits::create (i, f, this));
          continue;
        }
      }

      // bottom
      //
      if (n.name () == "bottom" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< bottom_type > r (
          bottom_traits::create (i, f, this));

        if (!this->bottom_)
        {
          this->bottom_.set (::std::move (r));
          continue;
        }
      }

      // density
      //
      if (n.name () == "density" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->density_)
        {
          this->density_.set (density_traits::create (i, f, this));
          continue;
        }
      }

      // difficulty
      //
      if (n.name () == "difficulty" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< difficulty_type > r (
          difficulty_traits::create (i, f, this));

        if (!this->difficulty_)
        {
          this->difficulty_.set (::std::move (r));
          continue;
        }
      }

      // globallightintensity
      //
      if (n.name () == "globallightintensity" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< globallightintensity_type > r (
          globallightintensity_traits::create (i, f, this));

        if (!this->globallightintensity_)
        {
          this->globallightintensity_.set (::std::move (r));
          continue;
        }
      }

      // maximumdepth
      //
      if (n.name () == "maximumdepth" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->maximumdepth_)
        {
          this->maximumdepth_.set (maximumdepth_traits::create (i, f, this));
          continue;
        }
      }

      // maximumvisibility
      //
      if (n.name () == "maximumvisibility" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->maximumvisibility_)
        {
          this->maximumvisibility_.set (maximumvisibility_traits::create (i, f, this));
          continue;
        }
      }

      // minimumdepth
      //
      if (n.name () == "minimumdepth" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->minimumdepth_)
        {
          this->minimumdepth_.set (minimumdepth_traits::create (i, f, this));
          continue;
        }
      }

      // minimumvisibility
      //
      if (n.name () == "minimumvisibility" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->minimumvisibility_)
        {
          this->minimumvisibility_.set (minimumvisibility_traits::create (i, f, this));
          continue;
        }
      }

      // terrain
      //
      if (n.name () == "terrain" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< terrain_type > r (
          terrain_traits::create (i, f, this));

        if (!this->terrain_)
        {
          this->terrain_.set (::std::move (r));
          continue;
        }
      }

      // wreck
      //
      if (n.name () == "wreck" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< wreck_type > r (
          wreck_traits::create (i, f, this));

        this->wreck_.push_back (::std::move (r));
        continue;
      }

      // cave
      //
      if (n.name () == "cave" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< cave_type > r (
          cave_traits::create (i, f, this));

        if (!this->cave_)
        {
          this->cave_.set (::std::move (r));
          continue;
        }
      }

      // indoor
      //
      if (n.name () == "indoor" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< indoor_type > r (
          indoor_traits::create (i, f, this));

        if (!this->indoor_)
        {
          this->indoor_.set (::std::move (r));
          continue;
        }
      }

      // lake
      //
      if (n.name () == "lake" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< lake_type > r (
          lake_traits::create (i, f, this));

        if (!this->lake_)
        {
          this->lake_.set (::std::move (r));
          continue;
        }
      }

      // river
      //
      if (n.name () == "river" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< river_type > r (
          river_traits::create (i, f, this));

        if (!this->river_)
        {
          this->river_.set (::std::move (r));
          continue;
        }
      }

      // shore
      //
      if (n.name () == "shore" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< shore_type > r (
          shore_traits::create (i, f, this));

        if (!this->shore_)
        {
          this->shore_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  sitedataType* sitedataType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class sitedataType (*this, f, c);
  }

  sitedataType& sitedataType::
  operator= (const sitedataType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->arealength_ = x.arealength_;
      this->areawidth_ = x.areawidth_;
      this->averagevisibility_ = x.averagevisibility_;
      this->bottom_ = x.bottom_;
      this->density_ = x.density_;
      this->difficulty_ = x.difficulty_;
      this->globallightintensity_ = x.globallightintensity_;
      this->maximumdepth_ = x.maximumdepth_;
      this->maximumvisibility_ = x.maximumvisibility_;
      this->minimumdepth_ = x.minimumdepth_;
      this->minimumvisibility_ = x.minimumvisibility_;
      this->terrain_ = x.terrain_;
      this->wreck_ = x.wreck_;
      this->cave_ = x.cave_;
      this->indoor_ = x.indoor_;
      this->lake_ = x.lake_;
      this->river_ = x.river_;
      this->shore_ = x.shore_;
    }

    return *this;
  }

  sitedataType::
  ~sitedataType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const sitedataType& i)
  {
    if (i.arealength ())
    {
      o << ::std::endl << "arealength: " << *i.arealength ();
    }

    if (i.areawidth ())
    {
      o << ::std::endl << "areawidth: " << *i.areawidth ();
    }

    if (i.averagevisibility ())
    {
      o << ::std::endl << "averagevisibility: " << *i.averagevisibility ();
    }

    if (i.bottom ())
    {
      o << ::std::endl << "bottom: " << *i.bottom ();
    }

    if (i.density ())
    {
      o << ::std::endl << "density: " << *i.density ();
    }

    if (i.difficulty ())
    {
      o << ::std::endl << "difficulty: " << *i.difficulty ();
    }

    if (i.globallightintensity ())
    {
      o << ::std::endl << "globallightintensity: " << *i.globallightintensity ();
    }

    if (i.maximumdepth ())
    {
      o << ::std::endl << "maximumdepth: " << *i.maximumdepth ();
    }

    if (i.maximumvisibility ())
    {
      o << ::std::endl << "maximumvisibility: " << *i.maximumvisibility ();
    }

    if (i.minimumdepth ())
    {
      o << ::std::endl << "minimumdepth: " << *i.minimumdepth ();
    }

    if (i.minimumvisibility ())
    {
      o << ::std::endl << "minimumvisibility: " << *i.minimumvisibility ();
    }

    if (i.terrain ())
    {
      o << ::std::endl << "terrain: " << *i.terrain ();
    }

    for (sitedataType::wreck_const_iterator
         b (i.wreck ().begin ()), e (i.wreck ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "wreck: " << *b;
    }

    if (i.cave ())
    {
      o << ::std::endl << "cave: " << *i.cave ();
    }

    if (i.indoor ())
    {
      o << ::std::endl << "indoor: " << *i.indoor ();
    }

    if (i.lake ())
    {
      o << ::std::endl << "lake: " << *i.lake ();
    }

    if (i.river ())
    {
      o << ::std::endl << "river: " << *i.river ();
    }

    if (i.shore ())
    {
      o << ::std::endl << "shore: " << *i.shore ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

