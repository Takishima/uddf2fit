// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "mediadata.hxx"

#include "mediaType.hxx"

#include "imageType.hxx"

namespace streit
{
  // mediadata
  //

  const mediadata::audio_sequence& mediadata::
  audio () const
  {
    return this->audio_;
  }

  mediadata::audio_sequence& mediadata::
  audio ()
  {
    return this->audio_;
  }

  void mediadata::
  audio (const audio_sequence& s)
  {
    this->audio_ = s;
  }

  const mediadata::image_sequence& mediadata::
  image () const
  {
    return this->image_;
  }

  mediadata::image_sequence& mediadata::
  image ()
  {
    return this->image_;
  }

  void mediadata::
  image (const image_sequence& s)
  {
    this->image_ = s;
  }

  const mediadata::video_sequence& mediadata::
  video () const
  {
    return this->video_;
  }

  mediadata::video_sequence& mediadata::
  video ()
  {
    return this->video_;
  }

  void mediadata::
  video (const video_sequence& s)
  {
    this->video_ = s;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // mediadata
  //

  mediadata::
  mediadata ()
  : ::xml_schema::type (),
    audio_ (this),
    image_ (this),
    video_ (this)
  {
  }

  mediadata::
  mediadata (const mediadata& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    audio_ (x.audio_, f, this),
    image_ (x.image_, f, this),
    video_ (x.video_, f, this)
  {
  }

  mediadata::
  mediadata (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    audio_ (this),
    image_ (this),
    video_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void mediadata::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // audio
      //
      if (n.name () == "audio" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< audio_type > r (
          audio_traits::create (i, f, this));

        this->audio_.push_back (::std::move (r));
        continue;
      }

      // image
      //
      if (n.name () == "image" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< image_type > r (
          image_traits::create (i, f, this));

        this->image_.push_back (::std::move (r));
        continue;
      }

      // video
      //
      if (n.name () == "video" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< video_type > r (
          video_traits::create (i, f, this));

        this->video_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  mediadata* mediadata::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class mediadata (*this, f, c);
  }

  mediadata& mediadata::
  operator= (const mediadata& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->audio_ = x.audio_;
      this->image_ = x.image_;
      this->video_ = x.video_;
    }

    return *this;
  }

  mediadata::
  ~mediadata ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const mediadata& i)
  {
    for (mediadata::audio_const_iterator
         b (i.audio ().begin ()), e (i.audio ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "audio: " << *b;
    }

    for (mediadata::image_const_iterator
         b (i.image ().begin ()), e (i.image ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "image: " << *b;
    }

    for (mediadata::video_const_iterator
         b (i.video ().begin ()), e (i.video ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "video: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

