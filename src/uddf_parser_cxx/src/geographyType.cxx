// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "geographyType.hxx"

#include "addressType.hxx"

namespace streit
{
  // geographyType
  //

  const geographyType::location_optional& geographyType::
  location () const
  {
    return this->location_;
  }

  geographyType::location_optional& geographyType::
  location ()
  {
    return this->location_;
  }

  void geographyType::
  location (const location_type& x)
  {
    this->location_.set (x);
  }

  void geographyType::
  location (const location_optional& x)
  {
    this->location_ = x;
  }

  void geographyType::
  location (::std::unique_ptr< location_type > x)
  {
    this->location_.set (std::move (x));
  }

  const geographyType::address_optional& geographyType::
  address () const
  {
    return this->address_;
  }

  geographyType::address_optional& geographyType::
  address ()
  {
    return this->address_;
  }

  void geographyType::
  address (const address_type& x)
  {
    this->address_.set (x);
  }

  void geographyType::
  address (const address_optional& x)
  {
    this->address_ = x;
  }

  void geographyType::
  address (::std::unique_ptr< address_type > x)
  {
    this->address_.set (std::move (x));
  }

  const geographyType::latitude_optional& geographyType::
  latitude () const
  {
    return this->latitude_;
  }

  geographyType::latitude_optional& geographyType::
  latitude ()
  {
    return this->latitude_;
  }

  void geographyType::
  latitude (const latitude_type& x)
  {
    this->latitude_.set (x);
  }

  void geographyType::
  latitude (const latitude_optional& x)
  {
    this->latitude_ = x;
  }

  const geographyType::longitude_optional& geographyType::
  longitude () const
  {
    return this->longitude_;
  }

  geographyType::longitude_optional& geographyType::
  longitude ()
  {
    return this->longitude_;
  }

  void geographyType::
  longitude (const longitude_type& x)
  {
    this->longitude_.set (x);
  }

  void geographyType::
  longitude (const longitude_optional& x)
  {
    this->longitude_ = x;
  }

  const geographyType::altitude_optional& geographyType::
  altitude () const
  {
    return this->altitude_;
  }

  geographyType::altitude_optional& geographyType::
  altitude ()
  {
    return this->altitude_;
  }

  void geographyType::
  altitude (const altitude_type& x)
  {
    this->altitude_.set (x);
  }

  void geographyType::
  altitude (const altitude_optional& x)
  {
    this->altitude_ = x;
  }

  const geographyType::timezone_optional& geographyType::
  timezone () const
  {
    return this->timezone_;
  }

  geographyType::timezone_optional& geographyType::
  timezone ()
  {
    return this->timezone_;
  }

  void geographyType::
  timezone (const timezone_type& x)
  {
    this->timezone_.set (x);
  }

  void geographyType::
  timezone (const timezone_optional& x)
  {
    this->timezone_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // geographyType
  //

  geographyType::
  geographyType ()
  : ::xml_schema::type (),
    location_ (this),
    address_ (this),
    latitude_ (this),
    longitude_ (this),
    altitude_ (this),
    timezone_ (this)
  {
  }

  geographyType::
  geographyType (const geographyType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    location_ (x.location_, f, this),
    address_ (x.address_, f, this),
    latitude_ (x.latitude_, f, this),
    longitude_ (x.longitude_, f, this),
    altitude_ (x.altitude_, f, this),
    timezone_ (x.timezone_, f, this)
  {
  }

  geographyType::
  geographyType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    location_ (this),
    address_ (this),
    latitude_ (this),
    longitude_ (this),
    altitude_ (this),
    timezone_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void geographyType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // location
      //
      if (n.name () == "location" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< location_type > r (
          location_traits::create (i, f, this));

        if (!this->location_)
        {
          this->location_.set (::std::move (r));
          continue;
        }
      }

      // address
      //
      if (n.name () == "address" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< address_type > r (
          address_traits::create (i, f, this));

        if (!this->address_)
        {
          this->address_.set (::std::move (r));
          continue;
        }
      }

      // latitude
      //
      if (n.name () == "latitude" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->latitude_)
        {
          this->latitude_.set (latitude_traits::create (i, f, this));
          continue;
        }
      }

      // longitude
      //
      if (n.name () == "longitude" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->longitude_)
        {
          this->longitude_.set (longitude_traits::create (i, f, this));
          continue;
        }
      }

      // altitude
      //
      if (n.name () == "altitude" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->altitude_)
        {
          this->altitude_.set (altitude_traits::create (i, f, this));
          continue;
        }
      }

      // timezone
      //
      if (n.name () == "timezone" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->timezone_)
        {
          this->timezone_.set (timezone_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }
  }

  geographyType* geographyType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class geographyType (*this, f, c);
  }

  geographyType& geographyType::
  operator= (const geographyType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->location_ = x.location_;
      this->address_ = x.address_;
      this->latitude_ = x.latitude_;
      this->longitude_ = x.longitude_;
      this->altitude_ = x.altitude_;
      this->timezone_ = x.timezone_;
    }

    return *this;
  }

  geographyType::
  ~geographyType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const geographyType& i)
  {
    if (i.location ())
    {
      o << ::std::endl << "location: " << *i.location ();
    }

    if (i.address ())
    {
      o << ::std::endl << "address: " << *i.address ();
    }

    if (i.latitude ())
    {
      o << ::std::endl << "latitude: " << *i.latitude ();
    }

    if (i.longitude ())
    {
      o << ::std::endl << "longitude: " << *i.longitude ();
    }

    if (i.altitude ())
    {
      o << ::std::endl << "altitude: " << *i.altitude ();
    }

    if (i.timezone ())
    {
      o << ::std::endl << "timezone: " << *i.timezone ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

