// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "wreckType.hxx"

#include "builtType.hxx"

#include "dimensionType.hxx"

#include "encapsulatedDateTimeType.hxx"

#include "notesType.hxx"

namespace streit
{
  // wreckType
  //

  const wreckType::shiptype_optional& wreckType::
  shiptype () const
  {
    return this->shiptype_;
  }

  wreckType::shiptype_optional& wreckType::
  shiptype ()
  {
    return this->shiptype_;
  }

  void wreckType::
  shiptype (const shiptype_type& x)
  {
    this->shiptype_.set (x);
  }

  void wreckType::
  shiptype (const shiptype_optional& x)
  {
    this->shiptype_ = x;
  }

  void wreckType::
  shiptype (::std::unique_ptr< shiptype_type > x)
  {
    this->shiptype_.set (std::move (x));
  }

  const wreckType::nationality_optional& wreckType::
  nationality () const
  {
    return this->nationality_;
  }

  wreckType::nationality_optional& wreckType::
  nationality ()
  {
    return this->nationality_;
  }

  void wreckType::
  nationality (const nationality_type& x)
  {
    this->nationality_.set (x);
  }

  void wreckType::
  nationality (const nationality_optional& x)
  {
    this->nationality_ = x;
  }

  void wreckType::
  nationality (::std::unique_ptr< nationality_type > x)
  {
    this->nationality_.set (std::move (x));
  }

  const wreckType::built_optional& wreckType::
  built () const
  {
    return this->built_;
  }

  wreckType::built_optional& wreckType::
  built ()
  {
    return this->built_;
  }

  void wreckType::
  built (const built_type& x)
  {
    this->built_.set (x);
  }

  void wreckType::
  built (const built_optional& x)
  {
    this->built_ = x;
  }

  void wreckType::
  built (::std::unique_ptr< built_type > x)
  {
    this->built_.set (std::move (x));
  }

  const wreckType::shipdimension_optional& wreckType::
  shipdimension () const
  {
    return this->shipdimension_;
  }

  wreckType::shipdimension_optional& wreckType::
  shipdimension ()
  {
    return this->shipdimension_;
  }

  void wreckType::
  shipdimension (const shipdimension_type& x)
  {
    this->shipdimension_.set (x);
  }

  void wreckType::
  shipdimension (const shipdimension_optional& x)
  {
    this->shipdimension_ = x;
  }

  void wreckType::
  shipdimension (::std::unique_ptr< shipdimension_type > x)
  {
    this->shipdimension_.set (std::move (x));
  }

  const wreckType::sunk_optional& wreckType::
  sunk () const
  {
    return this->sunk_;
  }

  wreckType::sunk_optional& wreckType::
  sunk ()
  {
    return this->sunk_;
  }

  void wreckType::
  sunk (const sunk_type& x)
  {
    this->sunk_.set (x);
  }

  void wreckType::
  sunk (const sunk_optional& x)
  {
    this->sunk_ = x;
  }

  void wreckType::
  sunk (::std::unique_ptr< sunk_type > x)
  {
    this->sunk_.set (std::move (x));
  }

  const wreckType::notes_optional& wreckType::
  notes () const
  {
    return this->notes_;
  }

  wreckType::notes_optional& wreckType::
  notes ()
  {
    return this->notes_;
  }

  void wreckType::
  notes (const notes_type& x)
  {
    this->notes_.set (x);
  }

  void wreckType::
  notes (const notes_optional& x)
  {
    this->notes_ = x;
  }

  void wreckType::
  notes (::std::unique_ptr< notes_type > x)
  {
    this->notes_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // wreckType
  //

  wreckType::
  wreckType (const name_type& name)
  : ::streit::simpleNamedType (name),
    shiptype_ (this),
    nationality_ (this),
    built_ (this),
    shipdimension_ (this),
    sunk_ (this),
    notes_ (this)
  {
  }

  wreckType::
  wreckType (const wreckType& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::streit::simpleNamedType (x, f, c),
    shiptype_ (x.shiptype_, f, this),
    nationality_ (x.nationality_, f, this),
    built_ (x.built_, f, this),
    shipdimension_ (x.shipdimension_, f, this),
    sunk_ (x.sunk_, f, this),
    notes_ (x.notes_, f, this)
  {
  }

  wreckType::
  wreckType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::streit::simpleNamedType (e, f | ::xml_schema::flags::base, c),
    shiptype_ (this),
    nationality_ (this),
    built_ (this),
    shipdimension_ (this),
    sunk_ (this),
    notes_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void wreckType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::simpleNamedType::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // shiptype
      //
      if (n.name () == "shiptype" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< shiptype_type > r (
          shiptype_traits::create (i, f, this));

        if (!this->shiptype_)
        {
          this->shiptype_.set (::std::move (r));
          continue;
        }
      }

      // nationality
      //
      if (n.name () == "nationality" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< nationality_type > r (
          nationality_traits::create (i, f, this));

        if (!this->nationality_)
        {
          this->nationality_.set (::std::move (r));
          continue;
        }
      }

      // built
      //
      if (n.name () == "built" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< built_type > r (
          built_traits::create (i, f, this));

        if (!this->built_)
        {
          this->built_.set (::std::move (r));
          continue;
        }
      }

      // shipdimension
      //
      if (n.name () == "shipdimension" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< shipdimension_type > r (
          shipdimension_traits::create (i, f, this));

        if (!this->shipdimension_)
        {
          this->shipdimension_.set (::std::move (r));
          continue;
        }
      }

      // sunk
      //
      if (n.name () == "sunk" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< sunk_type > r (
          sunk_traits::create (i, f, this));

        if (!this->sunk_)
        {
          this->sunk_.set (::std::move (r));
          continue;
        }
      }

      // notes
      //
      if (n.name () == "notes" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< notes_type > r (
          notes_traits::create (i, f, this));

        if (!this->notes_)
        {
          this->notes_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  wreckType* wreckType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class wreckType (*this, f, c);
  }

  wreckType& wreckType::
  operator= (const wreckType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::simpleNamedType& > (*this) = x;
      this->shiptype_ = x.shiptype_;
      this->nationality_ = x.nationality_;
      this->built_ = x.built_;
      this->shipdimension_ = x.shipdimension_;
      this->sunk_ = x.sunk_;
      this->notes_ = x.notes_;
    }

    return *this;
  }

  wreckType::
  ~wreckType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const wreckType& i)
  {
    o << static_cast< const ::streit::simpleNamedType& > (i);

    if (i.shiptype ())
    {
      o << ::std::endl << "shiptype: " << *i.shiptype ();
    }

    if (i.nationality ())
    {
      o << ::std::endl << "nationality: " << *i.nationality ();
    }

    if (i.built ())
    {
      o << ::std::endl << "built: " << *i.built ();
    }

    if (i.shipdimension ())
    {
      o << ::std::endl << "shipdimension: " << *i.shipdimension ();
    }

    if (i.sunk ())
    {
      o << ::std::endl << "sunk: " << *i.sunk ();
    }

    if (i.notes ())
    {
      o << ::std::endl << "notes: " << *i.notes ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

