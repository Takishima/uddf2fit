// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "speciesType.hxx"

#include "ID.hxx"

#include "abundance.hxx"

#include "sexType.hxx"

#include "lifestage.hxx"

#include "lightintensityType.hxx"

#include "dominance.hxx"

#include "notesType.hxx"

namespace streit
{
  // speciesType
  //

  const speciesType::trivialname_optional& speciesType::
  trivialname () const
  {
    return this->trivialname_;
  }

  speciesType::trivialname_optional& speciesType::
  trivialname ()
  {
    return this->trivialname_;
  }

  void speciesType::
  trivialname (const trivialname_type& x)
  {
    this->trivialname_.set (x);
  }

  void speciesType::
  trivialname (const trivialname_optional& x)
  {
    this->trivialname_ = x;
  }

  void speciesType::
  trivialname (::std::unique_ptr< trivialname_type > x)
  {
    this->trivialname_.set (std::move (x));
  }

  const speciesType::scientificname_optional& speciesType::
  scientificname () const
  {
    return this->scientificname_;
  }

  speciesType::scientificname_optional& speciesType::
  scientificname ()
  {
    return this->scientificname_;
  }

  void speciesType::
  scientificname (const scientificname_type& x)
  {
    this->scientificname_.set (x);
  }

  void speciesType::
  scientificname (const scientificname_optional& x)
  {
    this->scientificname_ = x;
  }

  void speciesType::
  scientificname (::std::unique_ptr< scientificname_type > x)
  {
    this->scientificname_.set (std::move (x));
  }

  const speciesType::abundance_optional& speciesType::
  abundance () const
  {
    return this->abundance_;
  }

  speciesType::abundance_optional& speciesType::
  abundance ()
  {
    return this->abundance_;
  }

  void speciesType::
  abundance (const abundance_type& x)
  {
    this->abundance_.set (x);
  }

  void speciesType::
  abundance (const abundance_optional& x)
  {
    this->abundance_ = x;
  }

  void speciesType::
  abundance (::std::unique_ptr< abundance_type > x)
  {
    this->abundance_.set (std::move (x));
  }

  const speciesType::sex_optional& speciesType::
  sex () const
  {
    return this->sex_;
  }

  speciesType::sex_optional& speciesType::
  sex ()
  {
    return this->sex_;
  }

  void speciesType::
  sex (const sex_type& x)
  {
    this->sex_.set (x);
  }

  void speciesType::
  sex (const sex_optional& x)
  {
    this->sex_ = x;
  }

  void speciesType::
  sex (::std::unique_ptr< sex_type > x)
  {
    this->sex_.set (std::move (x));
  }

  const speciesType::lifestage_optional& speciesType::
  lifestage () const
  {
    return this->lifestage_;
  }

  speciesType::lifestage_optional& speciesType::
  lifestage ()
  {
    return this->lifestage_;
  }

  void speciesType::
  lifestage (const lifestage_type& x)
  {
    this->lifestage_.set (x);
  }

  void speciesType::
  lifestage (const lifestage_optional& x)
  {
    this->lifestage_ = x;
  }

  void speciesType::
  lifestage (::std::unique_ptr< lifestage_type > x)
  {
    this->lifestage_.set (std::move (x));
  }

  const speciesType::lightintensity_optional& speciesType::
  lightintensity () const
  {
    return this->lightintensity_;
  }

  speciesType::lightintensity_optional& speciesType::
  lightintensity ()
  {
    return this->lightintensity_;
  }

  void speciesType::
  lightintensity (const lightintensity_type& x)
  {
    this->lightintensity_.set (x);
  }

  void speciesType::
  lightintensity (const lightintensity_optional& x)
  {
    this->lightintensity_ = x;
  }

  void speciesType::
  lightintensity (::std::unique_ptr< lightintensity_type > x)
  {
    this->lightintensity_.set (std::move (x));
  }

  const speciesType::age_optional& speciesType::
  age () const
  {
    return this->age_;
  }

  speciesType::age_optional& speciesType::
  age ()
  {
    return this->age_;
  }

  void speciesType::
  age (const age_type& x)
  {
    this->age_.set (x);
  }

  void speciesType::
  age (const age_optional& x)
  {
    this->age_ = x;
  }

  const speciesType::dominance_optional& speciesType::
  dominance () const
  {
    return this->dominance_;
  }

  speciesType::dominance_optional& speciesType::
  dominance ()
  {
    return this->dominance_;
  }

  void speciesType::
  dominance (const dominance_type& x)
  {
    this->dominance_.set (x);
  }

  void speciesType::
  dominance (const dominance_optional& x)
  {
    this->dominance_ = x;
  }

  void speciesType::
  dominance (::std::unique_ptr< dominance_type > x)
  {
    this->dominance_.set (std::move (x));
  }

  const speciesType::size_optional& speciesType::
  size () const
  {
    return this->size_;
  }

  speciesType::size_optional& speciesType::
  size ()
  {
    return this->size_;
  }

  void speciesType::
  size (const size_type& x)
  {
    this->size_.set (x);
  }

  void speciesType::
  size (const size_optional& x)
  {
    this->size_ = x;
  }

  const speciesType::notes_optional& speciesType::
  notes () const
  {
    return this->notes_;
  }

  speciesType::notes_optional& speciesType::
  notes ()
  {
    return this->notes_;
  }

  void speciesType::
  notes (const notes_type& x)
  {
    this->notes_.set (x);
  }

  void speciesType::
  notes (const notes_optional& x)
  {
    this->notes_ = x;
  }

  void speciesType::
  notes (::std::unique_ptr< notes_type > x)
  {
    this->notes_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // speciesType
  //

  speciesType::
  speciesType (const id_type& id)
  : ::streit::ID_TYPE (id),
    trivialname_ (this),
    scientificname_ (this),
    abundance_ (this),
    sex_ (this),
    lifestage_ (this),
    lightintensity_ (this),
    age_ (this),
    dominance_ (this),
    size_ (this),
    notes_ (this)
  {
  }

  speciesType::
  speciesType (const speciesType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::streit::ID_TYPE (x, f, c),
    trivialname_ (x.trivialname_, f, this),
    scientificname_ (x.scientificname_, f, this),
    abundance_ (x.abundance_, f, this),
    sex_ (x.sex_, f, this),
    lifestage_ (x.lifestage_, f, this),
    lightintensity_ (x.lightintensity_, f, this),
    age_ (x.age_, f, this),
    dominance_ (x.dominance_, f, this),
    size_ (x.size_, f, this),
    notes_ (x.notes_, f, this)
  {
  }

  speciesType::
  speciesType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::streit::ID_TYPE (e, f | ::xml_schema::flags::base, c),
    trivialname_ (this),
    scientificname_ (this),
    abundance_ (this),
    sex_ (this),
    lifestage_ (this),
    lightintensity_ (this),
    age_ (this),
    dominance_ (this),
    size_ (this),
    notes_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void speciesType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::ID_TYPE::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // trivialname
      //
      if (n.name () == "trivialname" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< trivialname_type > r (
          trivialname_traits::create (i, f, this));

        if (!this->trivialname_)
        {
          this->trivialname_.set (::std::move (r));
          continue;
        }
      }

      // scientificname
      //
      if (n.name () == "scientificname" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< scientificname_type > r (
          scientificname_traits::create (i, f, this));

        if (!this->scientificname_)
        {
          this->scientificname_.set (::std::move (r));
          continue;
        }
      }

      // abundance
      //
      if (n.name () == "abundance" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< abundance_type > r (
          abundance_traits::create (i, f, this));

        if (!this->abundance_)
        {
          this->abundance_.set (::std::move (r));
          continue;
        }
      }

      // sex
      //
      if (n.name () == "sex" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< sex_type > r (
          sex_traits::create (i, f, this));

        if (!this->sex_)
        {
          this->sex_.set (::std::move (r));
          continue;
        }
      }

      // lifestage
      //
      if (n.name () == "lifestage" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< lifestage_type > r (
          lifestage_traits::create (i, f, this));

        if (!this->lifestage_)
        {
          this->lifestage_.set (::std::move (r));
          continue;
        }
      }

      // lightintensity
      //
      if (n.name () == "lightintensity" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< lightintensity_type > r (
          lightintensity_traits::create (i, f, this));

        if (!this->lightintensity_)
        {
          this->lightintensity_.set (::std::move (r));
          continue;
        }
      }

      // age
      //
      if (n.name () == "age" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->age_)
        {
          this->age_.set (age_traits::create (i, f, this));
          continue;
        }
      }

      // dominance
      //
      if (n.name () == "dominance" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< dominance_type > r (
          dominance_traits::create (i, f, this));

        if (!this->dominance_)
        {
          this->dominance_.set (::std::move (r));
          continue;
        }
      }

      // size
      //
      if (n.name () == "size" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->size_)
        {
          this->size_.set (size_traits::create (i, f, this));
          continue;
        }
      }

      // notes
      //
      if (n.name () == "notes" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< notes_type > r (
          notes_traits::create (i, f, this));

        if (!this->notes_)
        {
          this->notes_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  speciesType* speciesType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class speciesType (*this, f, c);
  }

  speciesType& speciesType::
  operator= (const speciesType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::ID_TYPE& > (*this) = x;
      this->trivialname_ = x.trivialname_;
      this->scientificname_ = x.scientificname_;
      this->abundance_ = x.abundance_;
      this->sex_ = x.sex_;
      this->lifestage_ = x.lifestage_;
      this->lightintensity_ = x.lightintensity_;
      this->age_ = x.age_;
      this->dominance_ = x.dominance_;
      this->size_ = x.size_;
      this->notes_ = x.notes_;
    }

    return *this;
  }

  speciesType::
  ~speciesType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const speciesType& i)
  {
    o << static_cast< const ::streit::ID_TYPE& > (i);

    if (i.trivialname ())
    {
      o << ::std::endl << "trivialname: " << *i.trivialname ();
    }

    if (i.scientificname ())
    {
      o << ::std::endl << "scientificname: " << *i.scientificname ();
    }

    if (i.abundance ())
    {
      o << ::std::endl << "abundance: " << *i.abundance ();
    }

    if (i.sex ())
    {
      o << ::std::endl << "sex: " << *i.sex ();
    }

    if (i.lifestage ())
    {
      o << ::std::endl << "lifestage: " << *i.lifestage ();
    }

    if (i.lightintensity ())
    {
      o << ::std::endl << "lightintensity: " << *i.lightintensity ();
    }

    if (i.age ())
    {
      o << ::std::endl << "age: " << *i.age ();
    }

    if (i.dominance ())
    {
      o << ::std::endl << "dominance: " << *i.dominance ();
    }

    if (i.size ())
    {
      o << ::std::endl << "size: " << *i.size ();
    }

    if (i.notes ())
    {
      o << ::std::endl << "notes: " << *i.notes ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

