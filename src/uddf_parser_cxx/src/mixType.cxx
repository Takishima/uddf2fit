// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "mixType.hxx"

#include "ID.hxx"

#include "priceType.hxx"

namespace streit
{
  // mixType
  //

  const mixType::o2_optional& mixType::
  o2 () const
  {
    return this->o2_;
  }

  mixType::o2_optional& mixType::
  o2 ()
  {
    return this->o2_;
  }

  void mixType::
  o2 (const o2_type& x)
  {
    this->o2_.set (x);
  }

  void mixType::
  o2 (const o2_optional& x)
  {
    this->o2_ = x;
  }

  const mixType::n2_optional& mixType::
  n2 () const
  {
    return this->n2_;
  }

  mixType::n2_optional& mixType::
  n2 ()
  {
    return this->n2_;
  }

  void mixType::
  n2 (const n2_type& x)
  {
    this->n2_.set (x);
  }

  void mixType::
  n2 (const n2_optional& x)
  {
    this->n2_ = x;
  }

  const mixType::he_optional& mixType::
  he () const
  {
    return this->he_;
  }

  mixType::he_optional& mixType::
  he ()
  {
    return this->he_;
  }

  void mixType::
  he (const he_type& x)
  {
    this->he_.set (x);
  }

  void mixType::
  he (const he_optional& x)
  {
    this->he_ = x;
  }

  const mixType::ar_optional& mixType::
  ar () const
  {
    return this->ar_;
  }

  mixType::ar_optional& mixType::
  ar ()
  {
    return this->ar_;
  }

  void mixType::
  ar (const ar_type& x)
  {
    this->ar_.set (x);
  }

  void mixType::
  ar (const ar_optional& x)
  {
    this->ar_ = x;
  }

  const mixType::h2_optional& mixType::
  h2 () const
  {
    return this->h2_;
  }

  mixType::h2_optional& mixType::
  h2 ()
  {
    return this->h2_;
  }

  void mixType::
  h2 (const h2_type& x)
  {
    this->h2_.set (x);
  }

  void mixType::
  h2 (const h2_optional& x)
  {
    this->h2_ = x;
  }

  const mixType::priceperlitre_optional& mixType::
  priceperlitre () const
  {
    return this->priceperlitre_;
  }

  mixType::priceperlitre_optional& mixType::
  priceperlitre ()
  {
    return this->priceperlitre_;
  }

  void mixType::
  priceperlitre (const priceperlitre_type& x)
  {
    this->priceperlitre_.set (x);
  }

  void mixType::
  priceperlitre (const priceperlitre_optional& x)
  {
    this->priceperlitre_ = x;
  }

  void mixType::
  priceperlitre (::std::unique_ptr< priceperlitre_type > x)
  {
    this->priceperlitre_.set (std::move (x));
  }

  const mixType::maximumpo2_optional& mixType::
  maximumpo2 () const
  {
    return this->maximumpo2_;
  }

  mixType::maximumpo2_optional& mixType::
  maximumpo2 ()
  {
    return this->maximumpo2_;
  }

  void mixType::
  maximumpo2 (const maximumpo2_type& x)
  {
    this->maximumpo2_.set (x);
  }

  void mixType::
  maximumpo2 (const maximumpo2_optional& x)
  {
    this->maximumpo2_ = x;
  }

  const mixType::maximumoperationdepth_optional& mixType::
  maximumoperationdepth () const
  {
    return this->maximumoperationdepth_;
  }

  mixType::maximumoperationdepth_optional& mixType::
  maximumoperationdepth ()
  {
    return this->maximumoperationdepth_;
  }

  void mixType::
  maximumoperationdepth (const maximumoperationdepth_type& x)
  {
    this->maximumoperationdepth_.set (x);
  }

  void mixType::
  maximumoperationdepth (const maximumoperationdepth_optional& x)
  {
    this->maximumoperationdepth_ = x;
  }

  const mixType::equivalentairdepth_optional& mixType::
  equivalentairdepth () const
  {
    return this->equivalentairdepth_;
  }

  mixType::equivalentairdepth_optional& mixType::
  equivalentairdepth ()
  {
    return this->equivalentairdepth_;
  }

  void mixType::
  equivalentairdepth (const equivalentairdepth_type& x)
  {
    this->equivalentairdepth_.set (x);
  }

  void mixType::
  equivalentairdepth (const equivalentairdepth_optional& x)
  {
    this->equivalentairdepth_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // mixType
  //

  mixType::
  mixType (const id_type& id,
           const name_type& name)
  : ::streit::namedType (id,
                         name),
    o2_ (this),
    n2_ (this),
    he_ (this),
    ar_ (this),
    h2_ (this),
    priceperlitre_ (this),
    maximumpo2_ (this),
    maximumoperationdepth_ (this),
    equivalentairdepth_ (this)
  {
  }

  mixType::
  mixType (const mixType& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::streit::namedType (x, f, c),
    o2_ (x.o2_, f, this),
    n2_ (x.n2_, f, this),
    he_ (x.he_, f, this),
    ar_ (x.ar_, f, this),
    h2_ (x.h2_, f, this),
    priceperlitre_ (x.priceperlitre_, f, this),
    maximumpo2_ (x.maximumpo2_, f, this),
    maximumoperationdepth_ (x.maximumoperationdepth_, f, this),
    equivalentairdepth_ (x.equivalentairdepth_, f, this)
  {
  }

  mixType::
  mixType (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::streit::namedType (e, f | ::xml_schema::flags::base, c),
    o2_ (this),
    n2_ (this),
    he_ (this),
    ar_ (this),
    h2_ (this),
    priceperlitre_ (this),
    maximumpo2_ (this),
    maximumoperationdepth_ (this),
    equivalentairdepth_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void mixType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::namedType::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // o2
      //
      if (n.name () == "o2" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->o2_)
        {
          this->o2_.set (o2_traits::create (i, f, this));
          continue;
        }
      }

      // n2
      //
      if (n.name () == "n2" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->n2_)
        {
          this->n2_.set (n2_traits::create (i, f, this));
          continue;
        }
      }

      // he
      //
      if (n.name () == "he" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->he_)
        {
          this->he_.set (he_traits::create (i, f, this));
          continue;
        }
      }

      // ar
      //
      if (n.name () == "ar" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->ar_)
        {
          this->ar_.set (ar_traits::create (i, f, this));
          continue;
        }
      }

      // h2
      //
      if (n.name () == "h2" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->h2_)
        {
          this->h2_.set (h2_traits::create (i, f, this));
          continue;
        }
      }

      // priceperlitre
      //
      if (n.name () == "priceperlitre" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< priceperlitre_type > r (
          priceperlitre_traits::create (i, f, this));

        if (!this->priceperlitre_)
        {
          this->priceperlitre_.set (::std::move (r));
          continue;
        }
      }

      // maximumpo2
      //
      if (n.name () == "maximumpo2" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->maximumpo2_)
        {
          this->maximumpo2_.set (maximumpo2_traits::create (i, f, this));
          continue;
        }
      }

      // maximumoperationdepth
      //
      if (n.name () == "maximumoperationdepth" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->maximumoperationdepth_)
        {
          this->maximumoperationdepth_.set (maximumoperationdepth_traits::create (i, f, this));
          continue;
        }
      }

      // equivalentairdepth
      //
      if (n.name () == "equivalentairdepth" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->equivalentairdepth_)
        {
          this->equivalentairdepth_.set (equivalentairdepth_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }
  }

  mixType* mixType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class mixType (*this, f, c);
  }

  mixType& mixType::
  operator= (const mixType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::namedType& > (*this) = x;
      this->o2_ = x.o2_;
      this->n2_ = x.n2_;
      this->he_ = x.he_;
      this->ar_ = x.ar_;
      this->h2_ = x.h2_;
      this->priceperlitre_ = x.priceperlitre_;
      this->maximumpo2_ = x.maximumpo2_;
      this->maximumoperationdepth_ = x.maximumoperationdepth_;
      this->equivalentairdepth_ = x.equivalentairdepth_;
    }

    return *this;
  }

  mixType::
  ~mixType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const mixType& i)
  {
    o << static_cast< const ::streit::namedType& > (i);

    if (i.o2 ())
    {
      o << ::std::endl << "o2: " << *i.o2 ();
    }

    if (i.n2 ())
    {
      o << ::std::endl << "n2: " << *i.n2 ();
    }

    if (i.he ())
    {
      o << ::std::endl << "he: " << *i.he ();
    }

    if (i.ar ())
    {
      o << ::std::endl << "ar: " << *i.ar ();
    }

    if (i.h2 ())
    {
      o << ::std::endl << "h2: " << *i.h2 ();
    }

    if (i.priceperlitre ())
    {
      o << ::std::endl << "priceperlitre: " << *i.priceperlitre ();
    }

    if (i.maximumpo2 ())
    {
      o << ::std::endl << "maximumpo2: " << *i.maximumpo2 ();
    }

    if (i.maximumoperationdepth ())
    {
      o << ::std::endl << "maximumoperationdepth: " << *i.maximumoperationdepth ();
    }

    if (i.equivalentairdepth ())
    {
      o << ::std::endl << "equivalentairdepth: " << *i.equivalentairdepth ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

