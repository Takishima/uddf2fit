// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "tissueType.hxx"

#include "gas.hxx"

namespace streit
{
  // tissueType
  //

  const tissueType::gas_type& tissueType::
  gas () const
  {
    return this->gas_.get ();
  }

  tissueType::gas_type& tissueType::
  gas ()
  {
    return this->gas_.get ();
  }

  void tissueType::
  gas (const gas_type& x)
  {
    this->gas_.set (x);
  }

  void tissueType::
  gas (::std::unique_ptr< gas_type > x)
  {
    this->gas_.set (std::move (x));
  }

  const tissueType::number_type& tissueType::
  number () const
  {
    return this->number_.get ();
  }

  tissueType::number_type& tissueType::
  number ()
  {
    return this->number_.get ();
  }

  void tissueType::
  number (const number_type& x)
  {
    this->number_.set (x);
  }

  const tissueType::halflife_type& tissueType::
  halflife () const
  {
    return this->halflife_.get ();
  }

  tissueType::halflife_type& tissueType::
  halflife ()
  {
    return this->halflife_.get ();
  }

  void tissueType::
  halflife (const halflife_type& x)
  {
    this->halflife_.set (x);
  }

  const tissueType::a_type& tissueType::
  a () const
  {
    return this->a_.get ();
  }

  tissueType::a_type& tissueType::
  a ()
  {
    return this->a_.get ();
  }

  void tissueType::
  a (const a_type& x)
  {
    this->a_.set (x);
  }

  const tissueType::b_type& tissueType::
  b () const
  {
    return this->b_.get ();
  }

  tissueType::b_type& tissueType::
  b ()
  {
    return this->b_.get ();
  }

  void tissueType::
  b (const b_type& x)
  {
    this->b_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // tissueType
  //

  tissueType::
  tissueType (const gas_type& gas,
              const number_type& number,
              const halflife_type& halflife,
              const a_type& a,
              const b_type& b)
  : ::xml_schema::type (),
    gas_ (gas, this),
    number_ (number, this),
    halflife_ (halflife, this),
    a_ (a, this),
    b_ (b, this)
  {
  }

  tissueType::
  tissueType (const tissueType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    gas_ (x.gas_, f, this),
    number_ (x.number_, f, this),
    halflife_ (x.halflife_, f, this),
    a_ (x.a_, f, this),
    b_ (x.b_, f, this)
  {
  }

  tissueType::
  tissueType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    gas_ (this),
    number_ (this),
    halflife_ (this),
    a_ (this),
    b_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void tissueType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "gas" && n.namespace_ ().empty ())
      {
        this->gas_.set (gas_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "number" && n.namespace_ ().empty ())
      {
        this->number_.set (number_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "halflife" && n.namespace_ ().empty ())
      {
        this->halflife_.set (halflife_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "a" && n.namespace_ ().empty ())
      {
        this->a_.set (a_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "b" && n.namespace_ ().empty ())
      {
        this->b_.set (b_traits::create (i, f, this));
        continue;
      }
    }

    if (!gas_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "gas",
        "");
    }

    if (!number_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "number",
        "");
    }

    if (!halflife_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "halflife",
        "");
    }

    if (!a_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "a",
        "");
    }

    if (!b_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "b",
        "");
    }
  }

  tissueType* tissueType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tissueType (*this, f, c);
  }

  tissueType& tissueType::
  operator= (const tissueType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->gas_ = x.gas_;
      this->number_ = x.number_;
      this->halflife_ = x.halflife_;
      this->a_ = x.a_;
      this->b_ = x.b_;
    }

    return *this;
  }

  tissueType::
  ~tissueType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const tissueType& i)
  {
    o << ::std::endl << "gas: " << i.gas ();
    o << ::std::endl << "number: " << i.number ();
    o << ::std::endl << "halflife: " << i.halflife ();
    o << ::std::endl << "a: " << i.a ();
    o << ::std::endl << "b: " << i.b ();
    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

