// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "trippartType.hxx"

#include "dateoftrip.hxx"

#include "geographyType.hxx"

#include "accommodationType.hxx"

#include "operatorType.hxx"

#include "vesselType.hxx"

#include "linkType.hxx"

#include "relateddives.hxx"

#include "priceperdivepackageType.hxx"

#include "priceType.hxx"

#include "ratingType.hxx"

#include "notesType.hxx"

namespace streit
{
  // trippartType
  //

  const trippartType::dateoftrip_optional& trippartType::
  dateoftrip () const
  {
    return this->dateoftrip_;
  }

  trippartType::dateoftrip_optional& trippartType::
  dateoftrip ()
  {
    return this->dateoftrip_;
  }

  void trippartType::
  dateoftrip (const dateoftrip_type& x)
  {
    this->dateoftrip_.set (x);
  }

  void trippartType::
  dateoftrip (const dateoftrip_optional& x)
  {
    this->dateoftrip_ = x;
  }

  void trippartType::
  dateoftrip (::std::unique_ptr< dateoftrip_type > x)
  {
    this->dateoftrip_.set (std::move (x));
  }

  const trippartType::geography_optional& trippartType::
  geography () const
  {
    return this->geography_;
  }

  trippartType::geography_optional& trippartType::
  geography ()
  {
    return this->geography_;
  }

  void trippartType::
  geography (const geography_type& x)
  {
    this->geography_.set (x);
  }

  void trippartType::
  geography (const geography_optional& x)
  {
    this->geography_ = x;
  }

  void trippartType::
  geography (::std::unique_ptr< geography_type > x)
  {
    this->geography_.set (std::move (x));
  }

  const trippartType::accomodation_optional& trippartType::
  accomodation () const
  {
    return this->accomodation_;
  }

  trippartType::accomodation_optional& trippartType::
  accomodation ()
  {
    return this->accomodation_;
  }

  void trippartType::
  accomodation (const accomodation_type& x)
  {
    this->accomodation_.set (x);
  }

  void trippartType::
  accomodation (const accomodation_optional& x)
  {
    this->accomodation_ = x;
  }

  void trippartType::
  accomodation (::std::unique_ptr< accomodation_type > x)
  {
    this->accomodation_.set (std::move (x));
  }

  const trippartType::operator_optional& trippartType::
  operator_ () const
  {
    return this->operator__;
  }

  trippartType::operator_optional& trippartType::
  operator_ ()
  {
    return this->operator__;
  }

  void trippartType::
  operator_ (const operator_type& x)
  {
    this->operator__.set (x);
  }

  void trippartType::
  operator_ (const operator_optional& x)
  {
    this->operator__ = x;
  }

  void trippartType::
  operator_ (::std::unique_ptr< operator_type > x)
  {
    this->operator__.set (std::move (x));
  }

  const trippartType::vessel_optional& trippartType::
  vessel () const
  {
    return this->vessel_;
  }

  trippartType::vessel_optional& trippartType::
  vessel ()
  {
    return this->vessel_;
  }

  void trippartType::
  vessel (const vessel_type& x)
  {
    this->vessel_.set (x);
  }

  void trippartType::
  vessel (const vessel_optional& x)
  {
    this->vessel_ = x;
  }

  void trippartType::
  vessel (::std::unique_ptr< vessel_type > x)
  {
    this->vessel_.set (std::move (x));
  }

  const trippartType::link_optional& trippartType::
  link () const
  {
    return this->link_;
  }

  trippartType::link_optional& trippartType::
  link ()
  {
    return this->link_;
  }

  void trippartType::
  link (const link_type& x)
  {
    this->link_.set (x);
  }

  void trippartType::
  link (const link_optional& x)
  {
    this->link_ = x;
  }

  void trippartType::
  link (::std::unique_ptr< link_type > x)
  {
    this->link_.set (std::move (x));
  }

  const trippartType::relateddives_optional& trippartType::
  relateddives () const
  {
    return this->relateddives_;
  }

  trippartType::relateddives_optional& trippartType::
  relateddives ()
  {
    return this->relateddives_;
  }

  void trippartType::
  relateddives (const relateddives_type& x)
  {
    this->relateddives_.set (x);
  }

  void trippartType::
  relateddives (const relateddives_optional& x)
  {
    this->relateddives_ = x;
  }

  void trippartType::
  relateddives (::std::unique_ptr< relateddives_type > x)
  {
    this->relateddives_.set (std::move (x));
  }

  const trippartType::pricedivepackage_optional& trippartType::
  pricedivepackage () const
  {
    return this->pricedivepackage_;
  }

  trippartType::pricedivepackage_optional& trippartType::
  pricedivepackage ()
  {
    return this->pricedivepackage_;
  }

  void trippartType::
  pricedivepackage (const pricedivepackage_type& x)
  {
    this->pricedivepackage_.set (x);
  }

  void trippartType::
  pricedivepackage (const pricedivepackage_optional& x)
  {
    this->pricedivepackage_ = x;
  }

  void trippartType::
  pricedivepackage (::std::unique_ptr< pricedivepackage_type > x)
  {
    this->pricedivepackage_.set (std::move (x));
  }

  const trippartType::priceperdive_optional& trippartType::
  priceperdive () const
  {
    return this->priceperdive_;
  }

  trippartType::priceperdive_optional& trippartType::
  priceperdive ()
  {
    return this->priceperdive_;
  }

  void trippartType::
  priceperdive (const priceperdive_type& x)
  {
    this->priceperdive_.set (x);
  }

  void trippartType::
  priceperdive (const priceperdive_optional& x)
  {
    this->priceperdive_ = x;
  }

  void trippartType::
  priceperdive (::std::unique_ptr< priceperdive_type > x)
  {
    this->priceperdive_.set (std::move (x));
  }

  const trippartType::rating_sequence& trippartType::
  rating () const
  {
    return this->rating_;
  }

  trippartType::rating_sequence& trippartType::
  rating ()
  {
    return this->rating_;
  }

  void trippartType::
  rating (const rating_sequence& s)
  {
    this->rating_ = s;
  }

  const trippartType::notes_optional& trippartType::
  notes () const
  {
    return this->notes_;
  }

  trippartType::notes_optional& trippartType::
  notes ()
  {
    return this->notes_;
  }

  void trippartType::
  notes (const notes_type& x)
  {
    this->notes_.set (x);
  }

  void trippartType::
  notes (const notes_optional& x)
  {
    this->notes_ = x;
  }

  void trippartType::
  notes (::std::unique_ptr< notes_type > x)
  {
    this->notes_.set (std::move (x));
  }

  const trippartType::type_optional& trippartType::
  type () const
  {
    return this->type_;
  }

  trippartType::type_optional& trippartType::
  type ()
  {
    return this->type_;
  }

  void trippartType::
  type (const type_type& x)
  {
    this->type_.set (x);
  }

  void trippartType::
  type (const type_optional& x)
  {
    this->type_ = x;
  }

  void trippartType::
  type (::std::unique_ptr< type_type > x)
  {
    this->type_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // trippartType
  //

  trippartType::
  trippartType (const name_type& name)
  : ::streit::simpleNamedType (name),
    dateoftrip_ (this),
    geography_ (this),
    accomodation_ (this),
    operator__ (this),
    vessel_ (this),
    link_ (this),
    relateddives_ (this),
    pricedivepackage_ (this),
    priceperdive_ (this),
    rating_ (this),
    notes_ (this),
    type_ (this)
  {
  }

  trippartType::
  trippartType (const trippartType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::streit::simpleNamedType (x, f, c),
    dateoftrip_ (x.dateoftrip_, f, this),
    geography_ (x.geography_, f, this),
    accomodation_ (x.accomodation_, f, this),
    operator__ (x.operator__, f, this),
    vessel_ (x.vessel_, f, this),
    link_ (x.link_, f, this),
    relateddives_ (x.relateddives_, f, this),
    pricedivepackage_ (x.pricedivepackage_, f, this),
    priceperdive_ (x.priceperdive_, f, this),
    rating_ (x.rating_, f, this),
    notes_ (x.notes_, f, this),
    type_ (x.type_, f, this)
  {
  }

  trippartType::
  trippartType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::streit::simpleNamedType (e, f | ::xml_schema::flags::base, c),
    dateoftrip_ (this),
    geography_ (this),
    accomodation_ (this),
    operator__ (this),
    vessel_ (this),
    link_ (this),
    relateddives_ (this),
    pricedivepackage_ (this),
    priceperdive_ (this),
    rating_ (this),
    notes_ (this),
    type_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void trippartType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::simpleNamedType::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // dateoftrip
      //
      if (n.name () == "dateoftrip" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< dateoftrip_type > r (
          dateoftrip_traits::create (i, f, this));

        if (!this->dateoftrip_)
        {
          this->dateoftrip_.set (::std::move (r));
          continue;
        }
      }

      // geography
      //
      if (n.name () == "geography" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< geography_type > r (
          geography_traits::create (i, f, this));

        if (!this->geography_)
        {
          this->geography_.set (::std::move (r));
          continue;
        }
      }

      // accomodation
      //
      if (n.name () == "accomodation" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< accomodation_type > r (
          accomodation_traits::create (i, f, this));

        if (!this->accomodation_)
        {
          this->accomodation_.set (::std::move (r));
          continue;
        }
      }

      // operator
      //
      if (n.name () == "operator" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< operator_type > r (
          operator_traits::create (i, f, this));

        if (!this->operator__)
        {
          this->operator__.set (::std::move (r));
          continue;
        }
      }

      // vessel
      //
      if (n.name () == "vessel" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< vessel_type > r (
          vessel_traits::create (i, f, this));

        if (!this->vessel_)
        {
          this->vessel_.set (::std::move (r));
          continue;
        }
      }

      // link
      //
      if (n.name () == "link" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< link_type > r (
          link_traits::create (i, f, this));

        if (!this->link_)
        {
          this->link_.set (::std::move (r));
          continue;
        }
      }

      // relateddives
      //
      if (n.name () == "relateddives" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< relateddives_type > r (
          relateddives_traits::create (i, f, this));

        if (!this->relateddives_)
        {
          this->relateddives_.set (::std::move (r));
          continue;
        }
      }

      // pricedivepackage
      //
      if (n.name () == "pricedivepackage" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< pricedivepackage_type > r (
          pricedivepackage_traits::create (i, f, this));

        if (!this->pricedivepackage_)
        {
          this->pricedivepackage_.set (::std::move (r));
          continue;
        }
      }

      // priceperdive
      //
      if (n.name () == "priceperdive" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< priceperdive_type > r (
          priceperdive_traits::create (i, f, this));

        if (!this->priceperdive_)
        {
          this->priceperdive_.set (::std::move (r));
          continue;
        }
      }

      // rating
      //
      if (n.name () == "rating" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< rating_type > r (
          rating_traits::create (i, f, this));

        this->rating_.push_back (::std::move (r));
        continue;
      }

      // notes
      //
      if (n.name () == "notes" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< notes_type > r (
          notes_traits::create (i, f, this));

        if (!this->notes_)
        {
          this->notes_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        this->type_.set (type_traits::create (i, f, this));
        continue;
      }
    }
  }

  trippartType* trippartType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class trippartType (*this, f, c);
  }

  trippartType& trippartType::
  operator= (const trippartType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::simpleNamedType& > (*this) = x;
      this->dateoftrip_ = x.dateoftrip_;
      this->geography_ = x.geography_;
      this->accomodation_ = x.accomodation_;
      this->operator__ = x.operator__;
      this->vessel_ = x.vessel_;
      this->link_ = x.link_;
      this->relateddives_ = x.relateddives_;
      this->pricedivepackage_ = x.pricedivepackage_;
      this->priceperdive_ = x.priceperdive_;
      this->rating_ = x.rating_;
      this->notes_ = x.notes_;
      this->type_ = x.type_;
    }

    return *this;
  }

  trippartType::
  ~trippartType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const trippartType& i)
  {
    o << static_cast< const ::streit::simpleNamedType& > (i);

    if (i.dateoftrip ())
    {
      o << ::std::endl << "dateoftrip: " << *i.dateoftrip ();
    }

    if (i.geography ())
    {
      o << ::std::endl << "geography: " << *i.geography ();
    }

    if (i.accomodation ())
    {
      o << ::std::endl << "accomodation: " << *i.accomodation ();
    }

    if (i.operator_ ())
    {
      o << ::std::endl << "operator: " << *i.operator_ ();
    }

    if (i.vessel ())
    {
      o << ::std::endl << "vessel: " << *i.vessel ();
    }

    if (i.link ())
    {
      o << ::std::endl << "link: " << *i.link ();
    }

    if (i.relateddives ())
    {
      o << ::std::endl << "relateddives: " << *i.relateddives ();
    }

    if (i.pricedivepackage ())
    {
      o << ::std::endl << "pricedivepackage: " << *i.pricedivepackage ();
    }

    if (i.priceperdive ())
    {
      o << ::std::endl << "priceperdive: " << *i.priceperdive ();
    }

    for (trippartType::rating_const_iterator
         b (i.rating ().begin ()), e (i.rating ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "rating: " << *b;
    }

    if (i.notes ())
    {
      o << ::std::endl << "notes: " << *i.notes ();
    }

    if (i.type ())
    {
      o << ::std::endl << "type: " << *i.type ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

