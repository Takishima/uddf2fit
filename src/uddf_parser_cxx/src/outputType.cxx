// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "outputType.hxx"

namespace streit
{
  // outputType
  //

  const outputType::lingo_optional& outputType::
  lingo () const
  {
    return this->lingo_;
  }

  outputType::lingo_optional& outputType::
  lingo ()
  {
    return this->lingo_;
  }

  void outputType::
  lingo (const lingo_type& x)
  {
    this->lingo_.set (x);
  }

  void outputType::
  lingo (const lingo_optional& x)
  {
    this->lingo_ = x;
  }

  void outputType::
  lingo (::std::unique_ptr< lingo_type > x)
  {
    this->lingo_.set (std::move (x));
  }

  const outputType::fileformat_optional& outputType::
  fileformat () const
  {
    return this->fileformat_;
  }

  outputType::fileformat_optional& outputType::
  fileformat ()
  {
    return this->fileformat_;
  }

  void outputType::
  fileformat (const fileformat_type& x)
  {
    this->fileformat_.set (x);
  }

  void outputType::
  fileformat (const fileformat_optional& x)
  {
    this->fileformat_ = x;
  }

  void outputType::
  fileformat (::std::unique_ptr< fileformat_type > x)
  {
    this->fileformat_.set (std::move (x));
  }

  const outputType::filename_optional& outputType::
  filename () const
  {
    return this->filename_;
  }

  outputType::filename_optional& outputType::
  filename ()
  {
    return this->filename_;
  }

  void outputType::
  filename (const filename_type& x)
  {
    this->filename_.set (x);
  }

  void outputType::
  filename (const filename_optional& x)
  {
    this->filename_ = x;
  }

  void outputType::
  filename (::std::unique_ptr< filename_type > x)
  {
    this->filename_.set (std::move (x));
  }

  const outputType::headline_optional& outputType::
  headline () const
  {
    return this->headline_;
  }

  outputType::headline_optional& outputType::
  headline ()
  {
    return this->headline_;
  }

  void outputType::
  headline (const headline_type& x)
  {
    this->headline_.set (x);
  }

  void outputType::
  headline (const headline_optional& x)
  {
    this->headline_ = x;
  }

  void outputType::
  headline (::std::unique_ptr< headline_type > x)
  {
    this->headline_.set (std::move (x));
  }

  const outputType::remark_optional& outputType::
  remark () const
  {
    return this->remark_;
  }

  outputType::remark_optional& outputType::
  remark ()
  {
    return this->remark_;
  }

  void outputType::
  remark (const remark_type& x)
  {
    this->remark_.set (x);
  }

  void outputType::
  remark (const remark_optional& x)
  {
    this->remark_ = x;
  }

  void outputType::
  remark (::std::unique_ptr< remark_type > x)
  {
    this->remark_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // outputType
  //

  outputType::
  outputType ()
  : ::xml_schema::type (),
    lingo_ (this),
    fileformat_ (this),
    filename_ (this),
    headline_ (this),
    remark_ (this)
  {
  }

  outputType::
  outputType (const outputType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    lingo_ (x.lingo_, f, this),
    fileformat_ (x.fileformat_, f, this),
    filename_ (x.filename_, f, this),
    headline_ (x.headline_, f, this),
    remark_ (x.remark_, f, this)
  {
  }

  outputType::
  outputType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    lingo_ (this),
    fileformat_ (this),
    filename_ (this),
    headline_ (this),
    remark_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void outputType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // lingo
      //
      if (n.name () == "lingo" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< lingo_type > r (
          lingo_traits::create (i, f, this));

        if (!this->lingo_)
        {
          this->lingo_.set (::std::move (r));
          continue;
        }
      }

      // fileformat
      //
      if (n.name () == "fileformat" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< fileformat_type > r (
          fileformat_traits::create (i, f, this));

        if (!this->fileformat_)
        {
          this->fileformat_.set (::std::move (r));
          continue;
        }
      }

      // filename
      //
      if (n.name () == "filename" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< filename_type > r (
          filename_traits::create (i, f, this));

        if (!this->filename_)
        {
          this->filename_.set (::std::move (r));
          continue;
        }
      }

      // headline
      //
      if (n.name () == "headline" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< headline_type > r (
          headline_traits::create (i, f, this));

        if (!this->headline_)
        {
          this->headline_.set (::std::move (r));
          continue;
        }
      }

      // remark
      //
      if (n.name () == "remark" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< remark_type > r (
          remark_traits::create (i, f, this));

        if (!this->remark_)
        {
          this->remark_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  outputType* outputType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class outputType (*this, f, c);
  }

  outputType& outputType::
  operator= (const outputType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->lingo_ = x.lingo_;
      this->fileformat_ = x.fileformat_;
      this->filename_ = x.filename_;
      this->headline_ = x.headline_;
      this->remark_ = x.remark_;
    }

    return *this;
  }

  outputType::
  ~outputType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const outputType& i)
  {
    if (i.lingo ())
    {
      o << ::std::endl << "lingo: " << *i.lingo ();
    }

    if (i.fileformat ())
    {
      o << ::std::endl << "fileformat: " << *i.fileformat ();
    }

    if (i.filename ())
    {
      o << ::std::endl << "filename: " << *i.filename ();
    }

    if (i.headline ())
    {
      o << ::std::endl << "headline: " << *i.headline ();
    }

    if (i.remark ())
    {
      o << ::std::endl << "remark: " << *i.remark ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

