// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "tablescopeType.hxx"

namespace streit
{
  // tablescopeType
  //

  const tablescopeType::altitude_optional& tablescopeType::
  altitude () const
  {
    return this->altitude_;
  }

  tablescopeType::altitude_optional& tablescopeType::
  altitude ()
  {
    return this->altitude_;
  }

  void tablescopeType::
  altitude (const altitude_type& x)
  {
    this->altitude_.set (x);
  }

  void tablescopeType::
  altitude (const altitude_optional& x)
  {
    this->altitude_ = x;
  }

  const tablescopeType::divedepthbegin_optional& tablescopeType::
  divedepthbegin () const
  {
    return this->divedepthbegin_;
  }

  tablescopeType::divedepthbegin_optional& tablescopeType::
  divedepthbegin ()
  {
    return this->divedepthbegin_;
  }

  void tablescopeType::
  divedepthbegin (const divedepthbegin_type& x)
  {
    this->divedepthbegin_.set (x);
  }

  void tablescopeType::
  divedepthbegin (const divedepthbegin_optional& x)
  {
    this->divedepthbegin_ = x;
  }

  const tablescopeType::divedepthend_optional& tablescopeType::
  divedepthend () const
  {
    return this->divedepthend_;
  }

  tablescopeType::divedepthend_optional& tablescopeType::
  divedepthend ()
  {
    return this->divedepthend_;
  }

  void tablescopeType::
  divedepthend (const divedepthend_type& x)
  {
    this->divedepthend_.set (x);
  }

  void tablescopeType::
  divedepthend (const divedepthend_optional& x)
  {
    this->divedepthend_ = x;
  }

  const tablescopeType::divedepthstep_optional& tablescopeType::
  divedepthstep () const
  {
    return this->divedepthstep_;
  }

  tablescopeType::divedepthstep_optional& tablescopeType::
  divedepthstep ()
  {
    return this->divedepthstep_;
  }

  void tablescopeType::
  divedepthstep (const divedepthstep_type& x)
  {
    this->divedepthstep_.set (x);
  }

  void tablescopeType::
  divedepthstep (const divedepthstep_optional& x)
  {
    this->divedepthstep_ = x;
  }

  const tablescopeType::bottomtimemaximum_optional& tablescopeType::
  bottomtimemaximum () const
  {
    return this->bottomtimemaximum_;
  }

  tablescopeType::bottomtimemaximum_optional& tablescopeType::
  bottomtimemaximum ()
  {
    return this->bottomtimemaximum_;
  }

  void tablescopeType::
  bottomtimemaximum (const bottomtimemaximum_type& x)
  {
    this->bottomtimemaximum_.set (x);
  }

  void tablescopeType::
  bottomtimemaximum (const bottomtimemaximum_optional& x)
  {
    this->bottomtimemaximum_ = x;
  }

  const tablescopeType::bottomtimeminimum_optional& tablescopeType::
  bottomtimeminimum () const
  {
    return this->bottomtimeminimum_;
  }

  tablescopeType::bottomtimeminimum_optional& tablescopeType::
  bottomtimeminimum ()
  {
    return this->bottomtimeminimum_;
  }

  void tablescopeType::
  bottomtimeminimum (const bottomtimeminimum_type& x)
  {
    this->bottomtimeminimum_.set (x);
  }

  void tablescopeType::
  bottomtimeminimum (const bottomtimeminimum_optional& x)
  {
    this->bottomtimeminimum_ = x;
  }

  const tablescopeType::bottomtimestepbegin_optional& tablescopeType::
  bottomtimestepbegin () const
  {
    return this->bottomtimestepbegin_;
  }

  tablescopeType::bottomtimestepbegin_optional& tablescopeType::
  bottomtimestepbegin ()
  {
    return this->bottomtimestepbegin_;
  }

  void tablescopeType::
  bottomtimestepbegin (const bottomtimestepbegin_type& x)
  {
    this->bottomtimestepbegin_.set (x);
  }

  void tablescopeType::
  bottomtimestepbegin (const bottomtimestepbegin_optional& x)
  {
    this->bottomtimestepbegin_ = x;
  }

  const tablescopeType::bottomtimestepend_optional& tablescopeType::
  bottomtimestepend () const
  {
    return this->bottomtimestepend_;
  }

  tablescopeType::bottomtimestepend_optional& tablescopeType::
  bottomtimestepend ()
  {
    return this->bottomtimestepend_;
  }

  void tablescopeType::
  bottomtimestepend (const bottomtimestepend_type& x)
  {
    this->bottomtimestepend_.set (x);
  }

  void tablescopeType::
  bottomtimestepend (const bottomtimestepend_optional& x)
  {
    this->bottomtimestepend_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // tablescopeType
  //

  tablescopeType::
  tablescopeType ()
  : ::xml_schema::type (),
    altitude_ (this),
    divedepthbegin_ (this),
    divedepthend_ (this),
    divedepthstep_ (this),
    bottomtimemaximum_ (this),
    bottomtimeminimum_ (this),
    bottomtimestepbegin_ (this),
    bottomtimestepend_ (this)
  {
  }

  tablescopeType::
  tablescopeType (const tablescopeType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    altitude_ (x.altitude_, f, this),
    divedepthbegin_ (x.divedepthbegin_, f, this),
    divedepthend_ (x.divedepthend_, f, this),
    divedepthstep_ (x.divedepthstep_, f, this),
    bottomtimemaximum_ (x.bottomtimemaximum_, f, this),
    bottomtimeminimum_ (x.bottomtimeminimum_, f, this),
    bottomtimestepbegin_ (x.bottomtimestepbegin_, f, this),
    bottomtimestepend_ (x.bottomtimestepend_, f, this)
  {
  }

  tablescopeType::
  tablescopeType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    altitude_ (this),
    divedepthbegin_ (this),
    divedepthend_ (this),
    divedepthstep_ (this),
    bottomtimemaximum_ (this),
    bottomtimeminimum_ (this),
    bottomtimestepbegin_ (this),
    bottomtimestepend_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void tablescopeType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // altitude
      //
      if (n.name () == "altitude" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->altitude_)
        {
          this->altitude_.set (altitude_traits::create (i, f, this));
          continue;
        }
      }

      // divedepthbegin
      //
      if (n.name () == "divedepthbegin" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->divedepthbegin_)
        {
          this->divedepthbegin_.set (divedepthbegin_traits::create (i, f, this));
          continue;
        }
      }

      // divedepthend
      //
      if (n.name () == "divedepthend" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->divedepthend_)
        {
          this->divedepthend_.set (divedepthend_traits::create (i, f, this));
          continue;
        }
      }

      // divedepthstep
      //
      if (n.name () == "divedepthstep" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->divedepthstep_)
        {
          this->divedepthstep_.set (divedepthstep_traits::create (i, f, this));
          continue;
        }
      }

      // bottomtimemaximum
      //
      if (n.name () == "bottomtimemaximum" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->bottomtimemaximum_)
        {
          this->bottomtimemaximum_.set (bottomtimemaximum_traits::create (i, f, this));
          continue;
        }
      }

      // bottomtimeminimum
      //
      if (n.name () == "bottomtimeminimum" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->bottomtimeminimum_)
        {
          this->bottomtimeminimum_.set (bottomtimeminimum_traits::create (i, f, this));
          continue;
        }
      }

      // bottomtimestepbegin
      //
      if (n.name () == "bottomtimestepbegin" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->bottomtimestepbegin_)
        {
          this->bottomtimestepbegin_.set (bottomtimestepbegin_traits::create (i, f, this));
          continue;
        }
      }

      // bottomtimestepend
      //
      if (n.name () == "bottomtimestepend" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->bottomtimestepend_)
        {
          this->bottomtimestepend_.set (bottomtimestepend_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }
  }

  tablescopeType* tablescopeType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class tablescopeType (*this, f, c);
  }

  tablescopeType& tablescopeType::
  operator= (const tablescopeType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->altitude_ = x.altitude_;
      this->divedepthbegin_ = x.divedepthbegin_;
      this->divedepthend_ = x.divedepthend_;
      this->divedepthstep_ = x.divedepthstep_;
      this->bottomtimemaximum_ = x.bottomtimemaximum_;
      this->bottomtimeminimum_ = x.bottomtimeminimum_;
      this->bottomtimestepbegin_ = x.bottomtimestepbegin_;
      this->bottomtimestepend_ = x.bottomtimestepend_;
    }

    return *this;
  }

  tablescopeType::
  ~tablescopeType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const tablescopeType& i)
  {
    if (i.altitude ())
    {
      o << ::std::endl << "altitude: " << *i.altitude ();
    }

    if (i.divedepthbegin ())
    {
      o << ::std::endl << "divedepthbegin: " << *i.divedepthbegin ();
    }

    if (i.divedepthend ())
    {
      o << ::std::endl << "divedepthend: " << *i.divedepthend ();
    }

    if (i.divedepthstep ())
    {
      o << ::std::endl << "divedepthstep: " << *i.divedepthstep ();
    }

    if (i.bottomtimemaximum ())
    {
      o << ::std::endl << "bottomtimemaximum: " << *i.bottomtimemaximum ();
    }

    if (i.bottomtimeminimum ())
    {
      o << ::std::endl << "bottomtimeminimum: " << *i.bottomtimeminimum ();
    }

    if (i.bottomtimestepbegin ())
    {
      o << ::std::endl << "bottomtimestepbegin: " << *i.bottomtimestepbegin ();
    }

    if (i.bottomtimestepend ())
    {
      o << ::std::endl << "bottomtimestepend: " << *i.bottomtimestepend ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

