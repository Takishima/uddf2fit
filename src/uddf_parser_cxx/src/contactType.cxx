// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "contactType.hxx"

namespace streit
{
  // contactType
  //

  const contactType::language_sequence& contactType::
  language () const
  {
    return this->language_;
  }

  contactType::language_sequence& contactType::
  language ()
  {
    return this->language_;
  }

  void contactType::
  language (const language_sequence& s)
  {
    this->language_ = s;
  }

  const contactType::phone_sequence& contactType::
  phone () const
  {
    return this->phone_;
  }

  contactType::phone_sequence& contactType::
  phone ()
  {
    return this->phone_;
  }

  void contactType::
  phone (const phone_sequence& s)
  {
    this->phone_ = s;
  }

  const contactType::mobilephone_sequence& contactType::
  mobilephone () const
  {
    return this->mobilephone_;
  }

  contactType::mobilephone_sequence& contactType::
  mobilephone ()
  {
    return this->mobilephone_;
  }

  void contactType::
  mobilephone (const mobilephone_sequence& s)
  {
    this->mobilephone_ = s;
  }

  const contactType::fax_sequence& contactType::
  fax () const
  {
    return this->fax_;
  }

  contactType::fax_sequence& contactType::
  fax ()
  {
    return this->fax_;
  }

  void contactType::
  fax (const fax_sequence& s)
  {
    this->fax_ = s;
  }

  const contactType::email_sequence& contactType::
  email () const
  {
    return this->email_;
  }

  contactType::email_sequence& contactType::
  email ()
  {
    return this->email_;
  }

  void contactType::
  email (const email_sequence& s)
  {
    this->email_ = s;
  }

  const contactType::homepage_sequence& contactType::
  homepage () const
  {
    return this->homepage_;
  }

  contactType::homepage_sequence& contactType::
  homepage ()
  {
    return this->homepage_;
  }

  void contactType::
  homepage (const homepage_sequence& s)
  {
    this->homepage_ = s;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // contactType
  //

  contactType::
  contactType ()
  : ::xml_schema::type (),
    language_ (this),
    phone_ (this),
    mobilephone_ (this),
    fax_ (this),
    email_ (this),
    homepage_ (this)
  {
  }

  contactType::
  contactType (const contactType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    language_ (x.language_, f, this),
    phone_ (x.phone_, f, this),
    mobilephone_ (x.mobilephone_, f, this),
    fax_ (x.fax_, f, this),
    email_ (x.email_, f, this),
    homepage_ (x.homepage_, f, this)
  {
  }

  contactType::
  contactType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    language_ (this),
    phone_ (this),
    mobilephone_ (this),
    fax_ (this),
    email_ (this),
    homepage_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void contactType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // language
      //
      if (n.name () == "language" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< language_type > r (
          language_traits::create (i, f, this));

        this->language_.push_back (::std::move (r));
        continue;
      }

      // phone
      //
      if (n.name () == "phone" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< phone_type > r (
          phone_traits::create (i, f, this));

        this->phone_.push_back (::std::move (r));
        continue;
      }

      // mobilephone
      //
      if (n.name () == "mobilephone" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< mobilephone_type > r (
          mobilephone_traits::create (i, f, this));

        this->mobilephone_.push_back (::std::move (r));
        continue;
      }

      // fax
      //
      if (n.name () == "fax" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< fax_type > r (
          fax_traits::create (i, f, this));

        this->fax_.push_back (::std::move (r));
        continue;
      }

      // email
      //
      if (n.name () == "email" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< email_type > r (
          email_traits::create (i, f, this));

        this->email_.push_back (::std::move (r));
        continue;
      }

      // homepage
      //
      if (n.name () == "homepage" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< homepage_type > r (
          homepage_traits::create (i, f, this));

        this->homepage_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  contactType* contactType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class contactType (*this, f, c);
  }

  contactType& contactType::
  operator= (const contactType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->language_ = x.language_;
      this->phone_ = x.phone_;
      this->mobilephone_ = x.mobilephone_;
      this->fax_ = x.fax_;
      this->email_ = x.email_;
      this->homepage_ = x.homepage_;
    }

    return *this;
  }

  contactType::
  ~contactType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const contactType& i)
  {
    for (contactType::language_const_iterator
         b (i.language ().begin ()), e (i.language ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "language: " << *b;
    }

    for (contactType::phone_const_iterator
         b (i.phone ().begin ()), e (i.phone ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "phone: " << *b;
    }

    for (contactType::mobilephone_const_iterator
         b (i.mobilephone ().begin ()), e (i.mobilephone ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "mobilephone: " << *b;
    }

    for (contactType::fax_const_iterator
         b (i.fax ().begin ()), e (i.fax ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "fax: " << *b;
    }

    for (contactType::email_const_iterator
         b (i.email ().begin ()), e (i.email ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "email: " << *b;
    }

    for (contactType::homepage_const_iterator
         b (i.homepage ().begin ()), e (i.homepage ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "homepage: " << *b;
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

