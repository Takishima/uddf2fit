// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "baseCalculationType.hxx"

#include "ID.hxx"

#include "linkType.hxx"

#include "surfaceintervalType.hxx"

#include "outputType.hxx"

#include "applicationdataType.hxx"

#include "mixchangeType.hxx"

#include "inputprofileType.hxx"

namespace streit
{
  // baseCalculationType
  //

  const baseCalculationType::title_optional& baseCalculationType::
  title () const
  {
    return this->title_;
  }

  baseCalculationType::title_optional& baseCalculationType::
  title ()
  {
    return this->title_;
  }

  void baseCalculationType::
  title (const title_type& x)
  {
    this->title_.set (x);
  }

  void baseCalculationType::
  title (const title_optional& x)
  {
    this->title_ = x;
  }

  void baseCalculationType::
  title (::std::unique_ptr< title_type > x)
  {
    this->title_.set (std::move (x));
  }

  const baseCalculationType::link_sequence& baseCalculationType::
  link () const
  {
    return this->link_;
  }

  baseCalculationType::link_sequence& baseCalculationType::
  link ()
  {
    return this->link_;
  }

  void baseCalculationType::
  link (const link_sequence& s)
  {
    this->link_ = s;
  }

  const baseCalculationType::surfaceintervalafterdive_optional& baseCalculationType::
  surfaceintervalafterdive () const
  {
    return this->surfaceintervalafterdive_;
  }

  baseCalculationType::surfaceintervalafterdive_optional& baseCalculationType::
  surfaceintervalafterdive ()
  {
    return this->surfaceintervalafterdive_;
  }

  void baseCalculationType::
  surfaceintervalafterdive (const surfaceintervalafterdive_type& x)
  {
    this->surfaceintervalafterdive_.set (x);
  }

  void baseCalculationType::
  surfaceintervalafterdive (const surfaceintervalafterdive_optional& x)
  {
    this->surfaceintervalafterdive_ = x;
  }

  void baseCalculationType::
  surfaceintervalafterdive (::std::unique_ptr< surfaceintervalafterdive_type > x)
  {
    this->surfaceintervalafterdive_.set (std::move (x));
  }

  const baseCalculationType::surfaceintervalbeforedive_optional& baseCalculationType::
  surfaceintervalbeforedive () const
  {
    return this->surfaceintervalbeforedive_;
  }

  baseCalculationType::surfaceintervalbeforedive_optional& baseCalculationType::
  surfaceintervalbeforedive ()
  {
    return this->surfaceintervalbeforedive_;
  }

  void baseCalculationType::
  surfaceintervalbeforedive (const surfaceintervalbeforedive_type& x)
  {
    this->surfaceintervalbeforedive_.set (x);
  }

  void baseCalculationType::
  surfaceintervalbeforedive (const surfaceintervalbeforedive_optional& x)
  {
    this->surfaceintervalbeforedive_ = x;
  }

  void baseCalculationType::
  surfaceintervalbeforedive (::std::unique_ptr< surfaceintervalbeforedive_type > x)
  {
    this->surfaceintervalbeforedive_.set (std::move (x));
  }

  const baseCalculationType::density_optional& baseCalculationType::
  density () const
  {
    return this->density_;
  }

  baseCalculationType::density_optional& baseCalculationType::
  density ()
  {
    return this->density_;
  }

  void baseCalculationType::
  density (const density_type& x)
  {
    this->density_.set (x);
  }

  void baseCalculationType::
  density (const density_optional& x)
  {
    this->density_ = x;
  }

  const baseCalculationType::maximumascendingrate_optional& baseCalculationType::
  maximumascendingrate () const
  {
    return this->maximumascendingrate_;
  }

  baseCalculationType::maximumascendingrate_optional& baseCalculationType::
  maximumascendingrate ()
  {
    return this->maximumascendingrate_;
  }

  void baseCalculationType::
  maximumascendingrate (const maximumascendingrate_type& x)
  {
    this->maximumascendingrate_.set (x);
  }

  void baseCalculationType::
  maximumascendingrate (const maximumascendingrate_optional& x)
  {
    this->maximumascendingrate_ = x;
  }

  const baseCalculationType::output_optional& baseCalculationType::
  output () const
  {
    return this->output_;
  }

  baseCalculationType::output_optional& baseCalculationType::
  output ()
  {
    return this->output_;
  }

  void baseCalculationType::
  output (const output_type& x)
  {
    this->output_.set (x);
  }

  void baseCalculationType::
  output (const output_optional& x)
  {
    this->output_ = x;
  }

  void baseCalculationType::
  output (::std::unique_ptr< output_type > x)
  {
    this->output_.set (std::move (x));
  }

  const baseCalculationType::applicationdata_optional& baseCalculationType::
  applicationdata () const
  {
    return this->applicationdata_;
  }

  baseCalculationType::applicationdata_optional& baseCalculationType::
  applicationdata ()
  {
    return this->applicationdata_;
  }

  void baseCalculationType::
  applicationdata (const applicationdata_type& x)
  {
    this->applicationdata_.set (x);
  }

  void baseCalculationType::
  applicationdata (const applicationdata_optional& x)
  {
    this->applicationdata_ = x;
  }

  void baseCalculationType::
  applicationdata (::std::unique_ptr< applicationdata_type > x)
  {
    this->applicationdata_.set (std::move (x));
  }

  const baseCalculationType::decomodel_optional& baseCalculationType::
  decomodel () const
  {
    return this->decomodel_;
  }

  baseCalculationType::decomodel_optional& baseCalculationType::
  decomodel ()
  {
    return this->decomodel_;
  }

  void baseCalculationType::
  decomodel (const decomodel_type& x)
  {
    this->decomodel_.set (x);
  }

  void baseCalculationType::
  decomodel (const decomodel_optional& x)
  {
    this->decomodel_ = x;
  }

  void baseCalculationType::
  decomodel (::std::unique_ptr< decomodel_type > x)
  {
    this->decomodel_.set (std::move (x));
  }

  const baseCalculationType::deepstoptime_optional& baseCalculationType::
  deepstoptime () const
  {
    return this->deepstoptime_;
  }

  baseCalculationType::deepstoptime_optional& baseCalculationType::
  deepstoptime ()
  {
    return this->deepstoptime_;
  }

  void baseCalculationType::
  deepstoptime (const deepstoptime_type& x)
  {
    this->deepstoptime_.set (x);
  }

  void baseCalculationType::
  deepstoptime (const deepstoptime_optional& x)
  {
    this->deepstoptime_ = x;
  }

  const baseCalculationType::mixchange_optional& baseCalculationType::
  mixchange () const
  {
    return this->mixchange_;
  }

  baseCalculationType::mixchange_optional& baseCalculationType::
  mixchange ()
  {
    return this->mixchange_;
  }

  void baseCalculationType::
  mixchange (const mixchange_type& x)
  {
    this->mixchange_.set (x);
  }

  void baseCalculationType::
  mixchange (const mixchange_optional& x)
  {
    this->mixchange_ = x;
  }

  void baseCalculationType::
  mixchange (::std::unique_ptr< mixchange_type > x)
  {
    this->mixchange_.set (std::move (x));
  }

  const baseCalculationType::inputprofile_optional& baseCalculationType::
  inputprofile () const
  {
    return this->inputprofile_;
  }

  baseCalculationType::inputprofile_optional& baseCalculationType::
  inputprofile ()
  {
    return this->inputprofile_;
  }

  void baseCalculationType::
  inputprofile (const inputprofile_type& x)
  {
    this->inputprofile_.set (x);
  }

  void baseCalculationType::
  inputprofile (const inputprofile_optional& x)
  {
    this->inputprofile_ = x;
  }

  void baseCalculationType::
  inputprofile (::std::unique_ptr< inputprofile_type > x)
  {
    this->inputprofile_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace streit
{
  // baseCalculationType
  //

  baseCalculationType::
  baseCalculationType (const id_type& id)
  : ::streit::ID_TYPE (id),
    title_ (this),
    link_ (this),
    surfaceintervalafterdive_ (this),
    surfaceintervalbeforedive_ (this),
    density_ (this),
    maximumascendingrate_ (this),
    output_ (this),
    applicationdata_ (this),
    decomodel_ (this),
    deepstoptime_ (this),
    mixchange_ (this),
    inputprofile_ (this)
  {
  }

  baseCalculationType::
  baseCalculationType (const baseCalculationType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::streit::ID_TYPE (x, f, c),
    title_ (x.title_, f, this),
    link_ (x.link_, f, this),
    surfaceintervalafterdive_ (x.surfaceintervalafterdive_, f, this),
    surfaceintervalbeforedive_ (x.surfaceintervalbeforedive_, f, this),
    density_ (x.density_, f, this),
    maximumascendingrate_ (x.maximumascendingrate_, f, this),
    output_ (x.output_, f, this),
    applicationdata_ (x.applicationdata_, f, this),
    decomodel_ (x.decomodel_, f, this),
    deepstoptime_ (x.deepstoptime_, f, this),
    mixchange_ (x.mixchange_, f, this),
    inputprofile_ (x.inputprofile_, f, this)
  {
  }

  baseCalculationType::
  baseCalculationType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::streit::ID_TYPE (e, f | ::xml_schema::flags::base, c),
    title_ (this),
    link_ (this),
    surfaceintervalafterdive_ (this),
    surfaceintervalbeforedive_ (this),
    density_ (this),
    maximumascendingrate_ (this),
    output_ (this),
    applicationdata_ (this),
    decomodel_ (this),
    deepstoptime_ (this),
    mixchange_ (this),
    inputprofile_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void baseCalculationType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::streit::ID_TYPE::parse (p, f);

    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // title
      //
      if (n.name () == "title" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< title_type > r (
          title_traits::create (i, f, this));

        if (!this->title_)
        {
          this->title_.set (::std::move (r));
          continue;
        }
      }

      // link
      //
      if (n.name () == "link" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< link_type > r (
          link_traits::create (i, f, this));

        this->link_.push_back (::std::move (r));
        continue;
      }

      // surfaceintervalafterdive
      //
      if (n.name () == "surfaceintervalafterdive" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< surfaceintervalafterdive_type > r (
          surfaceintervalafterdive_traits::create (i, f, this));

        if (!this->surfaceintervalafterdive_)
        {
          this->surfaceintervalafterdive_.set (::std::move (r));
          continue;
        }
      }

      // surfaceintervalbeforedive
      //
      if (n.name () == "surfaceintervalbeforedive" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< surfaceintervalbeforedive_type > r (
          surfaceintervalbeforedive_traits::create (i, f, this));

        if (!this->surfaceintervalbeforedive_)
        {
          this->surfaceintervalbeforedive_.set (::std::move (r));
          continue;
        }
      }

      // density
      //
      if (n.name () == "density" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->density_)
        {
          this->density_.set (density_traits::create (i, f, this));
          continue;
        }
      }

      // maximumascendingrate
      //
      if (n.name () == "maximumascendingrate" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->maximumascendingrate_)
        {
          this->maximumascendingrate_.set (maximumascendingrate_traits::create (i, f, this));
          continue;
        }
      }

      // output
      //
      if (n.name () == "output" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< output_type > r (
          output_traits::create (i, f, this));

        if (!this->output_)
        {
          this->output_.set (::std::move (r));
          continue;
        }
      }

      // applicationdata
      //
      if (n.name () == "applicationdata" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< applicationdata_type > r (
          applicationdata_traits::create (i, f, this));

        if (!this->applicationdata_)
        {
          this->applicationdata_.set (::std::move (r));
          continue;
        }
      }

      // decomodel
      //
      if (n.name () == "decomodel" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< decomodel_type > r (
          decomodel_traits::create (i, f, this));

        if (!this->decomodel_)
        {
          this->decomodel_.set (::std::move (r));
          continue;
        }
      }

      // deepstoptime
      //
      if (n.name () == "deepstoptime" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        if (!this->deepstoptime_)
        {
          this->deepstoptime_.set (deepstoptime_traits::create (i, f, this));
          continue;
        }
      }

      // mixchange
      //
      if (n.name () == "mixchange" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< mixchange_type > r (
          mixchange_traits::create (i, f, this));

        if (!this->mixchange_)
        {
          this->mixchange_.set (::std::move (r));
          continue;
        }
      }

      // inputprofile
      //
      if (n.name () == "inputprofile" && n.namespace_ () == "http://www.streit.cc/uddf/3.2/")
      {
        ::std::unique_ptr< inputprofile_type > r (
          inputprofile_traits::create (i, f, this));

        if (!this->inputprofile_)
        {
          this->inputprofile_.set (::std::move (r));
          continue;
        }
      }

      break;
    }
  }

  baseCalculationType* baseCalculationType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class baseCalculationType (*this, f, c);
  }

  baseCalculationType& baseCalculationType::
  operator= (const baseCalculationType& x)
  {
    if (this != &x)
    {
      static_cast< ::streit::ID_TYPE& > (*this) = x;
      this->title_ = x.title_;
      this->link_ = x.link_;
      this->surfaceintervalafterdive_ = x.surfaceintervalafterdive_;
      this->surfaceintervalbeforedive_ = x.surfaceintervalbeforedive_;
      this->density_ = x.density_;
      this->maximumascendingrate_ = x.maximumascendingrate_;
      this->output_ = x.output_;
      this->applicationdata_ = x.applicationdata_;
      this->decomodel_ = x.decomodel_;
      this->deepstoptime_ = x.deepstoptime_;
      this->mixchange_ = x.mixchange_;
      this->inputprofile_ = x.inputprofile_;
    }

    return *this;
  }

  baseCalculationType::
  ~baseCalculationType ()
  {
  }
}

#include <ostream>

namespace streit
{
  ::std::ostream&
  operator<< (::std::ostream& o, const baseCalculationType& i)
  {
    o << static_cast< const ::streit::ID_TYPE& > (i);

    if (i.title ())
    {
      o << ::std::endl << "title: " << *i.title ();
    }

    for (baseCalculationType::link_const_iterator
         b (i.link ().begin ()), e (i.link ().end ());
         b != e; ++b)
    {
      o << ::std::endl << "link: " << *b;
    }

    if (i.surfaceintervalafterdive ())
    {
      o << ::std::endl << "surfaceintervalafterdive: " << *i.surfaceintervalafterdive ();
    }

    if (i.surfaceintervalbeforedive ())
    {
      o << ::std::endl << "surfaceintervalbeforedive: " << *i.surfaceintervalbeforedive ();
    }

    if (i.density ())
    {
      o << ::std::endl << "density: " << *i.density ();
    }

    if (i.maximumascendingrate ())
    {
      o << ::std::endl << "maximumascendingrate: " << *i.maximumascendingrate ();
    }

    if (i.output ())
    {
      o << ::std::endl << "output: " << *i.output ();
    }

    if (i.applicationdata ())
    {
      o << ::std::endl << "applicationdata: " << *i.applicationdata ();
    }

    if (i.decomodel ())
    {
      o << ::std::endl << "decomodel: " << *i.decomodel ();
    }

    if (i.deepstoptime ())
    {
      o << ::std::endl << "deepstoptime: " << *i.deepstoptime ();
    }

    if (i.mixchange ())
    {
      o << ::std::endl << "mixchange: " << *i.mixchange ();
    }

    if (i.inputprofile ())
    {
      o << ::std::endl << "inputprofile: " << *i.inputprofile ();
    }

    return o;
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace streit
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

