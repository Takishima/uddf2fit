[build-system]
requires = [
    "setuptools>=61",
    "wheel",
    "setuptools_scm[toml]>=6"
]
build-backend = "setuptools.build_meta"

[project]
name =  "uddf2fit"
authors = [
    {name = 'Damien Nguyen', email = 'ngn.damien@gmail.com'},
]
description = "A Python package to convert to/from UDDF to Garmin fit"
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]
requires-python = ">=3.10.0"
dynamic = ["version"]

dependencies = [
    'toml',
    'click',
]

[project.urls]
Homepage = 'https://github.com/Takishima/uddf2fit'
Pypi = 'https://pypi.org/project/uddf2fit/'
Repository = 'https://github.com/Takishima/uddf2fit'
Issues = 'https://github.com/Takishima/uddf2fit/issues'
Changelog = 'https://github.com/Takishima/uddf2fit/blob/main/CHANGELOG.md'

[project.optional-dependencies]
test = ['pytest', 'pytest-cov', 'pytest-mock', 'mock']
xsdata = ['xsdata[cli,lxml,soap]']


[project.scripts]
# uddf2fit = 'uddf2fit.main:main'

[tool.distutils.bdist_wheel]
universal = true

# ==============================================================================

[tool.ruff]
line-length = 120
target-version = 'py310'

[tool.ruff.lint]

select = ['F',     # pyflakes
          'E',     # pycodestyle
          'W',     # pycodestyle
          'C90',   # mccabe
          'I',     # isort
          'N',     # pep8-naming
          'D',     # pydocstyle
          'UP',    # pyupgrade
          'YTT',   # flake-2020
          'ANN',   # flake8-annotations
          'ASYNC', # flake8-async
          'TRIO',  # flake8-trio
          'S',     # flake8-bandit
          'BLE',   # flake8-blind-except
          'FBT',   # flake8-boolean-trap
          'B',     # flake8-bugbear
          'A',     # flake8-builtins
          'C4',    # flake8-comprehensions
          'DTZ',   # flake8-datetimez
          'T10',   # flake8-debugger
          'EM',    # flake8-errmsg
          'EXE',   # flake8-executable
          'FA',    # flake8-future-annotations
          'ISC',   # flake8-implicit-str-concat
          'ICN',   # flake8-import-conventions
          'G',     # flake8-logging-format
          'PIE',   # flake8-pie
          'PT',    # flake8-pytest-style
          'Q',     # flake8-quotes
          'RSE',   # flake8-raise
          'RET',   # flake8-return
          'SLF',   # flake8-self
          'SLOT',  # flake8-slots
          'SIM',   # flake8-simplify
          'TID',   # flake8-tidy-imports
          'TCH',   # flake8-type-checking
          'INT',   # flake8-gettext
          'ARG',   # flake8-unused-arguments
          'PTH',   # flake8-use-pathlib
          'TD',    # flake8-todos
          'FIX',   # flake8-fixme
          'ERA',   # eradicate
          'PL',    # pylint
          'TRY',   # tryceratops
          'FLY',   # flynt
          'NPY',   # numpy specific rules
          'PERF',  # perflint
          'FURB',  # refurb
          'LOG',   # flake8-logging
          'RUF',   # ruff-specific rules
]

ignore = ['ANN101', # missing-type-self
          'D203',   # one-blank-line-before-class
          'D212',   # multi-line-summary-first-line
          'S603',    # subprocess-without-shell-equals-true
          # Ignore rulues below are actually to prevent conflicts between formatting and linting (with fixing)
          # cf. https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
          'COM812',  # missing-trailing-comma
          'COM819',  # prohibited-trailing-comma
          'D206',    # indent-with-spaces
          'E111',    # indentation-with-invalid-multiple
          'E114',    # indentation-with-invalid-multiple-comment
          'E117',    # over-indented
          'ISC001',  # single-line-implicit-string-concatenation
          'ISC002',  # multi-line-implicit-string-concatenation
          'Q000',    # bad-quotes-inline-string
          'Q001',    # bad-quotes-multiline-string
          'Q002',    # bad-quotes-docstring
          'Q003',    # avoidable-escaped-quote
          'S603',    # subprocess-without-shell-equals-true
          'W191',    # tab-indentation
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
line-ending = 'lf'
skip-magic-trailing-comma = false

[tool.ruff.lint.per-file-ignores]

'tests/python/*.py' = ['S101', 'SLF001', 'PLR0913', 'PLR2004', 'D']

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = 'double'
inline-quotes = 'single'
multiline-quotes = 'single'

[tool.ruff.lint.isort]
combine-as-imports = true
section-order = ["future", "standard-library", "first-party", "third-party", "local-folder"]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = 'google'

# ------------------------------------------------------------------------------

[tool.coverage]
[tool.coverage.run]
omit = [
'test_*.py',
]
[tool.pytest.ini_options]
minversion = '6.0'
mock_use_standalone_module = true
pythonpath = [
  "src"
]
testpaths = [
  "tests"
]
junit_family = "xunit2"
